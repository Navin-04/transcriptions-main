"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@huggingface";
exports.ids = ["vendor-chunks/@huggingface"];
exports.modules = {

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/InferenceClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/InferenceClient.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HfInference: () => (/* binding */ HfInference),\n/* harmony export */   InferenceClient: () => (/* binding */ InferenceClient),\n/* harmony export */   InferenceClientEndpoint: () => (/* binding */ InferenceClientEndpoint)\n/* harmony export */ });\n/* harmony import */ var _tasks_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tasks/index.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/index.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _utils_typedEntries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/typedEntries.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedEntries.js\");\n\n\n\nclass InferenceClient {\n    constructor(accessToken = \"\", defaultOptions = {}){\n        this.accessToken = accessToken;\n        this.defaultOptions = defaultOptions;\n        for (const [name, fn] of (0,_utils_typedEntries_js__WEBPACK_IMPORTED_MODULE_2__.typedEntries)(_tasks_index_js__WEBPACK_IMPORTED_MODULE_0__)){\n            Object.defineProperty(this, name, {\n                enumerable: false,\n                value: (params, options)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    fn(/// ^ The cast of fn to any is necessary, otherwise TS can't compile because the generated union type is too complex\n                    {\n                        endpointUrl: defaultOptions.endpointUrl,\n                        accessToken,\n                        ...params\n                    }, {\n                        ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_1__.omit)(defaultOptions, [\n                            \"endpointUrl\"\n                        ]),\n                        ...options\n                    })\n            });\n        }\n    }\n    /**\n     * Returns a new instance of InferenceClient tied to a specified endpoint.\n     *\n     * For backward compatibility mostly.\n     */ endpoint(endpointUrl) {\n        return new InferenceClient(this.accessToken, {\n            ...this.defaultOptions,\n            endpointUrl\n        });\n    }\n}\n/**\n * For backward compatibility only, will remove soon.\n * @deprecated replace with InferenceClient\n */ class HfInference extends InferenceClient {\n}\n/**\n * For backward compatibility only, will remove soon.\n * @deprecated replace with InferenceClient\n */ class InferenceClientEndpoint extends InferenceClient {\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9JbmZlcmVuY2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBDO0FBQ0g7QUFDZ0I7QUFDaEQsTUFBTUc7SUFHVEMsWUFBWUMsY0FBYyxFQUFFLEVBQUVDLGlCQUFpQixDQUFDLENBQUMsQ0FBRTtRQUMvQyxJQUFJLENBQUNELFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUdBO1FBQ3RCLEtBQUssTUFBTSxDQUFDQyxNQUFNQyxHQUFHLElBQUlOLG9FQUFZQSxDQUFDRiw0Q0FBS0EsRUFBRztZQUMxQ1MsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRUgsTUFBTTtnQkFDOUJJLFlBQVk7Z0JBQ1pDLE9BQU8sQ0FBQ0MsUUFBUUMsVUFDaEIsOERBQThEO29CQUM5RE4sR0FDQSxvSEFBb0g7b0JBQ3BIO3dCQUFFTyxhQUFhVCxlQUFlUyxXQUFXO3dCQUFFVjt3QkFBYSxHQUFHUSxNQUFNO29CQUFDLEdBQUc7d0JBQ2pFLEdBQUdaLG9EQUFJQSxDQUFDSyxnQkFBZ0I7NEJBQUM7eUJBQWMsQ0FBQzt3QkFDeEMsR0FBR1EsT0FBTztvQkFDZDtZQUNKO1FBQ0o7SUFDSjtJQUNBOzs7O0tBSUMsR0FDREUsU0FBU0QsV0FBVyxFQUFFO1FBQ2xCLE9BQU8sSUFBSVosZ0JBQWdCLElBQUksQ0FBQ0UsV0FBVyxFQUFFO1lBQUUsR0FBRyxJQUFJLENBQUNDLGNBQWM7WUFBRVM7UUFBWTtJQUN2RjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUUsb0JBQW9CZDtBQUNqQztBQUNBOzs7Q0FHQyxHQUNNLE1BQU1lLGdDQUFnQ2Y7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL0luZmVyZW5jZUNsaWVudC5qcz80ZTcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRhc2tzIGZyb20gXCIuL3Rhc2tzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBvbWl0IH0gZnJvbSBcIi4vdXRpbHMvb21pdC5qc1wiO1xuaW1wb3J0IHsgdHlwZWRFbnRyaWVzIH0gZnJvbSBcIi4vdXRpbHMvdHlwZWRFbnRyaWVzLmpzXCI7XG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlQ2xpZW50IHtcbiAgICBhY2Nlc3NUb2tlbjtcbiAgICBkZWZhdWx0T3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihhY2Nlc3NUb2tlbiA9IFwiXCIsIGRlZmF1bHRPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgICAgICB0aGlzLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIGZuXSBvZiB0eXBlZEVudHJpZXModGFza3MpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAocGFyYW1zLCBvcHRpb25zKSA9PiBcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIGZuKFxuICAgICAgICAgICAgICAgIC8vLyBeIFRoZSBjYXN0IG9mIGZuIHRvIGFueSBpcyBuZWNlc3NhcnksIG90aGVyd2lzZSBUUyBjYW4ndCBjb21waWxlIGJlY2F1c2UgdGhlIGdlbmVyYXRlZCB1bmlvbiB0eXBlIGlzIHRvbyBjb21wbGV4XG4gICAgICAgICAgICAgICAgeyBlbmRwb2ludFVybDogZGVmYXVsdE9wdGlvbnMuZW5kcG9pbnRVcmwsIGFjY2Vzc1Rva2VuLCAuLi5wYXJhbXMgfSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5vbWl0KGRlZmF1bHRPcHRpb25zLCBbXCJlbmRwb2ludFVybFwiXSksXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIEluZmVyZW5jZUNsaWVudCB0aWVkIHRvIGEgc3BlY2lmaWVkIGVuZHBvaW50LlxuICAgICAqXG4gICAgICogRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgbW9zdGx5LlxuICAgICAqL1xuICAgIGVuZHBvaW50KGVuZHBvaW50VXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5mZXJlbmNlQ2xpZW50KHRoaXMuYWNjZXNzVG9rZW4sIHsgLi4udGhpcy5kZWZhdWx0T3B0aW9ucywgZW5kcG9pbnRVcmwgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbmx5LCB3aWxsIHJlbW92ZSBzb29uLlxuICogQGRlcHJlY2F0ZWQgcmVwbGFjZSB3aXRoIEluZmVyZW5jZUNsaWVudFxuICovXG5leHBvcnQgY2xhc3MgSGZJbmZlcmVuY2UgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnQge1xufVxuLyoqXG4gKiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbmx5LCB3aWxsIHJlbW92ZSBzb29uLlxuICogQGRlcHJlY2F0ZWQgcmVwbGFjZSB3aXRoIEluZmVyZW5jZUNsaWVudFxuICovXG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlQ2xpZW50RW5kcG9pbnQgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnQge1xufVxuIl0sIm5hbWVzIjpbInRhc2tzIiwib21pdCIsInR5cGVkRW50cmllcyIsIkluZmVyZW5jZUNsaWVudCIsImNvbnN0cnVjdG9yIiwiYWNjZXNzVG9rZW4iLCJkZWZhdWx0T3B0aW9ucyIsIm5hbWUiLCJmbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInZhbHVlIiwicGFyYW1zIiwib3B0aW9ucyIsImVuZHBvaW50VXJsIiwiZW5kcG9pbnQiLCJIZkluZmVyZW5jZSIsIkluZmVyZW5jZUNsaWVudEVuZHBvaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/InferenceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HF_HEADER_X_BILL_TO: () => (/* binding */ HF_HEADER_X_BILL_TO),\n/* harmony export */   HF_HUB_URL: () => (/* binding */ HF_HUB_URL),\n/* harmony export */   HF_ROUTER_AUTO_ENDPOINT: () => (/* binding */ HF_ROUTER_AUTO_ENDPOINT),\n/* harmony export */   HF_ROUTER_URL: () => (/* binding */ HF_ROUTER_URL)\n/* harmony export */ });\nconst HF_HUB_URL = \"https://huggingface.co\";\nconst HF_ROUTER_URL = \"https://router.huggingface.co\";\nconst HF_ROUTER_AUTO_ENDPOINT = `${HF_ROUTER_URL}/v1`;\nconst HF_HEADER_X_BILL_TO = \"X-HF-Bill-To\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLE1BQU1BLGFBQWEseUJBQXlCO0FBQzVDLE1BQU1DLGdCQUFnQixnQ0FBZ0M7QUFDdEQsTUFBTUMsMEJBQTBCLENBQUMsRUFBRUQsY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN0RCxNQUFNRSxzQkFBc0IsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vY29uZmlnLmpzPzhjZmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhGX0hVQl9VUkwgPSBcImh0dHBzOi8vaHVnZ2luZ2ZhY2UuY29cIjtcbmV4cG9ydCBjb25zdCBIRl9ST1VURVJfVVJMID0gXCJodHRwczovL3JvdXRlci5odWdnaW5nZmFjZS5jb1wiO1xuZXhwb3J0IGNvbnN0IEhGX1JPVVRFUl9BVVRPX0VORFBPSU5UID0gYCR7SEZfUk9VVEVSX1VSTH0vdjFgO1xuZXhwb3J0IGNvbnN0IEhGX0hFQURFUl9YX0JJTExfVE8gPSBcIlgtSEYtQmlsbC1Ub1wiO1xuIl0sIm5hbWVzIjpbIkhGX0hVQl9VUkwiLCJIRl9ST1VURVJfVVJMIiwiSEZfUk9VVEVSX0FVVE9fRU5EUE9JTlQiLCJIRl9IRUFERVJfWF9CSUxMX1RPIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/errors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InferenceClientError: () => (/* binding */ InferenceClientError),\n/* harmony export */   InferenceClientHubApiError: () => (/* binding */ InferenceClientHubApiError),\n/* harmony export */   InferenceClientInputError: () => (/* binding */ InferenceClientInputError),\n/* harmony export */   InferenceClientProviderApiError: () => (/* binding */ InferenceClientProviderApiError),\n/* harmony export */   InferenceClientProviderOutputError: () => (/* binding */ InferenceClientProviderOutputError)\n/* harmony export */ });\n/**\n * Base class for all inference-related errors.\n */ class InferenceClientError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"InferenceClientError\";\n    }\n}\nclass InferenceClientInputError extends InferenceClientError {\n    constructor(message){\n        super(message);\n        this.name = \"InputError\";\n    }\n}\nclass InferenceClientHttpRequestError extends InferenceClientError {\n    constructor(message, httpRequest, httpResponse){\n        super(message);\n        this.httpRequest = {\n            ...httpRequest,\n            ...httpRequest.headers ? {\n                headers: {\n                    ...httpRequest.headers,\n                    ...\"Authorization\" in httpRequest.headers ? {\n                        Authorization: `Bearer [redacted]`\n                    } : undefined\n                }\n            } : undefined\n        };\n        this.httpResponse = httpResponse;\n    }\n}\n/**\n * Thrown when the HTTP request to the provider fails, e.g. due to API issues or server errors.\n */ class InferenceClientProviderApiError extends InferenceClientHttpRequestError {\n    constructor(message, httpRequest, httpResponse){\n        super(message, httpRequest, httpResponse);\n        this.name = \"ProviderApiError\";\n    }\n}\n/**\n * Thrown when the HTTP request to the hub fails, e.g. due to API issues or server errors.\n */ class InferenceClientHubApiError extends InferenceClientHttpRequestError {\n    constructor(message, httpRequest, httpResponse){\n        super(message, httpRequest, httpResponse);\n        this.name = \"HubApiError\";\n    }\n}\n/**\n * Thrown when the inference output returned by the provider is invalid / does not match the expectations\n */ class InferenceClientProviderOutputError extends InferenceClientError {\n    constructor(message){\n        super(message);\n        this.name = \"ProviderOutputError\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BLDZCQUE2QkM7SUFDdENDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNPLE1BQU1DLGtDQUFrQ0w7SUFDM0NFLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBLE1BQU1FLHdDQUF3Q047SUFHMUNFLFlBQVlDLE9BQU8sRUFBRUksV0FBVyxFQUFFQyxZQUFZLENBQUU7UUFDNUMsS0FBSyxDQUFDTDtRQUNOLElBQUksQ0FBQ0ksV0FBVyxHQUFHO1lBQ2YsR0FBR0EsV0FBVztZQUNkLEdBQUlBLFlBQVlFLE9BQU8sR0FDakI7Z0JBQ0VBLFNBQVM7b0JBQ0wsR0FBR0YsWUFBWUUsT0FBTztvQkFDdEIsR0FBSSxtQkFBbUJGLFlBQVlFLE9BQU8sR0FBRzt3QkFBRUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO29CQUFDLElBQUlDLFNBQVM7Z0JBRW5HO1lBQ0osSUFDRUEsU0FBUztRQUNuQjtRQUNBLElBQUksQ0FBQ0gsWUFBWSxHQUFHQTtJQUN4QjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNSSx3Q0FBd0NOO0lBQ2pESixZQUFZQyxPQUFPLEVBQUVJLFdBQVcsRUFBRUMsWUFBWSxDQUFFO1FBQzVDLEtBQUssQ0FBQ0wsU0FBU0ksYUFBYUM7UUFDNUIsSUFBSSxDQUFDSixJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBOztDQUVDLEdBQ00sTUFBTVMsbUNBQW1DUDtJQUM1Q0osWUFBWUMsT0FBTyxFQUFFSSxXQUFXLEVBQUVDLFlBQVksQ0FBRTtRQUM1QyxLQUFLLENBQUNMLFNBQVNJLGFBQWFDO1FBQzVCLElBQUksQ0FBQ0osSUFBSSxHQUFHO0lBQ2hCO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLE1BQU1VLDJDQUEyQ2Q7SUFDcERFLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vZXJyb3JzLmpzP2E4MzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgaW5mZXJlbmNlLXJlbGF0ZWQgZXJyb3JzLlxuICovXG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbmZlcmVuY2VDbGllbnRFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbmZlcmVuY2VDbGllbnRJbnB1dEVycm9yIGV4dGVuZHMgSW5mZXJlbmNlQ2xpZW50RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW5wdXRFcnJvclwiO1xuICAgIH1cbn1cbmNsYXNzIEluZmVyZW5jZUNsaWVudEh0dHBSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnRFcnJvciB7XG4gICAgaHR0cFJlcXVlc3Q7XG4gICAgaHR0cFJlc3BvbnNlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGh0dHBSZXF1ZXN0LCBodHRwUmVzcG9uc2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuaHR0cFJlcXVlc3QgPSB7XG4gICAgICAgICAgICAuLi5odHRwUmVxdWVzdCxcbiAgICAgICAgICAgIC4uLihodHRwUmVxdWVzdC5oZWFkZXJzXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmh0dHBSZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oXCJBdXRob3JpemF0aW9uXCIgaW4gaHR0cFJlcXVlc3QuaGVhZGVycyA/IHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciBbcmVkYWN0ZWRdYCB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vLyByZWRhY3QgYXV0aGVudGljYXRpb24gaW4gdGhlIHJlcXVlc3QgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaHR0cFJlc3BvbnNlID0gaHR0cFJlc3BvbnNlO1xuICAgIH1cbn1cbi8qKlxuICogVGhyb3duIHdoZW4gdGhlIEhUVFAgcmVxdWVzdCB0byB0aGUgcHJvdmlkZXIgZmFpbHMsIGUuZy4gZHVlIHRvIEFQSSBpc3N1ZXMgb3Igc2VydmVyIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIEluZmVyZW5jZUNsaWVudFByb3ZpZGVyQXBpRXJyb3IgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnRIdHRwUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBodHRwUmVxdWVzdCwgaHR0cFJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGh0dHBSZXF1ZXN0LCBodHRwUmVzcG9uc2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlByb3ZpZGVyQXBpRXJyb3JcIjtcbiAgICB9XG59XG4vKipcbiAqIFRocm93biB3aGVuIHRoZSBIVFRQIHJlcXVlc3QgdG8gdGhlIGh1YiBmYWlscywgZS5nLiBkdWUgdG8gQVBJIGlzc3VlcyBvciBzZXJ2ZXIgZXJyb3JzLlxuICovXG5leHBvcnQgY2xhc3MgSW5mZXJlbmNlQ2xpZW50SHViQXBpRXJyb3IgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnRIdHRwUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBodHRwUmVxdWVzdCwgaHR0cFJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGh0dHBSZXF1ZXN0LCBodHRwUmVzcG9uc2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkh1YkFwaUVycm9yXCI7XG4gICAgfVxufVxuLyoqXG4gKiBUaHJvd24gd2hlbiB0aGUgaW5mZXJlbmNlIG91dHB1dCByZXR1cm5lZCBieSB0aGUgcHJvdmlkZXIgaXMgaW52YWxpZCAvIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IgZXh0ZW5kcyBJbmZlcmVuY2VDbGllbnRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQcm92aWRlck91dHB1dEVycm9yXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkluZmVyZW5jZUNsaWVudEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJuYW1lIiwiSW5mZXJlbmNlQ2xpZW50SW5wdXRFcnJvciIsIkluZmVyZW5jZUNsaWVudEh0dHBSZXF1ZXN0RXJyb3IiLCJodHRwUmVxdWVzdCIsImh0dHBSZXNwb25zZSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwidW5kZWZpbmVkIiwiSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJBcGlFcnJvciIsIkluZmVyZW5jZUNsaWVudEh1YkFwaUVycm9yIiwiSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HfInference: () => (/* reexport safe */ _InferenceClient_js__WEBPACK_IMPORTED_MODULE_0__.HfInference),\n/* harmony export */   INFERENCE_PROVIDERS: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.INFERENCE_PROVIDERS),\n/* harmony export */   InferenceClient: () => (/* reexport safe */ _InferenceClient_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClient),\n/* harmony export */   InferenceClientEndpoint: () => (/* reexport safe */ _InferenceClient_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientEndpoint),\n/* harmony export */   InferenceClientError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientError),\n/* harmony export */   InferenceClientHubApiError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientHubApiError),\n/* harmony export */   InferenceClientInputError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientInputError),\n/* harmony export */   InferenceClientProviderApiError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderApiError),\n/* harmony export */   InferenceClientProviderOutputError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError),\n/* harmony export */   PROVIDERS: () => (/* reexport safe */ _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_5__.PROVIDERS),\n/* harmony export */   PROVIDERS_OR_POLICIES: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.PROVIDERS_OR_POLICIES),\n/* harmony export */   audioClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.audioClassification),\n/* harmony export */   audioToAudio: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.audioToAudio),\n/* harmony export */   automaticSpeechRecognition: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.automaticSpeechRecognition),\n/* harmony export */   chatCompletion: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.chatCompletion),\n/* harmony export */   chatCompletionStream: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.chatCompletionStream),\n/* harmony export */   documentQuestionAnswering: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.documentQuestionAnswering),\n/* harmony export */   featureExtraction: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.featureExtraction),\n/* harmony export */   fillMask: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.fillMask),\n/* harmony export */   getProviderHelper: () => (/* reexport safe */ _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_5__.getProviderHelper),\n/* harmony export */   imageClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.imageClassification),\n/* harmony export */   imageSegmentation: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.imageSegmentation),\n/* harmony export */   imageToImage: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.imageToImage),\n/* harmony export */   imageToText: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.imageToText),\n/* harmony export */   imageToVideo: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.imageToVideo),\n/* harmony export */   makeRequestOptions: () => (/* reexport safe */ _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_6__.makeRequestOptions),\n/* harmony export */   makeRequestOptionsFromResolvedModel: () => (/* reexport safe */ _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_6__.makeRequestOptionsFromResolvedModel),\n/* harmony export */   objectDetection: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.objectDetection),\n/* harmony export */   questionAnswering: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.questionAnswering),\n/* harmony export */   request: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.request),\n/* harmony export */   sentenceSimilarity: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.sentenceSimilarity),\n/* harmony export */   setLogger: () => (/* reexport safe */ _lib_logger_js__WEBPACK_IMPORTED_MODULE_7__.setLogger),\n/* harmony export */   snippets: () => (/* reexport module object */ _snippets_index_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   streamingRequest: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.streamingRequest),\n/* harmony export */   summarization: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.summarization),\n/* harmony export */   tableQuestionAnswering: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.tableQuestionAnswering),\n/* harmony export */   tabularClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.tabularClassification),\n/* harmony export */   tabularRegression: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.tabularRegression),\n/* harmony export */   textClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textClassification),\n/* harmony export */   textGeneration: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textGeneration),\n/* harmony export */   textGenerationStream: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textGenerationStream),\n/* harmony export */   textToImage: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textToImage),\n/* harmony export */   textToSpeech: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textToSpeech),\n/* harmony export */   textToVideo: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.textToVideo),\n/* harmony export */   tokenClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.tokenClassification),\n/* harmony export */   translation: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.translation),\n/* harmony export */   visualQuestionAnswering: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.visualQuestionAnswering),\n/* harmony export */   zeroShotClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.zeroShotClassification),\n/* harmony export */   zeroShotImageClassification: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__.zeroShotImageClassification)\n/* harmony export */ });\n/* harmony import */ var _InferenceClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InferenceClient.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/InferenceClient.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/types.js\");\n/* harmony import */ var _tasks_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tasks/index.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/index.js\");\n/* harmony import */ var _snippets_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./snippets/index.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/index.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n/* harmony import */ var _lib_logger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkY7QUFDakU7QUFDRDtBQUNNO0FBQ2U7QUFDTDtBQUNDO0FBQ0E7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL2luZGV4LmpzPzc3MDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgSW5mZXJlbmNlQ2xpZW50LCBJbmZlcmVuY2VDbGllbnRFbmRwb2ludCwgSGZJbmZlcmVuY2UgfSBmcm9tIFwiLi9JbmZlcmVuY2VDbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Rhc2tzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBzbmlwcGV0cyBmcm9tIFwiLi9zbmlwcGV0cy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9saWIvbWFrZVJlcXVlc3RPcHRpb25zLmpzXCI7XG5leHBvcnQgeyBzZXRMb2dnZXIgfSBmcm9tIFwiLi9saWIvbG9nZ2VyLmpzXCI7XG5leHBvcnQgeyBzbmlwcGV0cyB9O1xuIl0sIm5hbWVzIjpbIkluZmVyZW5jZUNsaWVudCIsIkluZmVyZW5jZUNsaWVudEVuZHBvaW50IiwiSGZJbmZlcmVuY2UiLCJzbmlwcGV0cyIsInNldExvZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchInferenceProviderMappingForModel: () => (/* binding */ fetchInferenceProviderMappingForModel),\n/* harmony export */   getInferenceProviderMapping: () => (/* binding */ getInferenceProviderMapping),\n/* harmony export */   inferenceProviderMappingCache: () => (/* binding */ inferenceProviderMappingCache),\n/* harmony export */   resolveProvider: () => (/* binding */ resolveProvider)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n/* harmony import */ var _providers_consts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../providers/consts.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/consts.js\");\n/* harmony import */ var _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../providers/hf-inference.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hf-inference.js\");\n/* harmony import */ var _utils_typedInclude_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/typedInclude.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedInclude.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n\n\n\n\n\n\nconst inferenceProviderMappingCache = new Map();\n/**\n * Normalize inferenceProviderMapping to always return an array format.\n * This provides backward and forward compatibility for the API changes.\n *\n * Vendored from @huggingface/hub to avoid extra dependency.\n */ function normalizeInferenceProviderMapping(modelId, inferenceProviderMapping) {\n    if (!inferenceProviderMapping) {\n        return [];\n    }\n    // If it's already an array, return it as is\n    if (Array.isArray(inferenceProviderMapping)) {\n        return inferenceProviderMapping;\n    }\n    // Convert mapping to array format\n    return Object.entries(inferenceProviderMapping).map(([provider, mapping])=>({\n            provider,\n            hfModelId: modelId,\n            providerId: mapping.providerId,\n            status: mapping.status,\n            task: mapping.task,\n            adapter: mapping.adapter,\n            adapterWeightsPath: mapping.adapterWeightsPath\n        }));\n}\nasync function fetchInferenceProviderMappingForModel(modelId, accessToken, options) {\n    let inferenceProviderMapping;\n    if (inferenceProviderMappingCache.has(modelId)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inferenceProviderMapping = inferenceProviderMappingCache.get(modelId);\n    } else {\n        const url = `${_config_js__WEBPACK_IMPORTED_MODULE_0__.HF_HUB_URL}/api/models/${modelId}?expand[]=inferenceProviderMapping`;\n        const resp = await (options?.fetch ?? fetch)(url, {\n            headers: accessToken?.startsWith(\"hf_\") ? {\n                Authorization: `Bearer ${accessToken}`\n            } : {}\n        });\n        if (!resp.ok) {\n            if (resp.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n                const error = await resp.json();\n                if (\"error\" in error && typeof error.error === \"string\") {\n                    throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientHubApiError(`Failed to fetch inference provider mapping for model ${modelId}: ${error.error}`, {\n                        url,\n                        method: \"GET\"\n                    }, {\n                        requestId: resp.headers.get(\"x-request-id\") ?? \"\",\n                        status: resp.status,\n                        body: error\n                    });\n                }\n            } else {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientHubApiError(`Failed to fetch inference provider mapping for model ${modelId}`, {\n                    url,\n                    method: \"GET\"\n                }, {\n                    requestId: resp.headers.get(\"x-request-id\") ?? \"\",\n                    status: resp.status,\n                    body: await resp.text()\n                });\n            }\n        }\n        let payload = null;\n        try {\n            payload = await resp.json();\n        } catch  {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientHubApiError(`Failed to fetch inference provider mapping for model ${modelId}: malformed API response, invalid JSON`, {\n                url,\n                method: \"GET\"\n            }, {\n                requestId: resp.headers.get(\"x-request-id\") ?? \"\",\n                status: resp.status,\n                body: await resp.text()\n            });\n        }\n        if (!payload?.inferenceProviderMapping) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientHubApiError(`We have not been able to find inference provider information for model ${modelId}.`, {\n                url,\n                method: \"GET\"\n            }, {\n                requestId: resp.headers.get(\"x-request-id\") ?? \"\",\n                status: resp.status,\n                body: await resp.text()\n            });\n        }\n        inferenceProviderMapping = normalizeInferenceProviderMapping(modelId, payload.inferenceProviderMapping);\n        inferenceProviderMappingCache.set(modelId, inferenceProviderMapping);\n    }\n    return inferenceProviderMapping;\n}\nasync function getInferenceProviderMapping(params, options) {\n    const logger = (0,_logger_js__WEBPACK_IMPORTED_MODULE_5__.getLogger)();\n    if (_providers_consts_js__WEBPACK_IMPORTED_MODULE_1__.HARDCODED_MODEL_INFERENCE_MAPPING[params.provider][params.modelId]) {\n        return _providers_consts_js__WEBPACK_IMPORTED_MODULE_1__.HARDCODED_MODEL_INFERENCE_MAPPING[params.provider][params.modelId];\n    }\n    const mappings = await fetchInferenceProviderMappingForModel(params.modelId, params.accessToken, options);\n    const providerMapping = mappings.find((mapping)=>mapping.provider === params.provider);\n    if (providerMapping) {\n        const equivalentTasks = params.provider === \"hf-inference\" && (0,_utils_typedInclude_js__WEBPACK_IMPORTED_MODULE_3__.typedInclude)(_providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_2__.EQUIVALENT_SENTENCE_TRANSFORMERS_TASKS, params.task) ? _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_2__.EQUIVALENT_SENTENCE_TRANSFORMERS_TASKS : [\n            params.task\n        ];\n        if (!(0,_utils_typedInclude_js__WEBPACK_IMPORTED_MODULE_3__.typedInclude)(equivalentTasks, providerMapping.task)) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Model ${params.modelId} is not supported for task ${params.task} and provider ${params.provider}. Supported task: ${providerMapping.task}.`);\n        }\n        if (providerMapping.status === \"staging\") {\n            logger.warn(`Model ${params.modelId} is in staging mode for provider ${params.provider}. Meant for test purposes only.`);\n        }\n        return providerMapping;\n    }\n    return null;\n}\nasync function resolveProvider(provider, modelId, endpointUrl) {\n    const logger = (0,_logger_js__WEBPACK_IMPORTED_MODULE_5__.getLogger)();\n    if (endpointUrl) {\n        if (provider) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(\"Specifying both endpointUrl and provider is not supported.\");\n        }\n        /// Defaulting to hf-inference helpers / API\n        return \"hf-inference\";\n    }\n    if (!provider) {\n        logger.log(\"Defaulting to 'auto' which will select the first provider available for the model, sorted by the user's order in https://hf.co/settings/inference-providers.\");\n        provider = \"auto\";\n    }\n    if (provider === \"auto\") {\n        if (!modelId) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(\"Specifying a model is required when provider is 'auto'\");\n        }\n        const mappings = await fetchInferenceProviderMappingForModel(modelId);\n        provider = mappings[0]?.provider;\n        logger.log(\"Auto selected provider:\", provider);\n    }\n    if (!provider) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`No Inference Provider available for model ${modelId}.`);\n    }\n    return provider;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROVIDERS: () => (/* binding */ PROVIDERS),\n/* harmony export */   getProviderHelper: () => (/* binding */ getProviderHelper)\n/* harmony export */ });\n/* harmony import */ var _providers_black_forest_labs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../providers/black-forest-labs.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/black-forest-labs.js\");\n/* harmony import */ var _providers_cerebras_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../providers/cerebras.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cerebras.js\");\n/* harmony import */ var _providers_cohere_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../providers/cohere.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cohere.js\");\n/* harmony import */ var _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../providers/fal-ai.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fal-ai.js\");\n/* harmony import */ var _providers_featherless_ai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../providers/featherless-ai.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/featherless-ai.js\");\n/* harmony import */ var _providers_fireworks_ai_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../providers/fireworks-ai.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fireworks-ai.js\");\n/* harmony import */ var _providers_groq_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../providers/groq.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/groq.js\");\n/* harmony import */ var _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../providers/hf-inference.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hf-inference.js\");\n/* harmony import */ var _providers_hyperbolic_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../providers/hyperbolic.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hyperbolic.js\");\n/* harmony import */ var _providers_nebius_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../providers/nebius.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nebius.js\");\n/* harmony import */ var _providers_novita_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../providers/novita.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/novita.js\");\n/* harmony import */ var _providers_nscale_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../providers/nscale.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nscale.js\");\n/* harmony import */ var _providers_openai_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../providers/openai.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/openai.js\");\n/* harmony import */ var _providers_ovhcloud_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../providers/ovhcloud.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/ovhcloud.js\");\n/* harmony import */ var _providers_replicate_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../providers/replicate.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/replicate.js\");\n/* harmony import */ var _providers_sambanova_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../providers/sambanova.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/sambanova.js\");\n/* harmony import */ var _providers_scaleway_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../providers/scaleway.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/scaleway.js\");\n/* harmony import */ var _providers_together_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../providers/together.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/together.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst PROVIDERS = {\n    \"black-forest-labs\": {\n        \"text-to-image\": new _providers_black_forest_labs_js__WEBPACK_IMPORTED_MODULE_0__.BlackForestLabsTextToImageTask()\n    },\n    cerebras: {\n        conversational: new _providers_cerebras_js__WEBPACK_IMPORTED_MODULE_1__.CerebrasConversationalTask()\n    },\n    cohere: {\n        conversational: new _providers_cohere_js__WEBPACK_IMPORTED_MODULE_2__.CohereConversationalTask()\n    },\n    \"fal-ai\": {\n        \"text-to-image\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAITextToImageTask(),\n        \"text-to-speech\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAITextToSpeechTask(),\n        \"text-to-video\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAITextToVideoTask(),\n        \"image-to-image\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAIImageToImageTask(),\n        \"automatic-speech-recognition\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAIAutomaticSpeechRecognitionTask(),\n        \"image-segmentation\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAIImageSegmentationTask(),\n        \"image-to-video\": new _providers_fal_ai_js__WEBPACK_IMPORTED_MODULE_3__.FalAIImageToVideoTask()\n    },\n    \"featherless-ai\": {\n        conversational: new _providers_featherless_ai_js__WEBPACK_IMPORTED_MODULE_4__.FeatherlessAIConversationalTask(),\n        \"text-generation\": new _providers_featherless_ai_js__WEBPACK_IMPORTED_MODULE_4__.FeatherlessAITextGenerationTask()\n    },\n    \"hf-inference\": {\n        \"text-to-image\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTextToImageTask(),\n        conversational: new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceConversationalTask(),\n        \"text-generation\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTextGenerationTask(),\n        \"text-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTextClassificationTask(),\n        \"question-answering\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceQuestionAnsweringTask(),\n        \"audio-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceAudioClassificationTask(),\n        \"automatic-speech-recognition\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceAutomaticSpeechRecognitionTask(),\n        \"fill-mask\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceFillMaskTask(),\n        \"feature-extraction\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceFeatureExtractionTask(),\n        \"image-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceImageClassificationTask(),\n        \"image-segmentation\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceImageSegmentationTask(),\n        \"document-question-answering\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceDocumentQuestionAnsweringTask(),\n        \"image-to-text\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceImageToTextTask(),\n        \"object-detection\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceObjectDetectionTask(),\n        \"audio-to-audio\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceAudioToAudioTask(),\n        \"zero-shot-image-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceZeroShotImageClassificationTask(),\n        \"zero-shot-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceZeroShotClassificationTask(),\n        \"image-to-image\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceImageToImageTask(),\n        \"sentence-similarity\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceSentenceSimilarityTask(),\n        \"table-question-answering\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTableQuestionAnsweringTask(),\n        \"tabular-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTabularClassificationTask(),\n        \"text-to-speech\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTextToSpeechTask(),\n        \"token-classification\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTokenClassificationTask(),\n        translation: new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTranslationTask(),\n        summarization: new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceSummarizationTask(),\n        \"visual-question-answering\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceVisualQuestionAnsweringTask(),\n        \"tabular-regression\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTabularRegressionTask(),\n        \"text-to-audio\": new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTextToAudioTask()\n    },\n    \"fireworks-ai\": {\n        conversational: new _providers_fireworks_ai_js__WEBPACK_IMPORTED_MODULE_5__.FireworksConversationalTask()\n    },\n    groq: {\n        conversational: new _providers_groq_js__WEBPACK_IMPORTED_MODULE_6__.GroqConversationalTask(),\n        \"text-generation\": new _providers_groq_js__WEBPACK_IMPORTED_MODULE_6__.GroqTextGenerationTask()\n    },\n    hyperbolic: {\n        \"text-to-image\": new _providers_hyperbolic_js__WEBPACK_IMPORTED_MODULE_8__.HyperbolicTextToImageTask(),\n        conversational: new _providers_hyperbolic_js__WEBPACK_IMPORTED_MODULE_8__.HyperbolicConversationalTask(),\n        \"text-generation\": new _providers_hyperbolic_js__WEBPACK_IMPORTED_MODULE_8__.HyperbolicTextGenerationTask()\n    },\n    nebius: {\n        \"text-to-image\": new _providers_nebius_js__WEBPACK_IMPORTED_MODULE_9__.NebiusTextToImageTask(),\n        conversational: new _providers_nebius_js__WEBPACK_IMPORTED_MODULE_9__.NebiusConversationalTask(),\n        \"text-generation\": new _providers_nebius_js__WEBPACK_IMPORTED_MODULE_9__.NebiusTextGenerationTask(),\n        \"feature-extraction\": new _providers_nebius_js__WEBPACK_IMPORTED_MODULE_9__.NebiusFeatureExtractionTask()\n    },\n    novita: {\n        conversational: new _providers_novita_js__WEBPACK_IMPORTED_MODULE_10__.NovitaConversationalTask(),\n        \"text-generation\": new _providers_novita_js__WEBPACK_IMPORTED_MODULE_10__.NovitaTextGenerationTask(),\n        \"text-to-video\": new _providers_novita_js__WEBPACK_IMPORTED_MODULE_10__.NovitaTextToVideoTask()\n    },\n    nscale: {\n        \"text-to-image\": new _providers_nscale_js__WEBPACK_IMPORTED_MODULE_11__.NscaleTextToImageTask(),\n        conversational: new _providers_nscale_js__WEBPACK_IMPORTED_MODULE_11__.NscaleConversationalTask()\n    },\n    openai: {\n        conversational: new _providers_openai_js__WEBPACK_IMPORTED_MODULE_12__.OpenAIConversationalTask()\n    },\n    ovhcloud: {\n        conversational: new _providers_ovhcloud_js__WEBPACK_IMPORTED_MODULE_13__.OvhCloudConversationalTask(),\n        \"text-generation\": new _providers_ovhcloud_js__WEBPACK_IMPORTED_MODULE_13__.OvhCloudTextGenerationTask()\n    },\n    replicate: {\n        \"text-to-image\": new _providers_replicate_js__WEBPACK_IMPORTED_MODULE_14__.ReplicateTextToImageTask(),\n        \"text-to-speech\": new _providers_replicate_js__WEBPACK_IMPORTED_MODULE_14__.ReplicateTextToSpeechTask(),\n        \"text-to-video\": new _providers_replicate_js__WEBPACK_IMPORTED_MODULE_14__.ReplicateTextToVideoTask(),\n        \"image-to-image\": new _providers_replicate_js__WEBPACK_IMPORTED_MODULE_14__.ReplicateImageToImageTask()\n    },\n    sambanova: {\n        conversational: new _providers_sambanova_js__WEBPACK_IMPORTED_MODULE_15__.SambanovaConversationalTask(),\n        \"feature-extraction\": new _providers_sambanova_js__WEBPACK_IMPORTED_MODULE_15__.SambanovaFeatureExtractionTask()\n    },\n    scaleway: {\n        conversational: new _providers_scaleway_js__WEBPACK_IMPORTED_MODULE_16__.ScalewayConversationalTask(),\n        \"text-generation\": new _providers_scaleway_js__WEBPACK_IMPORTED_MODULE_16__.ScalewayTextGenerationTask(),\n        \"feature-extraction\": new _providers_scaleway_js__WEBPACK_IMPORTED_MODULE_16__.ScalewayFeatureExtractionTask()\n    },\n    together: {\n        \"text-to-image\": new _providers_together_js__WEBPACK_IMPORTED_MODULE_17__.TogetherTextToImageTask(),\n        conversational: new _providers_together_js__WEBPACK_IMPORTED_MODULE_17__.TogetherConversationalTask(),\n        \"text-generation\": new _providers_together_js__WEBPACK_IMPORTED_MODULE_17__.TogetherTextGenerationTask()\n    }\n};\nfunction getProviderHelper(provider, task) {\n    if (provider === \"hf-inference\" && !task || provider === \"auto\") {\n        return new _providers_hf_inference_js__WEBPACK_IMPORTED_MODULE_7__.HFInferenceTask();\n    }\n    if (!task) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_18__.InferenceClientInputError(\"you need to provide a task name when using an external provider, e.g. 'text-to-image'\");\n    }\n    if (!(provider in PROVIDERS)) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_18__.InferenceClientInputError(`Provider '${provider}' not supported. Available providers: ${Object.keys(PROVIDERS)}`);\n    }\n    const providerTasks = PROVIDERS[provider];\n    if (!providerTasks || !(task in providerTasks)) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_18__.InferenceClientInputError(`Task '${task}' not supported for provider '${provider}'. Available tasks: ${Object.keys(providerTasks ?? {})}`);\n    }\n    return providerTasks[task];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isUrl: () => (/* binding */ isUrl)\n/* harmony export */ });\nfunction isUrl(modelOrUrl) {\n    return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9saWIvaXNVcmwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLFVBQVU7SUFDNUIsT0FBTyxhQUFhQyxJQUFJLENBQUNELGVBQWVBLFdBQVdFLFVBQVUsQ0FBQztBQUNsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vbGliL2lzVXJsLmpzPzM3NjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVXJsKG1vZGVsT3JVcmwpIHtcbiAgICByZXR1cm4gL15odHRwKHM/KTovLnRlc3QobW9kZWxPclVybCkgfHwgbW9kZWxPclVybC5zdGFydHNXaXRoKFwiL1wiKTtcbn1cbiJdLCJuYW1lcyI6WyJpc1VybCIsIm1vZGVsT3JVcmwiLCJ0ZXN0Iiwic3RhcnRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/lib/logger.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   setLogger: () => (/* binding */ setLogger)\n/* harmony export */ });\nlet globalLogger = console;\nfunction setLogger(logger) {\n    globalLogger = logger;\n}\nfunction getLogger() {\n    return globalLogger;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9saWIvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsZUFBZUM7QUFDWixTQUFTQyxVQUFVQyxNQUFNO0lBQzVCSCxlQUFlRztBQUNuQjtBQUNPLFNBQVNDO0lBQ1osT0FBT0o7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vbGliL2xvZ2dlci5qcz80ZWIzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBnbG9iYWxMb2dnZXIgPSBjb25zb2xlO1xuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ2dlcihsb2dnZXIpIHtcbiAgICBnbG9iYWxMb2dnZXIgPSBsb2dnZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICAgIHJldHVybiBnbG9iYWxMb2dnZXI7XG59XG4iXSwibmFtZXMiOlsiZ2xvYmFsTG9nZ2VyIiwiY29uc29sZSIsInNldExvZ2dlciIsImxvZ2dlciIsImdldExvZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeRequestOptions: () => (/* binding */ makeRequestOptions),\n/* harmony export */   makeRequestOptionsFromResolvedModel: () => (/* binding */ makeRequestOptionsFromResolvedModel)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n/* harmony import */ var _package_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../package.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/package.js\");\n/* harmony import */ var _getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _isUrl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isUrl.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\n\n\n/**\n * Lazy-loaded from huggingface.co/api/tasks when needed\n * Used to determine the default model to use when it's not user defined\n */ let tasks = null;\n/**\n * Helper that prepares request arguments.\n * This async version handle the model ID resolution step.\n */ async function makeRequestOptions(args, providerHelper, options) {\n    const { model: maybeModel } = args;\n    const provider = providerHelper.provider;\n    const { task } = options ?? {};\n    // Validate inputs\n    if (args.endpointUrl && provider !== \"hf-inference\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Cannot use endpointUrl with a third-party provider.`);\n    }\n    if (maybeModel && (0,_isUrl_js__WEBPACK_IMPORTED_MODULE_3__.isUrl)(maybeModel)) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Model URLs are no longer supported. Use endpointUrl instead.`);\n    }\n    if (args.endpointUrl) {\n        // No need to have maybeModel, or to load default model for a task\n        return makeRequestOptionsFromResolvedModel(maybeModel ?? args.endpointUrl, providerHelper, args, undefined, options);\n    }\n    if (!maybeModel && !task) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(\"No model provided, and no task has been specified.\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const hfModel = maybeModel ?? await loadDefaultModel(task);\n    if (providerHelper.clientSideRoutingOnly && !maybeModel) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Provider ${provider} requires a model ID to be passed directly.`);\n    }\n    const inferenceProviderMapping = providerHelper.clientSideRoutingOnly ? {\n        provider: provider,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        providerId: removeProviderPrefix(maybeModel, provider),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hfModelId: maybeModel,\n        status: \"live\",\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        task: task\n    } : await (0,_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_2__.getInferenceProviderMapping)({\n        modelId: hfModel,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        task: task,\n        provider,\n        accessToken: args.accessToken\n    }, {\n        fetch: options?.fetch\n    });\n    if (!inferenceProviderMapping) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`We have not been able to find inference provider information for model ${hfModel}.`);\n    }\n    // Use the sync version with the resolved model\n    return makeRequestOptionsFromResolvedModel(inferenceProviderMapping.providerId, providerHelper, args, inferenceProviderMapping, options);\n}\n/**\n * Helper that prepares request arguments. - for internal use only\n * This sync version skips the model ID resolution step\n */ function makeRequestOptionsFromResolvedModel(resolvedModel, providerHelper, args, mapping, options) {\n    const { accessToken, endpointUrl, provider: maybeProvider, model, ...remainingArgs } = args;\n    void model;\n    void maybeProvider;\n    const provider = providerHelper.provider;\n    const { includeCredentials, task, signal, billTo } = options ?? {};\n    const authMethod = (()=>{\n        if (providerHelper.clientSideRoutingOnly) {\n            // Closed-source providers require an accessToken (cannot be routed).\n            if (accessToken && accessToken.startsWith(\"hf_\")) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Provider ${provider} is closed-source and does not support HF tokens.`);\n            }\n        }\n        if (accessToken) {\n            return accessToken.startsWith(\"hf_\") ? \"hf-token\" : \"provider-key\";\n        }\n        if (includeCredentials === \"include\") {\n            // If accessToken is passed, it should take precedence over includeCredentials\n            return \"credentials-include\";\n        }\n        return \"none\";\n    })();\n    // Make URL\n    const modelId = endpointUrl ?? resolvedModel;\n    const url = providerHelper.makeUrl({\n        authMethod,\n        model: modelId,\n        task\n    });\n    // Make headers\n    const headers = providerHelper.prepareHeaders({\n        accessToken,\n        authMethod\n    }, \"data\" in args && !!args.data);\n    if (billTo) {\n        headers[_config_js__WEBPACK_IMPORTED_MODULE_0__.HF_HEADER_X_BILL_TO] = billTo;\n    }\n    // Add user-agent to headers\n    // e.g. @huggingface/inference/3.1.3\n    const ownUserAgent = `${_package_js__WEBPACK_IMPORTED_MODULE_1__.PACKAGE_NAME}/${_package_js__WEBPACK_IMPORTED_MODULE_1__.PACKAGE_VERSION}`;\n    const userAgent = [\n        ownUserAgent,\n        typeof navigator !== \"undefined\" ? navigator.userAgent : undefined\n    ].filter((x)=>x !== undefined).join(\" \");\n    headers[\"User-Agent\"] = userAgent;\n    // Make body\n    const body = providerHelper.makeBody({\n        args: remainingArgs,\n        model: resolvedModel,\n        task,\n        mapping\n    });\n    /**\n     * For edge runtimes, leave 'credentials' undefined, otherwise cloudflare workers will error\n     */ let credentials;\n    if (typeof includeCredentials === \"string\") {\n        credentials = includeCredentials;\n    } else if (includeCredentials === true) {\n        credentials = \"include\";\n    }\n    const info = {\n        headers,\n        method: \"POST\",\n        body: body,\n        ...credentials ? {\n            credentials\n        } : undefined,\n        signal\n    };\n    return {\n        url,\n        info\n    };\n}\nasync function loadDefaultModel(task) {\n    if (!tasks) {\n        tasks = await loadTaskInfo();\n    }\n    const taskInfo = tasks[task];\n    if ((taskInfo?.models.length ?? 0) <= 0) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`No default model defined for task ${task}, please define the model explicitly.`);\n    }\n    return taskInfo.models[0].id;\n}\nasync function loadTaskInfo() {\n    const url = `${_config_js__WEBPACK_IMPORTED_MODULE_0__.HF_HUB_URL}/api/tasks`;\n    const res = await fetch(url);\n    if (!res.ok) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientHubApiError(\"Failed to load tasks definitions from Hugging Face Hub.\", {\n            url,\n            method: \"GET\"\n        }, {\n            requestId: res.headers.get(\"x-request-id\") ?? \"\",\n            status: res.status,\n            body: await res.text()\n        });\n    }\n    return await res.json();\n}\nfunction removeProviderPrefix(model, provider) {\n    if (!model.startsWith(`${provider}/`)) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(`Models from ${provider} must be prefixed by \"${provider}/\". Got \"${model}\".`);\n    }\n    return model.slice(provider.length + 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/package.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/package.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PACKAGE_NAME: () => (/* binding */ PACKAGE_NAME),\n/* harmony export */   PACKAGE_VERSION: () => (/* binding */ PACKAGE_VERSION)\n/* harmony export */ });\n// Generated file from package.json. Issues importing JSON directly when publishing on commonjs/ESM - see https://github.com/microsoft/TypeScript/issues/51783\nconst PACKAGE_VERSION = \"4.7.1\";\nconst PACKAGE_NAME = \"@huggingface/inference\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wYWNrYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOEpBQThKO0FBQ3ZKLE1BQU1BLGtCQUFrQixRQUFRO0FBQ2hDLE1BQU1DLGVBQWUseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wYWNrYWdlLmpzP2JhNjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGZpbGUgZnJvbSBwYWNrYWdlLmpzb24uIElzc3VlcyBpbXBvcnRpbmcgSlNPTiBkaXJlY3RseSB3aGVuIHB1Ymxpc2hpbmcgb24gY29tbW9uanMvRVNNIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTE3ODNcbmV4cG9ydCBjb25zdCBQQUNLQUdFX1ZFUlNJT04gPSBcIjQuNy4xXCI7XG5leHBvcnQgY29uc3QgUEFDS0FHRV9OQU1FID0gXCJAaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlXCI7XG4iXSwibmFtZXMiOlsiUEFDS0FHRV9WRVJTSU9OIiwiUEFDS0FHRV9OQU1FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/package.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/black-forest-labs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/black-forest-labs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlackForestLabsTextToImageTask: () => (/* binding */ BlackForestLabsTextToImageTask)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _lib_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n/* harmony import */ var _utils_delay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/delay.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/delay.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/**\n * See the registered mapping of HF model ID => Black Forest Labs model ID here:\n *\n * https://huggingface.co/api/partners/blackforestlabs/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Black Forest Labs and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Black Forest Labs, please open an issue on the present repo\n * and we will tag Black Forest Labs team members.\n *\n * Thanks!\n */ \n\n\n\n\nconst BLACK_FOREST_LABS_AI_API_BASE_URL = \"https://api.us1.bfl.ai\";\nclass BlackForestLabsTextToImageTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_4__.TaskProviderHelper {\n    constructor(){\n        super(\"black-forest-labs\", BLACK_FOREST_LABS_AI_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            prompt: params.args.inputs\n        };\n    }\n    prepareHeaders(params, binary) {\n        const headers = {\n            Authorization: params.authMethod !== \"provider-key\" ? `Bearer ${params.accessToken}` : `X-Key ${params.accessToken}`\n        };\n        if (!binary) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n        return headers;\n    }\n    makeRoute(params) {\n        if (!params) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientInputError(\"Params are required\");\n        }\n        return `/v1/${params.model}`;\n    }\n    async getResponse(response, url, headers, outputType) {\n        const logger = (0,_lib_logger_js__WEBPACK_IMPORTED_MODULE_1__.getLogger)();\n        const urlObj = new URL(response.polling_url);\n        for(let step = 0; step < 5; step++){\n            await (0,_utils_delay_js__WEBPACK_IMPORTED_MODULE_2__.delay)(1000);\n            logger.debug(`Polling Black Forest Labs API for the result... ${step + 1}/5`);\n            urlObj.searchParams.set(\"attempt\", step.toString(10));\n            const resp = await fetch(urlObj, {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!resp.ok) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderApiError(\"Failed to fetch result from black forest labs API\", {\n                    url: urlObj.toString(),\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                }, {\n                    requestId: resp.headers.get(\"x-request-id\") ?? \"\",\n                    status: resp.status,\n                    body: await resp.text()\n                });\n            }\n            const payload = await resp.json();\n            if (typeof payload === \"object\" && payload && \"status\" in payload && typeof payload.status === \"string\" && payload.status === \"Ready\" && \"result\" in payload && typeof payload.result === \"object\" && payload.result && \"sample\" in payload.result && typeof payload.result.sample === \"string\") {\n                if (outputType === \"json\") {\n                    return payload.result;\n                }\n                if (outputType === \"url\") {\n                    return payload.result.sample;\n                }\n                const image = await fetch(payload.result.sample);\n                return await image.blob();\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(`Timed out while waiting for the result from black forest labs API - aborting after 5 attempts`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/black-forest-labs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cerebras.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/cerebras.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CerebrasConversationalTask: () => (/* binding */ CerebrasConversationalTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/**\n * See the registered mapping of HF model ID => Cerebras model ID here:\n *\n * https://huggingface.co/api/partners/cerebras/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Cerebras and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Cerebras, please open an issue on the present repo\n * and we will tag Cerebras team members.\n *\n * Thanks!\n */ \nclass CerebrasConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"cerebras\", \"https://api.cerebras.ai\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvY2VyZWJyYXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDNEQ7QUFDdEQsTUFBTUMsbUNBQW1DRCxzRUFBc0JBO0lBQ2xFRSxhQUFjO1FBQ1YsS0FBSyxDQUFDLFlBQVk7SUFDdEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL2NlcmVicmFzLmpzPzQ0OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZWUgdGhlIHJlZ2lzdGVyZWQgbWFwcGluZyBvZiBIRiBtb2RlbCBJRCA9PiBDZXJlYnJhcyBtb2RlbCBJRCBoZXJlOlxuICpcbiAqIGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vYXBpL3BhcnRuZXJzL2NlcmVicmFzL21vZGVsc1xuICpcbiAqIFRoaXMgaXMgYSBwdWJsaWNseSBhdmFpbGFibGUgbWFwcGluZy5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB0cnkgdG8gcnVuIGluZmVyZW5jZSBmb3IgYSBuZXcgbW9kZWwgbG9jYWxseSBiZWZvcmUgaXQncyByZWdpc3RlcmVkIG9uIGh1Z2dpbmdmYWNlLmNvLFxuICogeW91IGNhbiBhZGQgaXQgdG8gdGhlIGRpY3Rpb25hcnkgXCJIQVJEQ09ERURfTU9ERUxfSURfTUFQUElOR1wiIGluIGNvbnN0cy50cywgZm9yIGRldiBwdXJwb3Nlcy5cbiAqXG4gKiAtIElmIHlvdSB3b3JrIGF0IENlcmVicmFzIGFuZCB3YW50IHRvIHVwZGF0ZSB0aGlzIG1hcHBpbmcsIHBsZWFzZSB1c2UgdGhlIG1vZGVsIG1hcHBpbmcgQVBJIHdlIHByb3ZpZGUgb24gaHVnZ2luZ2ZhY2UuY29cbiAqIC0gSWYgeW91J3JlIGEgY29tbXVuaXR5IG1lbWJlciBhbmQgd2FudCB0byBhZGQgYSBuZXcgc3VwcG9ydGVkIEhGIG1vZGVsIHRvIENlcmVicmFzLCBwbGVhc2Ugb3BlbiBhbiBpc3N1ZSBvbiB0aGUgcHJlc2VudCByZXBvXG4gKiBhbmQgd2Ugd2lsbCB0YWcgQ2VyZWJyYXMgdGVhbSBtZW1iZXJzLlxuICpcbiAqIFRoYW5rcyFcbiAqL1xuaW1wb3J0IHsgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB9IGZyb20gXCIuL3Byb3ZpZGVySGVscGVyLmpzXCI7XG5leHBvcnQgY2xhc3MgQ2VyZWJyYXNDb252ZXJzYXRpb25hbFRhc2sgZXh0ZW5kcyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJjZXJlYnJhc1wiLCBcImh0dHBzOi8vYXBpLmNlcmVicmFzLmFpXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlQ29udmVyc2F0aW9uYWxUYXNrIiwiQ2VyZWJyYXNDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cerebras.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cohere.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/cohere.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CohereConversationalTask: () => (/* binding */ CohereConversationalTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/**\n * See the registered mapping of HF model ID => Cohere model ID here:\n *\n * https://huggingface.co/api/partners/cohere/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Cohere and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Cohere, please open an issue on the present repo\n * and we will tag Cohere team members.\n *\n * Thanks!\n */ \nclass CohereConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"cohere\", \"https://api.cohere.com\");\n    }\n    makeRoute() {\n        return \"/compatibility/v1/chat/completions\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvY29oZXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQzREO0FBQ3RELE1BQU1DLGlDQUFpQ0Qsc0VBQXNCQTtJQUNoRUUsYUFBYztRQUNWLEtBQUssQ0FBQyxVQUFVO0lBQ3BCO0lBQ0FDLFlBQVk7UUFDUixPQUFPO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL2NvaGVyZS5qcz80NGY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2VlIHRoZSByZWdpc3RlcmVkIG1hcHBpbmcgb2YgSEYgbW9kZWwgSUQgPT4gQ29oZXJlIG1vZGVsIElEIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9hcGkvcGFydG5lcnMvY29oZXJlL21vZGVsc1xuICpcbiAqIFRoaXMgaXMgYSBwdWJsaWNseSBhdmFpbGFibGUgbWFwcGluZy5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB0cnkgdG8gcnVuIGluZmVyZW5jZSBmb3IgYSBuZXcgbW9kZWwgbG9jYWxseSBiZWZvcmUgaXQncyByZWdpc3RlcmVkIG9uIGh1Z2dpbmdmYWNlLmNvLFxuICogeW91IGNhbiBhZGQgaXQgdG8gdGhlIGRpY3Rpb25hcnkgXCJIQVJEQ09ERURfTU9ERUxfSURfTUFQUElOR1wiIGluIGNvbnN0cy50cywgZm9yIGRldiBwdXJwb3Nlcy5cbiAqXG4gKiAtIElmIHlvdSB3b3JrIGF0IENvaGVyZSBhbmQgd2FudCB0byB1cGRhdGUgdGhpcyBtYXBwaW5nLCBwbGVhc2UgdXNlIHRoZSBtb2RlbCBtYXBwaW5nIEFQSSB3ZSBwcm92aWRlIG9uIGh1Z2dpbmdmYWNlLmNvXG4gKiAtIElmIHlvdSdyZSBhIGNvbW11bml0eSBtZW1iZXIgYW5kIHdhbnQgdG8gYWRkIGEgbmV3IHN1cHBvcnRlZCBIRiBtb2RlbCB0byBDb2hlcmUsIHBsZWFzZSBvcGVuIGFuIGlzc3VlIG9uIHRoZSBwcmVzZW50IHJlcG9cbiAqIGFuZCB3ZSB3aWxsIHRhZyBDb2hlcmUgdGVhbSBtZW1iZXJzLlxuICpcbiAqIFRoYW5rcyFcbiAqL1xuaW1wb3J0IHsgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB9IGZyb20gXCIuL3Byb3ZpZGVySGVscGVyLmpzXCI7XG5leHBvcnQgY2xhc3MgQ29oZXJlQ29udmVyc2F0aW9uYWxUYXNrIGV4dGVuZHMgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiY29oZXJlXCIsIFwiaHR0cHM6Ly9hcGkuY29oZXJlLmNvbVwiKTtcbiAgICB9XG4gICAgbWFrZVJvdXRlKCkge1xuICAgICAgICByZXR1cm4gXCIvY29tcGF0aWJpbGl0eS92MS9jaGF0L2NvbXBsZXRpb25zXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXJzYXRpb25hbFRhc2siLCJDb2hlcmVDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsIm1ha2VSb3V0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/cohere.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/consts.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/consts.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HARDCODED_MODEL_INFERENCE_MAPPING: () => (/* binding */ HARDCODED_MODEL_INFERENCE_MAPPING)\n/* harmony export */ });\n/**\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co\n * for a given Inference Provider,\n * you can add it to the following dictionary, for dev purposes.\n *\n * We also inject into this dictionary from tests.\n */ const HARDCODED_MODEL_INFERENCE_MAPPING = {\n    /**\n     * \"HF model ID\" => \"Model ID on Inference Provider's side\"\n     *\n     * Example:\n     * \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen2.5-Coder-32B-Instruct\",\n     */ \"black-forest-labs\": {},\n    cerebras: {},\n    cohere: {},\n    \"fal-ai\": {},\n    \"featherless-ai\": {},\n    \"fireworks-ai\": {},\n    groq: {},\n    \"hf-inference\": {},\n    hyperbolic: {},\n    nebius: {},\n    novita: {},\n    nscale: {},\n    openai: {},\n    ovhcloud: {},\n    replicate: {},\n    sambanova: {},\n    scaleway: {},\n    together: {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvY29uc3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDTSxNQUFNQSxvQ0FBb0M7SUFDN0M7Ozs7O0tBS0MsR0FDRCxxQkFBcUIsQ0FBQztJQUN0QkMsVUFBVSxDQUFDO0lBQ1hDLFFBQVEsQ0FBQztJQUNULFVBQVUsQ0FBQztJQUNYLGtCQUFrQixDQUFDO0lBQ25CLGdCQUFnQixDQUFDO0lBQ2pCQyxNQUFNLENBQUM7SUFDUCxnQkFBZ0IsQ0FBQztJQUNqQkMsWUFBWSxDQUFDO0lBQ2JDLFFBQVEsQ0FBQztJQUNUQyxRQUFRLENBQUM7SUFDVEMsUUFBUSxDQUFDO0lBQ1RDLFFBQVEsQ0FBQztJQUNUQyxVQUFVLENBQUM7SUFDWEMsV0FBVyxDQUFDO0lBQ1pDLFdBQVcsQ0FBQztJQUNaQyxVQUFVLENBQUM7SUFDWEMsVUFBVSxDQUFDO0FBQ2YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL2NvbnN0cy5qcz80MGFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSWYgeW91IHdhbnQgdG8gdHJ5IHRvIHJ1biBpbmZlcmVuY2UgZm9yIGEgbmV3IG1vZGVsIGxvY2FsbHkgYmVmb3JlIGl0J3MgcmVnaXN0ZXJlZCBvbiBodWdnaW5nZmFjZS5jb1xuICogZm9yIGEgZ2l2ZW4gSW5mZXJlbmNlIFByb3ZpZGVyLFxuICogeW91IGNhbiBhZGQgaXQgdG8gdGhlIGZvbGxvd2luZyBkaWN0aW9uYXJ5LCBmb3IgZGV2IHB1cnBvc2VzLlxuICpcbiAqIFdlIGFsc28gaW5qZWN0IGludG8gdGhpcyBkaWN0aW9uYXJ5IGZyb20gdGVzdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBIQVJEQ09ERURfTU9ERUxfSU5GRVJFTkNFX01BUFBJTkcgPSB7XG4gICAgLyoqXG4gICAgICogXCJIRiBtb2RlbCBJRFwiID0+IFwiTW9kZWwgSUQgb24gSW5mZXJlbmNlIFByb3ZpZGVyJ3Mgc2lkZVwiXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIFwiUXdlbi9Rd2VuMi41LUNvZGVyLTMyQi1JbnN0cnVjdFwiOiBcIlF3ZW4yLjUtQ29kZXItMzJCLUluc3RydWN0XCIsXG4gICAgICovXG4gICAgXCJibGFjay1mb3Jlc3QtbGFic1wiOiB7fSxcbiAgICBjZXJlYnJhczoge30sXG4gICAgY29oZXJlOiB7fSxcbiAgICBcImZhbC1haVwiOiB7fSxcbiAgICBcImZlYXRoZXJsZXNzLWFpXCI6IHt9LFxuICAgIFwiZmlyZXdvcmtzLWFpXCI6IHt9LFxuICAgIGdyb3E6IHt9LFxuICAgIFwiaGYtaW5mZXJlbmNlXCI6IHt9LFxuICAgIGh5cGVyYm9saWM6IHt9LFxuICAgIG5lYml1czoge30sXG4gICAgbm92aXRhOiB7fSxcbiAgICBuc2NhbGU6IHt9LFxuICAgIG9wZW5haToge30sXG4gICAgb3ZoY2xvdWQ6IHt9LFxuICAgIHJlcGxpY2F0ZToge30sXG4gICAgc2FtYmFub3ZhOiB7fSxcbiAgICBzY2FsZXdheToge30sXG4gICAgdG9nZXRoZXI6IHt9LFxufTtcbiJdLCJuYW1lcyI6WyJIQVJEQ09ERURfTU9ERUxfSU5GRVJFTkNFX01BUFBJTkciLCJjZXJlYnJhcyIsImNvaGVyZSIsImdyb3EiLCJoeXBlcmJvbGljIiwibmViaXVzIiwibm92aXRhIiwibnNjYWxlIiwib3BlbmFpIiwib3ZoY2xvdWQiLCJyZXBsaWNhdGUiLCJzYW1iYW5vdmEiLCJzY2FsZXdheSIsInRvZ2V0aGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fal-ai.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/fal-ai.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FAL_AI_SUPPORTED_BLOB_TYPES: () => (/* binding */ FAL_AI_SUPPORTED_BLOB_TYPES),\n/* harmony export */   FalAIAutomaticSpeechRecognitionTask: () => (/* binding */ FalAIAutomaticSpeechRecognitionTask),\n/* harmony export */   FalAIImageSegmentationTask: () => (/* binding */ FalAIImageSegmentationTask),\n/* harmony export */   FalAIImageToImageTask: () => (/* binding */ FalAIImageToImageTask),\n/* harmony export */   FalAIImageToVideoTask: () => (/* binding */ FalAIImageToVideoTask),\n/* harmony export */   FalAITextToImageTask: () => (/* binding */ FalAITextToImageTask),\n/* harmony export */   FalAITextToSpeechTask: () => (/* binding */ FalAITextToSpeechTask),\n/* harmony export */   FalAITextToVideoTask: () => (/* binding */ FalAITextToVideoTask)\n/* harmony export */ });\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/* harmony import */ var _lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/isUrl.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js\");\n/* harmony import */ var _utils_delay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/delay.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/delay.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/**\n * See the registered mapping of HF model ID => Fal model ID here:\n *\n * https://huggingface.co/api/partners/fal-ai/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Fal and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Fal, please open an issue on the present repo\n * and we will tag Fal team members.\n *\n * Thanks!\n */ \n\n\n\n\n\n\nconst FAL_AI_SUPPORTED_BLOB_TYPES = [\n    \"audio/mpeg\",\n    \"audio/mp4\",\n    \"audio/wav\",\n    \"audio/x-wav\"\n];\nclass FalAITask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_4__.TaskProviderHelper {\n    constructor(url){\n        super(\"fal-ai\", url || \"https://fal.run\");\n    }\n    preparePayload(params) {\n        return params.args;\n    }\n    makeRoute(params) {\n        return `/${params.model}`;\n    }\n    prepareHeaders(params, binary) {\n        const headers = {\n            Authorization: params.authMethod !== \"provider-key\" ? `Bearer ${params.accessToken}` : `Key ${params.accessToken}`\n        };\n        if (!binary) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n        return headers;\n    }\n}\nclass FalAiQueueTask extends FalAITask {\n    async getResponseFromQueueApi(response, url, headers) {\n        if (!url || !headers) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientInputError(`URL and headers are required for ${this.task} task`);\n        }\n        const requestId = response.request_id;\n        if (!requestId) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai ${this.task} API: no request ID found in the response`);\n        }\n        let status = response.status;\n        const parsedUrl = new URL(url);\n        const baseUrl = `${parsedUrl.protocol}//${parsedUrl.host}${parsedUrl.host === \"router.huggingface.co\" ? \"/fal-ai\" : \"\"}`;\n        // extracting the provider model id for status and result urls\n        // from the response as it might be different from the mapped model in `url`\n        const modelId = new URL(response.response_url).pathname;\n        const queryParams = parsedUrl.search;\n        const statusUrl = `${baseUrl}${modelId}/status${queryParams}`;\n        const resultUrl = `${baseUrl}${modelId}${queryParams}`;\n        while(status !== \"COMPLETED\"){\n            await (0,_utils_delay_js__WEBPACK_IMPORTED_MODULE_2__.delay)(500);\n            const statusResponse = await fetch(statusUrl, {\n                headers\n            });\n            if (!statusResponse.ok) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderApiError(\"Failed to fetch response status from fal-ai API\", {\n                    url: statusUrl,\n                    method: \"GET\"\n                }, {\n                    requestId: statusResponse.headers.get(\"x-request-id\") ?? \"\",\n                    status: statusResponse.status,\n                    body: await statusResponse.text()\n                });\n            }\n            try {\n                status = (await statusResponse.json()).status;\n            } catch (error) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(\"Failed to parse status response from fal-ai API: received malformed response\");\n            }\n        }\n        const resultResponse = await fetch(resultUrl, {\n            headers\n        });\n        let result;\n        try {\n            result = await resultResponse.json();\n        } catch (error) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(\"Failed to parse result response from fal-ai API: received malformed response\");\n        }\n        return result;\n    }\n}\nfunction buildLoraPath(modelId, adapterWeightsPath) {\n    return `${_config_js__WEBPACK_IMPORTED_MODULE_5__.HF_HUB_URL}/${modelId}/resolve/main/${adapterWeightsPath}`;\n}\nclass FalAITextToImageTask extends FalAITask {\n    preparePayload(params) {\n        const payload = {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            sync_mode: true,\n            prompt: params.args.inputs\n        };\n        if (params.mapping?.adapter === \"lora\" && params.mapping.adapterWeightsPath) {\n            payload.loras = [\n                {\n                    path: buildLoraPath(params.mapping.hfModelId, params.mapping.adapterWeightsPath),\n                    scale: 1\n                }\n            ];\n            if (params.mapping.providerId === \"fal-ai/lora\") {\n                payload.model_name = \"stabilityai/stable-diffusion-xl-base-1.0\";\n            }\n        }\n        return payload;\n    }\n    async getResponse(response, url, headers, outputType) {\n        if (typeof response === \"object\" && \"images\" in response && Array.isArray(response.images) && response.images.length > 0 && \"url\" in response.images[0] && typeof response.images[0].url === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            if (outputType === \"url\") {\n                return response.images[0].url;\n            }\n            const urlResponse = await fetch(response.images[0].url);\n            return await urlResponse.blob();\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(\"Received malformed response from Fal.ai text-to-image API\");\n    }\n}\nclass FalAIImageToImageTask extends FalAiQueueTask {\n    constructor(){\n        super(\"https://queue.fal.run\");\n        this.task = \"image-to-image\";\n    }\n    makeRoute(params) {\n        if (params.authMethod !== \"provider-key\") {\n            return `/${params.model}?_subdomain=queue`;\n        }\n        return `/${params.model}`;\n    }\n    preparePayload(params) {\n        const payload = params.args;\n        if (params.mapping?.adapter === \"lora\" && params.mapping.adapterWeightsPath) {\n            payload.loras = [\n                {\n                    path: buildLoraPath(params.mapping.hfModelId, params.mapping.adapterWeightsPath),\n                    scale: 1\n                }\n            ];\n        }\n        return payload;\n    }\n    async preparePayloadAsync(args) {\n        const mimeType = args.inputs instanceof Blob ? args.inputs.type : \"image/png\";\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            image_url: `data:${mimeType};base64,${(0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__.base64FromBytes)(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))}`,\n            ...args.parameters,\n            ...args\n        };\n    }\n    async getResponse(response, url, headers) {\n        const result = await this.getResponseFromQueueApi(response, url, headers);\n        if (typeof result === \"object\" && !!result && \"images\" in result && Array.isArray(result.images) && result.images.length > 0 && typeof result.images[0] === \"object\" && !!result.images[0] && \"url\" in result.images[0] && typeof result.images[0].url === \"string\" && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(result.images[0].url)) {\n            const urlResponse = await fetch(result.images[0].url);\n            return await urlResponse.blob();\n        } else {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai image-to-image API: expected { images: Array<{ url: string }> } result format, got instead: ${JSON.stringify(result)}`);\n        }\n    }\n}\nclass FalAITextToVideoTask extends FalAiQueueTask {\n    constructor(){\n        super(\"https://queue.fal.run\");\n        this.task = \"text-to-video\";\n    }\n    makeRoute(params) {\n        if (params.authMethod !== \"provider-key\") {\n            return `/${params.model}?_subdomain=queue`;\n        }\n        return `/${params.model}`;\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response, url, headers) {\n        const result = await this.getResponseFromQueueApi(response, url, headers);\n        if (typeof result === \"object\" && !!result && \"video\" in result && typeof result.video === \"object\" && !!result.video && \"url\" in result.video && typeof result.video.url === \"string\" && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(result.video.url)) {\n            const urlResponse = await fetch(result.video.url);\n            return await urlResponse.blob();\n        } else {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai text-to-video API: expected { video: { url: string } } result format, got instead: ${JSON.stringify(result)}`);\n        }\n    }\n}\nclass FalAIImageToVideoTask extends FalAiQueueTask {\n    constructor(){\n        super(\"https://queue.fal.run\");\n        this.task = \"image-to-video\";\n    }\n    /** Same queue routing rule as the other Fal queue tasks */ makeRoute(params) {\n        return params.authMethod !== \"provider-key\" ? `/${params.model}?_subdomain=queue` : `/${params.model}`;\n    }\n    /** Synchronous case – caller already gave us base64 or a URL */ preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            // args.inputs is expected to be a base64 data URI or an URL\n            image_url: params.args.image_url\n        };\n    }\n    /** Asynchronous helper – caller gave us a Blob */ async preparePayloadAsync(args) {\n        const mimeType = args.inputs instanceof Blob ? args.inputs.type : \"image/png\";\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            image_url: `data:${mimeType};base64,${(0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__.base64FromBytes)(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))}`,\n            ...args.parameters,\n            ...args\n        };\n    }\n    /** Queue polling + final download – mirrors Text‑to‑Video */ async getResponse(response, url, headers) {\n        const result = await this.getResponseFromQueueApi(response, url, headers);\n        if (typeof result === \"object\" && result !== null && \"video\" in result && typeof result.video === \"object\" && result.video !== null && \"url\" in result.video && typeof result.video.url === \"string\" && \"url\" in result.video && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(result.video.url)) {\n            const urlResponse = await fetch(result.video.url);\n            return await urlResponse.blob();\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai image‑to‑video API: expected { video: { url: string } }, got: ${JSON.stringify(result)}`);\n    }\n}\nclass FalAIAutomaticSpeechRecognitionTask extends FalAITask {\n    prepareHeaders(params, binary) {\n        const headers = super.prepareHeaders(params, binary);\n        headers[\"Content-Type\"] = \"application/json\";\n        return headers;\n    }\n    async getResponse(response) {\n        const res = response;\n        if (typeof res?.text !== \"string\") {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai Automatic Speech Recognition API: expected { text: string } format, got instead: ${JSON.stringify(response)}`);\n        }\n        return {\n            text: res.text\n        };\n    }\n    async preparePayloadAsync(args) {\n        const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : undefined;\n        const contentType = blob?.type;\n        if (!contentType) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientInputError(`Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`);\n        }\n        if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientInputError(`Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(\", \")}`);\n        }\n        const base64audio = (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__.base64FromBytes)(new Uint8Array(await blob.arrayBuffer()));\n        return {\n            ...\"data\" in args ? (0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(args, \"data\") : (0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(args, \"inputs\"),\n            audio_url: `data:${contentType};base64,${base64audio}`\n        };\n    }\n}\nclass FalAITextToSpeechTask extends FalAITask {\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            text: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        const res = response;\n        if (typeof res?.audio?.url !== \"string\") {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai Text-to-Speech API: expected { audio: { url: string } } format, got instead: ${JSON.stringify(response)}`);\n        }\n        const urlResponse = await fetch(res.audio.url);\n        if (!urlResponse.ok) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderApiError(`Failed to fetch audio from ${res.audio.url}: ${urlResponse.statusText}`, {\n                url: res.audio.url,\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }, {\n                requestId: urlResponse.headers.get(\"x-request-id\") ?? \"\",\n                status: urlResponse.status,\n                body: await urlResponse.text()\n            });\n        }\n        try {\n            return await urlResponse.blob();\n        } catch (error) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderApiError(`Failed to fetch audio from ${res.audio.url}: ${error instanceof Error ? error.message : String(error)}`, {\n                url: res.audio.url,\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }, {\n                requestId: urlResponse.headers.get(\"x-request-id\") ?? \"\",\n                status: urlResponse.status,\n                body: await urlResponse.text()\n            });\n        }\n    }\n}\nclass FalAIImageSegmentationTask extends FalAiQueueTask {\n    constructor(){\n        super(\"https://queue.fal.run\");\n        this.task = \"image-segmentation\";\n    }\n    makeRoute(params) {\n        if (params.authMethod !== \"provider-key\") {\n            return `/${params.model}?_subdomain=queue`;\n        }\n        return `/${params.model}`;\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            sync_mode: true\n        };\n    }\n    async preparePayloadAsync(args) {\n        const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : undefined;\n        const mimeType = blob instanceof Blob ? blob.type : \"image/png\";\n        const base64Image = (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__.base64FromBytes)(new Uint8Array(blob instanceof ArrayBuffer ? blob : await blob.arrayBuffer()));\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_3__.omit)(args, [\n                \"inputs\",\n                \"parameters\",\n                \"data\"\n            ]),\n            ...args.parameters,\n            ...args,\n            image_url: `data:${mimeType};base64,${base64Image}`,\n            sync_mode: true\n        };\n    }\n    async getResponse(response, url, headers) {\n        const result = await this.getResponseFromQueueApi(response, url, headers);\n        if (typeof result === \"object\" && result !== null && \"image\" in result && typeof result.image === \"object\" && result.image !== null && \"url\" in result.image && typeof result.image.url === \"string\") {\n            const maskResponse = await fetch(result.image.url);\n            if (!maskResponse.ok) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderApiError(`Failed to fetch segmentation mask from ${result.image.url}`, {\n                    url: result.image.url,\n                    method: \"GET\"\n                }, {\n                    requestId: maskResponse.headers.get(\"x-request-id\") ?? \"\",\n                    status: maskResponse.status,\n                    body: await maskResponse.text()\n                });\n            }\n            const maskBlob = await maskResponse.blob();\n            const maskArrayBuffer = await maskBlob.arrayBuffer();\n            const maskBase64 = (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_0__.base64FromBytes)(new Uint8Array(maskArrayBuffer));\n            return [\n                {\n                    label: \"mask\",\n                    score: 1.0,\n                    mask: maskBase64\n                }\n            ];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_6__.InferenceClientProviderOutputError(`Received malformed response from Fal.ai image-segmentation API: expected { image: { url: string } } format, got instead: ${JSON.stringify(response)}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fal-ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/featherless-ai.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/featherless-ai.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeatherlessAIConversationalTask: () => (/* binding */ FeatherlessAIConversationalTask),\n/* harmony export */   FeatherlessAITextGenerationTask: () => (/* binding */ FeatherlessAITextGenerationTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nconst FEATHERLESS_API_BASE_URL = \"https://api.featherless.ai\";\nclass FeatherlessAIConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"featherless-ai\", FEATHERLESS_API_BASE_URL);\n    }\n}\nclass FeatherlessAITextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseTextGenerationTask {\n    constructor(){\n        super(\"featherless-ai\", FEATHERLESS_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            model: params.model,\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_1__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters ? {\n                max_tokens: params.args.parameters.max_new_tokens,\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_1__.omit)(params.args.parameters, \"max_new_tokens\")\n            } : undefined,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"choices\" in response && Array.isArray(response?.choices) && typeof response?.model === \"string\") {\n            const completion = response.choices[0];\n            return {\n                generated_text: completion.text\n            };\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Featherless AI text generation API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvZmVhdGhlcmxlc3MtYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUY7QUFDN0M7QUFDMEI7QUFDbEUsTUFBTUksMkJBQTJCO0FBQzFCLE1BQU1DLHdDQUF3Q0wsc0VBQXNCQTtJQUN2RU0sYUFBYztRQUNWLEtBQUssQ0FBQyxrQkFBa0JGO0lBQzVCO0FBQ0o7QUFDTyxNQUFNRyx3Q0FBd0NOLHNFQUFzQkE7SUFDdkVLLGFBQWM7UUFDVixLQUFLLENBQUMsa0JBQWtCRjtJQUM1QjtJQUNBSSxlQUFlQyxNQUFNLEVBQUU7UUFDbkIsT0FBTztZQUNIQyxPQUFPRCxPQUFPQyxLQUFLO1lBQ25CLEdBQUdSLG9EQUFJQSxDQUFDTyxPQUFPRSxJQUFJLEVBQUU7Z0JBQUM7Z0JBQVU7YUFBYSxDQUFDO1lBQzlDLEdBQUlGLE9BQU9FLElBQUksQ0FBQ0MsVUFBVSxHQUNwQjtnQkFDRUMsWUFBWUosT0FBT0UsSUFBSSxDQUFDQyxVQUFVLENBQUNFLGNBQWM7Z0JBQ2pELEdBQUdaLG9EQUFJQSxDQUFDTyxPQUFPRSxJQUFJLENBQUNDLFVBQVUsRUFBRSxpQkFBaUI7WUFDckQsSUFDRUcsU0FBUztZQUNmQyxRQUFRUCxPQUFPRSxJQUFJLENBQUNNLE1BQU07UUFDOUI7SUFDSjtJQUNBLE1BQU1DLFlBQVlDLFFBQVEsRUFBRTtRQUN4QixJQUFJLE9BQU9BLGFBQWEsWUFDcEIsYUFBYUEsWUFDYkMsTUFBTUMsT0FBTyxDQUFDRixVQUFVRyxZQUN4QixPQUFPSCxVQUFVVCxVQUFVLFVBQVU7WUFDckMsTUFBTWEsYUFBYUosU0FBU0csT0FBTyxDQUFDLEVBQUU7WUFDdEMsT0FBTztnQkFDSEUsZ0JBQWdCRCxXQUFXRSxJQUFJO1lBQ25DO1FBQ0o7UUFDQSxNQUFNLElBQUl0QiwwRUFBa0NBLENBQUM7SUFDakQ7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL2ZlYXRoZXJsZXNzLWFpLmpzPzRmZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUNvbnZlcnNhdGlvbmFsVGFzaywgQmFzZVRleHRHZW5lcmF0aW9uVGFzayB9IGZyb20gXCIuL3Byb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBvbWl0IH0gZnJvbSBcIi4uL3V0aWxzL29taXQuanNcIjtcbmltcG9ydCB7IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5jb25zdCBGRUFUSEVSTEVTU19BUElfQkFTRV9VUkwgPSBcImh0dHBzOi8vYXBpLmZlYXRoZXJsZXNzLmFpXCI7XG5leHBvcnQgY2xhc3MgRmVhdGhlcmxlc3NBSUNvbnZlcnNhdGlvbmFsVGFzayBleHRlbmRzIEJhc2VDb252ZXJzYXRpb25hbFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcImZlYXRoZXJsZXNzLWFpXCIsIEZFQVRIRVJMRVNTX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZlYXRoZXJsZXNzQUlUZXh0R2VuZXJhdGlvblRhc2sgZXh0ZW5kcyBCYXNlVGV4dEdlbmVyYXRpb25UYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJmZWF0aGVybGVzcy1haVwiLCBGRUFUSEVSTEVTU19BUElfQkFTRV9VUkwpO1xuICAgIH1cbiAgICBwcmVwYXJlUGF5bG9hZChwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGVsOiBwYXJhbXMubW9kZWwsXG4gICAgICAgICAgICAuLi5vbWl0KHBhcmFtcy5hcmdzLCBbXCJpbnB1dHNcIiwgXCJwYXJhbWV0ZXJzXCJdKSxcbiAgICAgICAgICAgIC4uLihwYXJhbXMuYXJncy5wYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIG1heF90b2tlbnM6IHBhcmFtcy5hcmdzLnBhcmFtZXRlcnMubWF4X25ld190b2tlbnMsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9taXQocGFyYW1zLmFyZ3MucGFyYW1ldGVycywgXCJtYXhfbmV3X3Rva2Vuc1wiKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgcHJvbXB0OiBwYXJhbXMuYXJncy5pbnB1dHMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGdldFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIFwiY2hvaWNlc1wiIGluIHJlc3BvbnNlICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHJlc3BvbnNlPy5jaG9pY2VzKSAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlc3BvbnNlPy5tb2RlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGlvbiA9IHJlc3BvbnNlLmNob2ljZXNbMF07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlZF90ZXh0OiBjb21wbGV0aW9uLnRleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yKFwiUmVjZWl2ZWQgbWFsZm9ybWVkIHJlc3BvbnNlIGZyb20gRmVhdGhlcmxlc3MgQUkgdGV4dCBnZW5lcmF0aW9uIEFQSVwiKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZUNvbnZlcnNhdGlvbmFsVGFzayIsIkJhc2VUZXh0R2VuZXJhdGlvblRhc2siLCJvbWl0IiwiSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciIsIkZFQVRIRVJMRVNTX0FQSV9CQVNFX1VSTCIsIkZlYXRoZXJsZXNzQUlDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsIkZlYXRoZXJsZXNzQUlUZXh0R2VuZXJhdGlvblRhc2siLCJwcmVwYXJlUGF5bG9hZCIsInBhcmFtcyIsIm1vZGVsIiwiYXJncyIsInBhcmFtZXRlcnMiLCJtYXhfdG9rZW5zIiwibWF4X25ld190b2tlbnMiLCJ1bmRlZmluZWQiLCJwcm9tcHQiLCJpbnB1dHMiLCJnZXRSZXNwb25zZSIsInJlc3BvbnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hvaWNlcyIsImNvbXBsZXRpb24iLCJnZW5lcmF0ZWRfdGV4dCIsInRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/featherless-ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fireworks-ai.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/fireworks-ai.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FireworksConversationalTask: () => (/* binding */ FireworksConversationalTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/**\n * See the registered mapping of HF model ID => Fireworks model ID here:\n *\n * https://huggingface.co/api/partners/fireworks/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Fireworks and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Fireworks, please open an issue on the present repo\n * and we will tag Fireworks team members.\n *\n * Thanks!\n */ \nclass FireworksConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"fireworks-ai\", \"https://api.fireworks.ai\");\n    }\n    makeRoute() {\n        return \"/inference/v1/chat/completions\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvZmlyZXdvcmtzLWFpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQzREO0FBQ3RELE1BQU1DLG9DQUFvQ0Qsc0VBQXNCQTtJQUNuRUUsYUFBYztRQUNWLEtBQUssQ0FBQyxnQkFBZ0I7SUFDMUI7SUFDQUMsWUFBWTtRQUNSLE9BQU87SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvZmlyZXdvcmtzLWFpLmpzP2RkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZWUgdGhlIHJlZ2lzdGVyZWQgbWFwcGluZyBvZiBIRiBtb2RlbCBJRCA9PiBGaXJld29ya3MgbW9kZWwgSUQgaGVyZTpcbiAqXG4gKiBodHRwczovL2h1Z2dpbmdmYWNlLmNvL2FwaS9wYXJ0bmVycy9maXJld29ya3MvbW9kZWxzXG4gKlxuICogVGhpcyBpcyBhIHB1YmxpY2x5IGF2YWlsYWJsZSBtYXBwaW5nLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIHRyeSB0byBydW4gaW5mZXJlbmNlIGZvciBhIG5ldyBtb2RlbCBsb2NhbGx5IGJlZm9yZSBpdCdzIHJlZ2lzdGVyZWQgb24gaHVnZ2luZ2ZhY2UuY28sXG4gKiB5b3UgY2FuIGFkZCBpdCB0byB0aGUgZGljdGlvbmFyeSBcIkhBUkRDT0RFRF9NT0RFTF9JRF9NQVBQSU5HXCIgaW4gY29uc3RzLnRzLCBmb3IgZGV2IHB1cnBvc2VzLlxuICpcbiAqIC0gSWYgeW91IHdvcmsgYXQgRmlyZXdvcmtzIGFuZCB3YW50IHRvIHVwZGF0ZSB0aGlzIG1hcHBpbmcsIHBsZWFzZSB1c2UgdGhlIG1vZGVsIG1hcHBpbmcgQVBJIHdlIHByb3ZpZGUgb24gaHVnZ2luZ2ZhY2UuY29cbiAqIC0gSWYgeW91J3JlIGEgY29tbXVuaXR5IG1lbWJlciBhbmQgd2FudCB0byBhZGQgYSBuZXcgc3VwcG9ydGVkIEhGIG1vZGVsIHRvIEZpcmV3b3JrcywgcGxlYXNlIG9wZW4gYW4gaXNzdWUgb24gdGhlIHByZXNlbnQgcmVwb1xuICogYW5kIHdlIHdpbGwgdGFnIEZpcmV3b3JrcyB0ZWFtIG1lbWJlcnMuXG4gKlxuICogVGhhbmtzIVxuICovXG5pbXBvcnQgeyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrIH0gZnJvbSBcIi4vcHJvdmlkZXJIZWxwZXIuanNcIjtcbmV4cG9ydCBjbGFzcyBGaXJld29ya3NDb252ZXJzYXRpb25hbFRhc2sgZXh0ZW5kcyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJmaXJld29ya3MtYWlcIiwgXCJodHRwczovL2FwaS5maXJld29ya3MuYWlcIik7XG4gICAgfVxuICAgIG1ha2VSb3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiL2luZmVyZW5jZS92MS9jaGF0L2NvbXBsZXRpb25zXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXJzYXRpb25hbFRhc2siLCJGaXJld29ya3NDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsIm1ha2VSb3V0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/fireworks-ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/groq.js":
/*!************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/groq.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroqConversationalTask: () => (/* binding */ GroqConversationalTask),\n/* harmony export */   GroqTextGenerationTask: () => (/* binding */ GroqTextGenerationTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n\n/**\n * See the registered mapping of HF model ID => Groq model ID here:\n *\n * https://huggingface.co/api/partners/groq/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Groq and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Groq, please open an issue on the present repo\n * and we will tag Groq team members.\n *\n * Thanks!\n */ const GROQ_API_BASE_URL = \"https://api.groq.com\";\nclass GroqTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseTextGenerationTask {\n    constructor(){\n        super(\"groq\", GROQ_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"/openai/v1/chat/completions\";\n    }\n}\nclass GroqConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"groq\", GROQ_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"/openai/v1/chat/completions\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvZ3JvcS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUY7QUFDckY7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0QsTUFBTUUsb0JBQW9CO0FBQ25CLE1BQU1DLCtCQUErQkYsc0VBQXNCQTtJQUM5REcsYUFBYztRQUNWLEtBQUssQ0FBQyxRQUFRRjtJQUNsQjtJQUNBRyxZQUFZO1FBQ1IsT0FBTztJQUNYO0FBQ0o7QUFDTyxNQUFNQywrQkFBK0JOLHNFQUFzQkE7SUFDOURJLGFBQWM7UUFDVixLQUFLLENBQUMsUUFBUUY7SUFDbEI7SUFDQUcsWUFBWTtRQUNSLE9BQU87SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvZ3JvcS5qcz85ZGVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDb252ZXJzYXRpb25hbFRhc2ssIEJhc2VUZXh0R2VuZXJhdGlvblRhc2sgfSBmcm9tIFwiLi9wcm92aWRlckhlbHBlci5qc1wiO1xuLyoqXG4gKiBTZWUgdGhlIHJlZ2lzdGVyZWQgbWFwcGluZyBvZiBIRiBtb2RlbCBJRCA9PiBHcm9xIG1vZGVsIElEIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9hcGkvcGFydG5lcnMvZ3JvcS9tb2RlbHNcbiAqXG4gKiBUaGlzIGlzIGEgcHVibGljbHkgYXZhaWxhYmxlIG1hcHBpbmcuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdHJ5IHRvIHJ1biBpbmZlcmVuY2UgZm9yIGEgbmV3IG1vZGVsIGxvY2FsbHkgYmVmb3JlIGl0J3MgcmVnaXN0ZXJlZCBvbiBodWdnaW5nZmFjZS5jbyxcbiAqIHlvdSBjYW4gYWRkIGl0IHRvIHRoZSBkaWN0aW9uYXJ5IFwiSEFSRENPREVEX01PREVMX0lEX01BUFBJTkdcIiBpbiBjb25zdHMudHMsIGZvciBkZXYgcHVycG9zZXMuXG4gKlxuICogLSBJZiB5b3Ugd29yayBhdCBHcm9xIGFuZCB3YW50IHRvIHVwZGF0ZSB0aGlzIG1hcHBpbmcsIHBsZWFzZSB1c2UgdGhlIG1vZGVsIG1hcHBpbmcgQVBJIHdlIHByb3ZpZGUgb24gaHVnZ2luZ2ZhY2UuY29cbiAqIC0gSWYgeW91J3JlIGEgY29tbXVuaXR5IG1lbWJlciBhbmQgd2FudCB0byBhZGQgYSBuZXcgc3VwcG9ydGVkIEhGIG1vZGVsIHRvIEdyb3EsIHBsZWFzZSBvcGVuIGFuIGlzc3VlIG9uIHRoZSBwcmVzZW50IHJlcG9cbiAqIGFuZCB3ZSB3aWxsIHRhZyBHcm9xIHRlYW0gbWVtYmVycy5cbiAqXG4gKiBUaGFua3MhXG4gKi9cbmNvbnN0IEdST1FfQVBJX0JBU0VfVVJMID0gXCJodHRwczovL2FwaS5ncm9xLmNvbVwiO1xuZXhwb3J0IGNsYXNzIEdyb3FUZXh0R2VuZXJhdGlvblRhc2sgZXh0ZW5kcyBCYXNlVGV4dEdlbmVyYXRpb25UYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJncm9xXCIsIEdST1FfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgbWFrZVJvdXRlKCkge1xuICAgICAgICByZXR1cm4gXCIvb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR3JvcUNvbnZlcnNhdGlvbmFsVGFzayBleHRlbmRzIEJhc2VDb252ZXJzYXRpb25hbFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcImdyb3FcIiwgR1JPUV9BUElfQkFTRV9VUkwpO1xuICAgIH1cbiAgICBtYWtlUm91dGUoKSB7XG4gICAgICAgIHJldHVybiBcIi9vcGVuYWkvdjEvY2hhdC9jb21wbGV0aW9uc1wiO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlQ29udmVyc2F0aW9uYWxUYXNrIiwiQmFzZVRleHRHZW5lcmF0aW9uVGFzayIsIkdST1FfQVBJX0JBU0VfVVJMIiwiR3JvcVRleHRHZW5lcmF0aW9uVGFzayIsImNvbnN0cnVjdG9yIiwibWFrZVJvdXRlIiwiR3JvcUNvbnZlcnNhdGlvbmFsVGFzayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/groq.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hf-inference.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/hf-inference.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EQUIVALENT_SENTENCE_TRANSFORMERS_TASKS: () => (/* binding */ EQUIVALENT_SENTENCE_TRANSFORMERS_TASKS),\n/* harmony export */   HFInferenceAudioClassificationTask: () => (/* binding */ HFInferenceAudioClassificationTask),\n/* harmony export */   HFInferenceAudioToAudioTask: () => (/* binding */ HFInferenceAudioToAudioTask),\n/* harmony export */   HFInferenceAutomaticSpeechRecognitionTask: () => (/* binding */ HFInferenceAutomaticSpeechRecognitionTask),\n/* harmony export */   HFInferenceConversationalTask: () => (/* binding */ HFInferenceConversationalTask),\n/* harmony export */   HFInferenceDocumentQuestionAnsweringTask: () => (/* binding */ HFInferenceDocumentQuestionAnsweringTask),\n/* harmony export */   HFInferenceFeatureExtractionTask: () => (/* binding */ HFInferenceFeatureExtractionTask),\n/* harmony export */   HFInferenceFillMaskTask: () => (/* binding */ HFInferenceFillMaskTask),\n/* harmony export */   HFInferenceImageClassificationTask: () => (/* binding */ HFInferenceImageClassificationTask),\n/* harmony export */   HFInferenceImageSegmentationTask: () => (/* binding */ HFInferenceImageSegmentationTask),\n/* harmony export */   HFInferenceImageToImageTask: () => (/* binding */ HFInferenceImageToImageTask),\n/* harmony export */   HFInferenceImageToTextTask: () => (/* binding */ HFInferenceImageToTextTask),\n/* harmony export */   HFInferenceObjectDetectionTask: () => (/* binding */ HFInferenceObjectDetectionTask),\n/* harmony export */   HFInferenceQuestionAnsweringTask: () => (/* binding */ HFInferenceQuestionAnsweringTask),\n/* harmony export */   HFInferenceSentenceSimilarityTask: () => (/* binding */ HFInferenceSentenceSimilarityTask),\n/* harmony export */   HFInferenceSummarizationTask: () => (/* binding */ HFInferenceSummarizationTask),\n/* harmony export */   HFInferenceTableQuestionAnsweringTask: () => (/* binding */ HFInferenceTableQuestionAnsweringTask),\n/* harmony export */   HFInferenceTabularClassificationTask: () => (/* binding */ HFInferenceTabularClassificationTask),\n/* harmony export */   HFInferenceTabularRegressionTask: () => (/* binding */ HFInferenceTabularRegressionTask),\n/* harmony export */   HFInferenceTask: () => (/* binding */ HFInferenceTask),\n/* harmony export */   HFInferenceTextClassificationTask: () => (/* binding */ HFInferenceTextClassificationTask),\n/* harmony export */   HFInferenceTextGenerationTask: () => (/* binding */ HFInferenceTextGenerationTask),\n/* harmony export */   HFInferenceTextToAudioTask: () => (/* binding */ HFInferenceTextToAudioTask),\n/* harmony export */   HFInferenceTextToImageTask: () => (/* binding */ HFInferenceTextToImageTask),\n/* harmony export */   HFInferenceTextToSpeechTask: () => (/* binding */ HFInferenceTextToSpeechTask),\n/* harmony export */   HFInferenceTokenClassificationTask: () => (/* binding */ HFInferenceTokenClassificationTask),\n/* harmony export */   HFInferenceTranslationTask: () => (/* binding */ HFInferenceTranslationTask),\n/* harmony export */   HFInferenceVisualQuestionAnsweringTask: () => (/* binding */ HFInferenceVisualQuestionAnsweringTask),\n/* harmony export */   HFInferenceZeroShotClassificationTask: () => (/* binding */ HFInferenceZeroShotClassificationTask),\n/* harmony export */   HFInferenceZeroShotImageClassificationTask: () => (/* binding */ HFInferenceZeroShotImageClassificationTask)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _utils_toArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/toArray.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/toArray.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n\n\n\n\n\n\nconst EQUIVALENT_SENTENCE_TRANSFORMERS_TASKS = [\n    \"feature-extraction\",\n    \"sentence-similarity\"\n];\nclass HFInferenceTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__.TaskProviderHelper {\n    constructor(){\n        super(\"hf-inference\", `${_config_js__WEBPACK_IMPORTED_MODULE_0__.HF_ROUTER_URL}/hf-inference`);\n    }\n    preparePayload(params) {\n        return params.args;\n    }\n    makeUrl(params) {\n        if (params.model.startsWith(\"http://\") || params.model.startsWith(\"https://\")) {\n            return params.model;\n        }\n        return super.makeUrl(params);\n    }\n    makeRoute(params) {\n        if (params.task && [\n            \"feature-extraction\",\n            \"sentence-similarity\"\n        ].includes(params.task)) {\n            // when deployed on hf-inference, those two tasks are automatically compatible with one another.\n            return `models/${params.model}/pipeline/${params.task}`;\n        }\n        return `models/${params.model}`;\n    }\n    async getResponse(response) {\n        return response;\n    }\n}\nclass HFInferenceTextToImageTask extends HFInferenceTask {\n    async getResponse(response, url, headers, outputType) {\n        if (!response) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference text-to-image API: response is undefined\");\n        }\n        if (typeof response == \"object\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            if (\"data\" in response && Array.isArray(response.data) && response.data[0].b64_json) {\n                const base64Data = response.data[0].b64_json;\n                if (outputType === \"url\") {\n                    return `data:image/jpeg;base64,${base64Data}`;\n                }\n                const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);\n                return await base64Response.blob();\n            }\n            if (\"output\" in response && Array.isArray(response.output)) {\n                if (outputType === \"url\") {\n                    return response.output[0];\n                }\n                const urlResponse = await fetch(response.output[0]);\n                const blob = await urlResponse.blob();\n                return blob;\n            }\n        }\n        if (response instanceof Blob) {\n            if (outputType === \"url\" || outputType === \"json\") {\n                const b64 = await response.arrayBuffer().then((buf)=>Buffer.from(buf).toString(\"base64\"));\n                return outputType === \"url\" ? `data:image/jpeg;base64,${b64}` : {\n                    output: `data:image/jpeg;base64,${b64}`\n                };\n            }\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference text-to-image API: expected a Blob\");\n    }\n}\nclass HFInferenceConversationalTask extends HFInferenceTask {\n    makeUrl(params) {\n        let url;\n        if (params.model.startsWith(\"http://\") || params.model.startsWith(\"https://\")) {\n            url = params.model.trim();\n        } else {\n            url = `${this.makeBaseUrl(params)}/models/${params.model}`;\n        }\n        url = url.replace(/\\/+$/, \"\");\n        if (url.endsWith(\"/v1\")) {\n            url += \"/chat/completions\";\n        } else if (!url.endsWith(\"/chat/completions\")) {\n            url += \"/v1/chat/completions\";\n        }\n        return url;\n    }\n    preparePayload(params) {\n        return {\n            ...params.args,\n            model: params.model\n        };\n    }\n    async getResponse(response) {\n        return response;\n    }\n}\nclass HFInferenceTextGenerationTask extends HFInferenceTask {\n    async getResponse(response) {\n        const res = (0,_utils_toArray_js__WEBPACK_IMPORTED_MODULE_2__.toArray)(response);\n        if (Array.isArray(res) && res.every((x)=>\"generated_text\" in x && typeof x?.generated_text === \"string\")) {\n            return res?.[0];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference text generation API: expected Array<{generated_text: string}>\");\n    }\n}\nclass HFInferenceAudioClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x === \"object\" && x !== null && typeof x.label === \"string\" && typeof x.score === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference audio-classification API: expected Array<{label: string, score: number}> but received different format\");\n    }\n}\nclass HFInferenceAutomaticSpeechRecognitionTask extends HFInferenceTask {\n    async getResponse(response) {\n        return response;\n    }\n    async preparePayloadAsync(args) {\n        return \"data\" in args ? args : {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_5__.omit)(args, \"inputs\"),\n            data: args.inputs\n        };\n    }\n}\nclass HFInferenceAudioToAudioTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (!Array.isArray(response)) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference audio-to-audio API: expected Array\");\n        }\n        if (!response.every((elem)=>{\n            return typeof elem === \"object\" && elem && \"label\" in elem && typeof elem.label === \"string\" && \"content-type\" in elem && typeof elem[\"content-type\"] === \"string\" && \"blob\" in elem && typeof elem.blob === \"string\";\n        })) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference audio-to-audio API: expected Array<{label: string, audio: Blob}>\");\n        }\n        return response;\n    }\n}\nclass HFInferenceDocumentQuestionAnsweringTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((elem)=>typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && (typeof elem.end === \"number\" || typeof elem.end === \"undefined\") && (typeof elem.score === \"number\" || typeof elem.score === \"undefined\") && (typeof elem.start === \"number\" || typeof elem.start === \"undefined\"))) {\n            return response[0];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference document-question-answering API: expected Array<{answer: string, end: number, score: number, start: number}>\");\n    }\n}\nclass HFInferenceFeatureExtractionTask extends HFInferenceTask {\n    async getResponse(response) {\n        const isNumArrayRec = (arr, maxDepth, curDepth = 0)=>{\n            if (curDepth > maxDepth) return false;\n            if (arr.every((x)=>Array.isArray(x))) {\n                return arr.every((x)=>isNumArrayRec(x, maxDepth, curDepth + 1));\n            } else {\n                return arr.every((x)=>typeof x === \"number\");\n            }\n        };\n        if (Array.isArray(response) && isNumArrayRec(response, 3, 0)) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference feature-extraction API: expected Array<number[][][] | number[][] | number[] | number>\");\n    }\n}\nclass HFInferenceImageClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference image-classification API: expected Array<{label: string, score: number}>\");\n    }\n}\nclass HFInferenceImageSegmentationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.label === \"string\" && typeof x.mask === \"string\" && (x.score === undefined || typeof x.score === \"number\"))) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference image-segmentation API: expected Array<{label: string, mask: string, score: number}>\");\n    }\n    async preparePayloadAsync(args) {\n        return {\n            ...args,\n            inputs: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_4__.base64FromBytes)(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))\n        };\n    }\n}\nclass HFInferenceImageToTextTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (typeof response?.generated_text !== \"string\") {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference image-to-text API: expected {generated_text: string}\");\n        }\n        return response;\n    }\n}\nclass HFInferenceImageToImageTask extends HFInferenceTask {\n    async preparePayloadAsync(args) {\n        if (!args.parameters) {\n            return {\n                ...args,\n                model: args.model,\n                data: args.inputs\n            };\n        } else {\n            return {\n                ...args,\n                inputs: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_4__.base64FromBytes)(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))\n            };\n        }\n    }\n    async getResponse(response) {\n        if (response instanceof Blob) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference image-to-image API: expected Blob\");\n    }\n}\nclass HFInferenceObjectDetectionTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference object-detection API: expected Array<{label: string, score: number, box: {xmin: number, ymin: number, xmax: number, ymax: number}}>\");\n    }\n}\nclass HFInferenceZeroShotImageClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference zero-shot-image-classification API: expected Array<{label: string, score: number}>\");\n    }\n}\nclass HFInferenceTextClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        const output = response?.[0];\n        if (Array.isArray(output) && output.every((x)=>typeof x?.label === \"string\" && typeof x.score === \"number\")) {\n            return output;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference text-classification API: expected Array<{label: string, score: number}>\");\n    }\n}\nclass HFInferenceQuestionAnsweringTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) ? response.every((elem)=>typeof elem === \"object\" && !!elem && typeof elem.answer === \"string\" && typeof elem.end === \"number\" && typeof elem.score === \"number\" && typeof elem.start === \"number\") : typeof response === \"object\" && !!response && typeof response.answer === \"string\" && typeof response.end === \"number\" && typeof response.score === \"number\" && typeof response.start === \"number\") {\n            return Array.isArray(response) ? response[0] : response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference question-answering API: expected Array<{answer: string, end: number, score: number, start: number}>\");\n    }\n}\nclass HFInferenceFillMaskTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference fill-mask API: expected Array<{score: number, sequence: string, token: number, token_str: string}>\");\n    }\n}\nclass HFInferenceZeroShotClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        /// Handle Legacy response format from Inference API\n        if (typeof response === \"object\" && response !== null && \"labels\" in response && \"scores\" in response && Array.isArray(response.labels) && Array.isArray(response.scores) && response.labels.length === response.scores.length && response.labels.every((label)=>typeof label === \"string\") && response.scores.every((score)=>typeof score === \"number\")) {\n            const scores = response.scores;\n            return response.labels.map((label, index)=>({\n                    label,\n                    score: scores[index]\n                }));\n        }\n        if (Array.isArray(response) && response.every(HFInferenceZeroShotClassificationTask.validateOutputElement)) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference zero-shot-classification API: expected Array<{label: string, score: number}>\");\n    }\n    static validateOutputElement(elem) {\n        return typeof elem === \"object\" && !!elem && \"label\" in elem && \"score\" in elem && typeof elem.label === \"string\" && typeof elem.score === \"number\";\n    }\n}\nclass HFInferenceSentenceSimilarityTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference sentence-similarity API: expected Array<number>\");\n    }\n}\nclass HFInferenceTableQuestionAnsweringTask extends HFInferenceTask {\n    static validate(elem) {\n        return typeof elem === \"object\" && !!elem && \"aggregator\" in elem && typeof elem.aggregator === \"string\" && \"answer\" in elem && typeof elem.answer === \"string\" && \"cells\" in elem && Array.isArray(elem.cells) && elem.cells.every((x)=>typeof x === \"string\") && \"coordinates\" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every((coord)=>Array.isArray(coord) && coord.every((x)=>typeof x === \"number\"));\n    }\n    async getResponse(response) {\n        if (Array.isArray(response) && Array.isArray(response) ? response.every((elem)=>HFInferenceTableQuestionAnsweringTask.validate(elem)) : HFInferenceTableQuestionAnsweringTask.validate(response)) {\n            return Array.isArray(response) ? response[0] : response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference table-question-answering API: expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\");\n    }\n}\nclass HFInferenceTokenClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference token-classification API: expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\");\n    }\n}\nclass HFInferenceTranslationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x?.translation_text === \"string\")) {\n            return response?.length === 1 ? response?.[0] : response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference translation API: expected Array<{translation_text: string}>\");\n    }\n}\nclass HFInferenceSummarizationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x?.summary_text === \"string\")) {\n            return response?.[0];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference summarization API: expected Array<{summary_text: string}>\");\n    }\n}\nclass HFInferenceTextToSpeechTask extends HFInferenceTask {\n    async getResponse(response) {\n        return response;\n    }\n}\nclass HFInferenceTabularClassificationTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference tabular-classification API: expected Array<number>\");\n    }\n}\nclass HFInferenceVisualQuestionAnsweringTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((elem)=>typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && typeof elem.score === \"number\")) {\n            return response[0];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference visual-question-answering API: expected Array<{answer: string, score: number}>\");\n    }\n}\nclass HFInferenceTabularRegressionTask extends HFInferenceTask {\n    async getResponse(response) {\n        if (Array.isArray(response) && response.every((x)=>typeof x === \"number\")) {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from HF-Inference tabular-regression API: expected Array<number>\");\n    }\n}\nclass HFInferenceTextToAudioTask extends HFInferenceTask {\n    async getResponse(response) {\n        return response;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hf-inference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hyperbolic.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/hyperbolic.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HyperbolicConversationalTask: () => (/* binding */ HyperbolicConversationalTask),\n/* harmony export */   HyperbolicTextGenerationTask: () => (/* binding */ HyperbolicTextGenerationTask),\n/* harmony export */   HyperbolicTextToImageTask: () => (/* binding */ HyperbolicTextToImageTask)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nconst HYPERBOLIC_API_BASE_URL = \"https://api.hyperbolic.xyz\";\nclass HyperbolicConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationalTask {\n    constructor(){\n        super(\"hyperbolic\", HYPERBOLIC_API_BASE_URL);\n    }\n}\nclass HyperbolicTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseTextGenerationTask {\n    constructor(){\n        super(\"hyperbolic\", HYPERBOLIC_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"v1/chat/completions\";\n    }\n    preparePayload(params) {\n        return {\n            messages: [\n                {\n                    content: params.args.inputs,\n                    role: \"user\"\n                }\n            ],\n            ...params.args.parameters ? {\n                max_tokens: params.args.parameters.max_new_tokens,\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args.parameters, \"max_new_tokens\")\n            } : undefined,\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            model: params.model\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"choices\" in response && Array.isArray(response?.choices) && typeof response?.model === \"string\") {\n            const completion = response.choices[0];\n            return {\n                generated_text: completion.message.content\n            };\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Hyperbolic text generation API\");\n    }\n}\nclass HyperbolicTextToImageTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"hyperbolic\", HYPERBOLIC_API_BASE_URL);\n    }\n    makeRoute(params) {\n        void params;\n        return `/v1/images/generations`;\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            prompt: params.args.inputs,\n            model_name: params.model\n        };\n    }\n    async getResponse(response, url, headers, outputType) {\n        if (typeof response === \"object\" && \"images\" in response && Array.isArray(response.images) && response.images[0] && typeof response.images[0].image === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            if (outputType === \"url\") {\n                return `data:image/jpeg;base64,${response.images[0].image}`;\n            }\n            return fetch(`data:image/jpeg;base64,${response.images[0].image}`).then((res)=>res.blob());\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Hyperbolic text-to-image API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvaHlwZXJib2xpYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0M7QUFDa0U7QUFDeEM7QUFDbEUsTUFBTUssMEJBQTBCO0FBQ3pCLE1BQU1DLHFDQUFxQ0wsc0VBQXNCQTtJQUNwRU0sYUFBYztRQUNWLEtBQUssQ0FBQyxjQUFjRjtJQUN4QjtBQUNKO0FBQ08sTUFBTUcscUNBQXFDTixzRUFBc0JBO0lBQ3BFSyxhQUFjO1FBQ1YsS0FBSyxDQUFDLGNBQWNGO0lBQ3hCO0lBQ0FJLFlBQVk7UUFDUixPQUFPO0lBQ1g7SUFDQUMsZUFBZUMsTUFBTSxFQUFFO1FBQ25CLE9BQU87WUFDSEMsVUFBVTtnQkFBQztvQkFBRUMsU0FBU0YsT0FBT0csSUFBSSxDQUFDQyxNQUFNO29CQUFFQyxNQUFNO2dCQUFPO2FBQUU7WUFDekQsR0FBSUwsT0FBT0csSUFBSSxDQUFDRyxVQUFVLEdBQ3BCO2dCQUNFQyxZQUFZUCxPQUFPRyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0UsY0FBYztnQkFDakQsR0FBR25CLG9EQUFJQSxDQUFDVyxPQUFPRyxJQUFJLENBQUNHLFVBQVUsRUFBRSxpQkFBaUI7WUFDckQsSUFDRUcsU0FBUztZQUNmLEdBQUdwQixvREFBSUEsQ0FBQ1csT0FBT0csSUFBSSxFQUFFO2dCQUFDO2dCQUFVO2FBQWEsQ0FBQztZQUM5Q08sT0FBT1YsT0FBT1UsS0FBSztRQUN2QjtJQUNKO0lBQ0EsTUFBTUMsWUFBWUMsUUFBUSxFQUFFO1FBQ3hCLElBQUksT0FBT0EsYUFBYSxZQUNwQixhQUFhQSxZQUNiQyxNQUFNQyxPQUFPLENBQUNGLFVBQVVHLFlBQ3hCLE9BQU9ILFVBQVVGLFVBQVUsVUFBVTtZQUNyQyxNQUFNTSxhQUFhSixTQUFTRyxPQUFPLENBQUMsRUFBRTtZQUN0QyxPQUFPO2dCQUNIRSxnQkFBZ0JELFdBQVdFLE9BQU8sQ0FBQ2hCLE9BQU87WUFDOUM7UUFDSjtRQUNBLE1BQU0sSUFBSVQsMEVBQWtDQSxDQUFDO0lBQ2pEO0FBQ0o7QUFDTyxNQUFNMEIsa0NBQWtDM0Isa0VBQWtCQTtJQUM3REksYUFBYztRQUNWLEtBQUssQ0FBQyxjQUFjRjtJQUN4QjtJQUNBSSxVQUFVRSxNQUFNLEVBQUU7UUFDZCxLQUFLQTtRQUNMLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztJQUNuQztJQUNBRCxlQUFlQyxNQUFNLEVBQUU7UUFDbkIsT0FBTztZQUNILEdBQUdYLG9EQUFJQSxDQUFDVyxPQUFPRyxJQUFJLEVBQUU7Z0JBQUM7Z0JBQVU7YUFBYSxDQUFDO1lBQzlDLEdBQUdILE9BQU9HLElBQUksQ0FBQ0csVUFBVTtZQUN6QmMsUUFBUXBCLE9BQU9HLElBQUksQ0FBQ0MsTUFBTTtZQUMxQmlCLFlBQVlyQixPQUFPVSxLQUFLO1FBQzVCO0lBQ0o7SUFDQSxNQUFNQyxZQUFZQyxRQUFRLEVBQUVVLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUU7UUFDbEQsSUFBSSxPQUFPWixhQUFhLFlBQ3BCLFlBQVlBLFlBQ1pDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU2EsTUFBTSxLQUM3QmIsU0FBU2EsTUFBTSxDQUFDLEVBQUUsSUFDbEIsT0FBT2IsU0FBU2EsTUFBTSxDQUFDLEVBQUUsQ0FBQ0MsS0FBSyxLQUFLLFVBQVU7WUFDOUMsSUFBSUYsZUFBZSxRQUFRO2dCQUN2QixPQUFPO29CQUFFLEdBQUdaLFFBQVE7Z0JBQUM7WUFDekI7WUFDQSxJQUFJWSxlQUFlLE9BQU87Z0JBQ3RCLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRVosU0FBU2EsTUFBTSxDQUFDLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7WUFDL0Q7WUFDQSxPQUFPQyxNQUFNLENBQUMsdUJBQXVCLEVBQUVmLFNBQVNhLE1BQU0sQ0FBQyxFQUFFLENBQUNDLEtBQUssQ0FBQyxDQUFDLEVBQUVFLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJO1FBQzdGO1FBQ0EsTUFBTSxJQUFJckMsMEVBQWtDQSxDQUFDO0lBQ2pEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Byb3ZpZGVycy9oeXBlcmJvbGljLmpzP2FjODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb21pdCB9IGZyb20gXCIuLi91dGlscy9vbWl0LmpzXCI7XG5pbXBvcnQgeyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrLCBCYXNlVGV4dEdlbmVyYXRpb25UYXNrLCBUYXNrUHJvdmlkZXJIZWxwZXIsIH0gZnJvbSBcIi4vcHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5jb25zdCBIWVBFUkJPTElDX0FQSV9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9hcGkuaHlwZXJib2xpYy54eXpcIjtcbmV4cG9ydCBjbGFzcyBIeXBlcmJvbGljQ29udmVyc2F0aW9uYWxUYXNrIGV4dGVuZHMgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiaHlwZXJib2xpY1wiLCBIWVBFUkJPTElDX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEh5cGVyYm9saWNUZXh0R2VuZXJhdGlvblRhc2sgZXh0ZW5kcyBCYXNlVGV4dEdlbmVyYXRpb25UYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJoeXBlcmJvbGljXCIsIEhZUEVSQk9MSUNfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgbWFrZVJvdXRlKCkge1xuICAgICAgICByZXR1cm4gXCJ2MS9jaGF0L2NvbXBsZXRpb25zXCI7XG4gICAgfVxuICAgIHByZXBhcmVQYXlsb2FkKHBhcmFtcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZXM6IFt7IGNvbnRlbnQ6IHBhcmFtcy5hcmdzLmlucHV0cywgcm9sZTogXCJ1c2VyXCIgfV0sXG4gICAgICAgICAgICAuLi4ocGFyYW1zLmFyZ3MucGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBtYXhfdG9rZW5zOiBwYXJhbXMuYXJncy5wYXJhbWV0ZXJzLm1heF9uZXdfdG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICAuLi5vbWl0KHBhcmFtcy5hcmdzLnBhcmFtZXRlcnMsIFwibWF4X25ld190b2tlbnNcIiksXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIC4uLm9taXQocGFyYW1zLmFyZ3MsIFtcImlucHV0c1wiLCBcInBhcmFtZXRlcnNcIl0pLFxuICAgICAgICAgICAgbW9kZWw6IHBhcmFtcy5tb2RlbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgXCJjaG9pY2VzXCIgaW4gcmVzcG9uc2UgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzcG9uc2U/LmNob2ljZXMpICYmXG4gICAgICAgICAgICB0eXBlb2YgcmVzcG9uc2U/Lm1vZGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gcmVzcG9uc2UuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkX3RleHQ6IGNvbXBsZXRpb24ubWVzc2FnZS5jb250ZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvcihcIlJlY2VpdmVkIG1hbGZvcm1lZCByZXNwb25zZSBmcm9tIEh5cGVyYm9saWMgdGV4dCBnZW5lcmF0aW9uIEFQSVwiKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSHlwZXJib2xpY1RleHRUb0ltYWdlVGFzayBleHRlbmRzIFRhc2tQcm92aWRlckhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiaHlwZXJib2xpY1wiLCBIWVBFUkJPTElDX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxuICAgIG1ha2VSb3V0ZShwYXJhbXMpIHtcbiAgICAgICAgdm9pZCBwYXJhbXM7XG4gICAgICAgIHJldHVybiBgL3YxL2ltYWdlcy9nZW5lcmF0aW9uc2A7XG4gICAgfVxuICAgIHByZXBhcmVQYXlsb2FkKHBhcmFtcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ub21pdChwYXJhbXMuYXJncywgW1wiaW5wdXRzXCIsIFwicGFyYW1ldGVyc1wiXSksXG4gICAgICAgICAgICAuLi5wYXJhbXMuYXJncy5wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcHJvbXB0OiBwYXJhbXMuYXJncy5pbnB1dHMsXG4gICAgICAgICAgICBtb2RlbF9uYW1lOiBwYXJhbXMubW9kZWwsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGdldFJlc3BvbnNlKHJlc3BvbnNlLCB1cmwsIGhlYWRlcnMsIG91dHB1dFR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgXCJpbWFnZXNcIiBpbiByZXNwb25zZSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXNwb25zZS5pbWFnZXMpICYmXG4gICAgICAgICAgICByZXNwb25zZS5pbWFnZXNbMF0gJiZcbiAgICAgICAgICAgIHR5cGVvZiByZXNwb25zZS5pbWFnZXNbMF0uaW1hZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChvdXRwdXRUeXBlID09PSBcImpzb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnJlc3BvbnNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0cHV0VHlwZSA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwke3Jlc3BvbnNlLmltYWdlc1swXS5pbWFnZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZldGNoKGBkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7cmVzcG9uc2UuaW1hZ2VzWzBdLmltYWdlfWApLnRoZW4oKHJlcykgPT4gcmVzLmJsb2IoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IoXCJSZWNlaXZlZCBtYWxmb3JtZWQgcmVzcG9uc2UgZnJvbSBIeXBlcmJvbGljIHRleHQtdG8taW1hZ2UgQVBJXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJvbWl0IiwiQmFzZUNvbnZlcnNhdGlvbmFsVGFzayIsIkJhc2VUZXh0R2VuZXJhdGlvblRhc2siLCJUYXNrUHJvdmlkZXJIZWxwZXIiLCJJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yIiwiSFlQRVJCT0xJQ19BUElfQkFTRV9VUkwiLCJIeXBlcmJvbGljQ29udmVyc2F0aW9uYWxUYXNrIiwiY29uc3RydWN0b3IiLCJIeXBlcmJvbGljVGV4dEdlbmVyYXRpb25UYXNrIiwibWFrZVJvdXRlIiwicHJlcGFyZVBheWxvYWQiLCJwYXJhbXMiLCJtZXNzYWdlcyIsImNvbnRlbnQiLCJhcmdzIiwiaW5wdXRzIiwicm9sZSIsInBhcmFtZXRlcnMiLCJtYXhfdG9rZW5zIiwibWF4X25ld190b2tlbnMiLCJ1bmRlZmluZWQiLCJtb2RlbCIsImdldFJlc3BvbnNlIiwicmVzcG9uc2UiLCJBcnJheSIsImlzQXJyYXkiLCJjaG9pY2VzIiwiY29tcGxldGlvbiIsImdlbmVyYXRlZF90ZXh0IiwibWVzc2FnZSIsIkh5cGVyYm9saWNUZXh0VG9JbWFnZVRhc2siLCJwcm9tcHQiLCJtb2RlbF9uYW1lIiwidXJsIiwiaGVhZGVycyIsIm91dHB1dFR5cGUiLCJpbWFnZXMiLCJpbWFnZSIsImZldGNoIiwidGhlbiIsInJlcyIsImJsb2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/hyperbolic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nebius.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/nebius.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NebiusConversationalTask: () => (/* binding */ NebiusConversationalTask),\n/* harmony export */   NebiusFeatureExtractionTask: () => (/* binding */ NebiusFeatureExtractionTask),\n/* harmony export */   NebiusTextGenerationTask: () => (/* binding */ NebiusTextGenerationTask),\n/* harmony export */   NebiusTextToImageTask: () => (/* binding */ NebiusTextToImageTask)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nconst NEBIUS_API_BASE_URL = \"https://api.studio.nebius.ai\";\nclass NebiusConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationalTask {\n    constructor(){\n        super(\"nebius\", NEBIUS_API_BASE_URL);\n    }\n    preparePayload(params) {\n        const payload = super.preparePayload(params);\n        const responseFormat = params.args.response_format;\n        if (responseFormat?.type === \"json_schema\" && responseFormat.json_schema?.schema) {\n            payload[\"guided_json\"] = responseFormat.json_schema.schema;\n        }\n        return payload;\n    }\n}\nclass NebiusTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseTextGenerationTask {\n    constructor(){\n        super(\"nebius\", NEBIUS_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            ...params.args,\n            model: params.model,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"choices\" in response && Array.isArray(response?.choices) && response.choices.length > 0 && typeof response.choices[0]?.text === \"string\") {\n            return {\n                generated_text: response.choices[0].text\n            };\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Nebius text generation API\");\n    }\n}\nclass NebiusTextToImageTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"nebius\", NEBIUS_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            response_format: \"b64_json\",\n            prompt: params.args.inputs,\n            model: params.model\n        };\n    }\n    makeRoute() {\n        return \"v1/images/generations\";\n    }\n    async getResponse(response, url, headers, outputType) {\n        if (typeof response === \"object\" && \"data\" in response && Array.isArray(response.data) && response.data.length > 0 && \"b64_json\" in response.data[0] && typeof response.data[0].b64_json === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            const base64Data = response.data[0].b64_json;\n            if (outputType === \"url\") {\n                return `data:image/jpeg;base64,${base64Data}`;\n            }\n            return fetch(`data:image/jpeg;base64,${base64Data}`).then((res)=>res.blob());\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Nebius text-to-image API\");\n    }\n}\nclass NebiusFeatureExtractionTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"nebius\", NEBIUS_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            input: params.args.inputs,\n            model: params.model\n        };\n    }\n    makeRoute() {\n        return \"v1/embeddings\";\n    }\n    async getResponse(response) {\n        return response.data.map((item)=>item.embedding);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nebius.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/novita.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/novita.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NovitaConversationalTask: () => (/* binding */ NovitaConversationalTask),\n/* harmony export */   NovitaTextGenerationTask: () => (/* binding */ NovitaTextGenerationTask),\n/* harmony export */   NovitaTextToVideoTask: () => (/* binding */ NovitaTextToVideoTask)\n/* harmony export */ });\n/* harmony import */ var _lib_isUrl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/isUrl.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js\");\n/* harmony import */ var _utils_delay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/delay.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/delay.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/**\n * See the registered mapping of HF model ID => Novita model ID here:\n *\n * https://huggingface.co/api/partners/novita/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Novita and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Novita, please open an issue on the present repo\n * and we will tag Novita team members.\n *\n * Thanks!\n */ \n\n\n\n\nconst NOVITA_API_BASE_URL = \"https://api.novita.ai\";\nclass NovitaTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__.BaseTextGenerationTask {\n    constructor(){\n        super(\"novita\", NOVITA_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"/v3/openai/chat/completions\";\n    }\n}\nclass NovitaConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__.BaseConversationalTask {\n    constructor(){\n        super(\"novita\", NOVITA_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"/v3/openai/chat/completions\";\n    }\n}\nclass NovitaTextToVideoTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__.TaskProviderHelper {\n    constructor(){\n        super(\"novita\", NOVITA_API_BASE_URL);\n    }\n    makeRoute(params) {\n        return `/v3/async/${params.model}`;\n    }\n    preparePayload(params) {\n        const { num_inference_steps, ...restParameters } = params.args.parameters ?? {};\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_2__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...restParameters,\n            steps: num_inference_steps,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response, url, headers) {\n        if (!url || !headers) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientInputError(\"URL and headers are required for text-to-video task\");\n        }\n        const taskId = response.task_id;\n        if (!taskId) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderOutputError(\"Received malformed response from Novita text-to-video API: no task ID found in the response\");\n        }\n        const parsedUrl = new URL(url);\n        const baseUrl = `${parsedUrl.protocol}//${parsedUrl.host}${parsedUrl.host === \"router.huggingface.co\" ? \"/novita\" : \"\"}`;\n        const resultUrl = `${baseUrl}/v3/async/task-result?task_id=${taskId}`;\n        let status = \"\";\n        let taskResult;\n        while(status !== \"TASK_STATUS_SUCCEED\" && status !== \"TASK_STATUS_FAILED\"){\n            await (0,_utils_delay_js__WEBPACK_IMPORTED_MODULE_1__.delay)(500);\n            const resultResponse = await fetch(resultUrl, {\n                headers\n            });\n            if (!resultResponse.ok) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderApiError(\"Failed to fetch task result\", {\n                    url: resultUrl,\n                    method: \"GET\",\n                    headers\n                }, {\n                    requestId: resultResponse.headers.get(\"x-request-id\") ?? \"\",\n                    status: resultResponse.status,\n                    body: await resultResponse.text()\n                });\n            }\n            try {\n                taskResult = await resultResponse.json();\n                if (taskResult && typeof taskResult === \"object\" && \"task\" in taskResult && taskResult.task && typeof taskResult.task === \"object\" && \"status\" in taskResult.task && typeof taskResult.task.status === \"string\") {\n                    status = taskResult.task.status;\n                } else {\n                    throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderOutputError(\"Received malformed response from Novita text-to-video API: failed to get task status\");\n                }\n            } catch (error) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderOutputError(\"Received malformed response from Novita text-to-video API: failed to parse task result\");\n            }\n        }\n        if (status === \"TASK_STATUS_FAILED\") {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderOutputError(\"Novita text-to-video task failed\");\n        }\n        if (typeof taskResult === \"object\" && !!taskResult && \"videos\" in taskResult && typeof taskResult.videos === \"object\" && !!taskResult.videos && Array.isArray(taskResult.videos) && taskResult.videos.length > 0 && \"video_url\" in taskResult.videos[0] && typeof taskResult.videos[0].video_url === \"string\" && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_0__.isUrl)(taskResult.videos[0].video_url)) {\n            const urlResponse = await fetch(taskResult.videos[0].video_url);\n            return await urlResponse.blob();\n        } else {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.InferenceClientProviderOutputError(`Received malformed response from Novita text-to-video API: expected { videos: [{ video_url: string }] } format, got instead: ${JSON.stringify(taskResult)}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/novita.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nscale.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/nscale.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NscaleConversationalTask: () => (/* binding */ NscaleConversationalTask),\n/* harmony export */   NscaleTextToImageTask: () => (/* binding */ NscaleTextToImageTask)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nconst NSCALE_API_BASE_URL = \"https://inference.api.nscale.com\";\nclass NscaleConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationalTask {\n    constructor(){\n        super(\"nscale\", NSCALE_API_BASE_URL);\n    }\n}\nclass NscaleTextToImageTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"nscale\", NSCALE_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            response_format: \"b64_json\",\n            prompt: params.args.inputs,\n            model: params.model\n        };\n    }\n    makeRoute() {\n        return \"v1/images/generations\";\n    }\n    async getResponse(response, url, headers, outputType) {\n        if (typeof response === \"object\" && \"data\" in response && Array.isArray(response.data) && response.data.length > 0 && \"b64_json\" in response.data[0] && typeof response.data[0].b64_json === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            const base64Data = response.data[0].b64_json;\n            if (outputType === \"url\") {\n                return `data:image/jpeg;base64,${base64Data}`;\n            }\n            return fetch(`data:image/jpeg;base64,${base64Data}`).then((res)=>res.blob());\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Nscale text-to-image API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvbnNjYWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXdDO0FBQ3lDO0FBQ2Y7QUFDbEUsTUFBTUksc0JBQXNCO0FBQ3JCLE1BQU1DLGlDQUFpQ0osc0VBQXNCQTtJQUNoRUssYUFBYztRQUNWLEtBQUssQ0FBQyxVQUFVRjtJQUNwQjtBQUNKO0FBQ08sTUFBTUcsOEJBQThCTCxrRUFBa0JBO0lBQ3pESSxhQUFjO1FBQ1YsS0FBSyxDQUFDLFVBQVVGO0lBQ3BCO0lBQ0FJLGVBQWVDLE1BQU0sRUFBRTtRQUNuQixPQUFPO1lBQ0gsR0FBR1Qsb0RBQUlBLENBQUNTLE9BQU9DLElBQUksRUFBRTtnQkFBQztnQkFBVTthQUFhLENBQUM7WUFDOUMsR0FBR0QsT0FBT0MsSUFBSSxDQUFDQyxVQUFVO1lBQ3pCQyxpQkFBaUI7WUFDakJDLFFBQVFKLE9BQU9DLElBQUksQ0FBQ0ksTUFBTTtZQUMxQkMsT0FBT04sT0FBT00sS0FBSztRQUN2QjtJQUNKO0lBQ0FDLFlBQVk7UUFDUixPQUFPO0lBQ1g7SUFDQSxNQUFNQyxZQUFZQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUU7UUFDbEQsSUFBSSxPQUFPSCxhQUFhLFlBQ3BCLFVBQVVBLFlBQ1ZJLE1BQU1DLE9BQU8sQ0FBQ0wsU0FBU00sSUFBSSxLQUMzQk4sU0FBU00sSUFBSSxDQUFDQyxNQUFNLEdBQUcsS0FDdkIsY0FBY1AsU0FBU00sSUFBSSxDQUFDLEVBQUUsSUFDOUIsT0FBT04sU0FBU00sSUFBSSxDQUFDLEVBQUUsQ0FBQ0UsUUFBUSxLQUFLLFVBQVU7WUFDL0MsSUFBSUwsZUFBZSxRQUFRO2dCQUN2QixPQUFPO29CQUFFLEdBQUdILFFBQVE7Z0JBQUM7WUFDekI7WUFDQSxNQUFNUyxhQUFhVCxTQUFTTSxJQUFJLENBQUMsRUFBRSxDQUFDRSxRQUFRO1lBQzVDLElBQUlMLGVBQWUsT0FBTztnQkFDdEIsT0FBTyxDQUFDLHVCQUF1QixFQUFFTSxXQUFXLENBQUM7WUFDakQ7WUFDQSxPQUFPQyxNQUFNLENBQUMsdUJBQXVCLEVBQUVELFdBQVcsQ0FBQyxFQUFFRSxJQUFJLENBQUMsQ0FBQ0MsTUFBUUEsSUFBSUMsSUFBSTtRQUMvRTtRQUNBLE1BQU0sSUFBSTVCLDBFQUFrQ0EsQ0FBQztJQUNqRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvbnNjYWxlLmpzPzBjNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb21pdCB9IGZyb20gXCIuLi91dGlscy9vbWl0LmpzXCI7XG5pbXBvcnQgeyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrLCBUYXNrUHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi9wcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmNvbnN0IE5TQ0FMRV9BUElfQkFTRV9VUkwgPSBcImh0dHBzOi8vaW5mZXJlbmNlLmFwaS5uc2NhbGUuY29tXCI7XG5leHBvcnQgY2xhc3MgTnNjYWxlQ29udmVyc2F0aW9uYWxUYXNrIGV4dGVuZHMgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwibnNjYWxlXCIsIE5TQ0FMRV9BUElfQkFTRV9VUkwpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOc2NhbGVUZXh0VG9JbWFnZVRhc2sgZXh0ZW5kcyBUYXNrUHJvdmlkZXJIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIm5zY2FsZVwiLCBOU0NBTEVfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgcHJlcGFyZVBheWxvYWQocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5vbWl0KHBhcmFtcy5hcmdzLCBbXCJpbnB1dHNcIiwgXCJwYXJhbWV0ZXJzXCJdKSxcbiAgICAgICAgICAgIC4uLnBhcmFtcy5hcmdzLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICByZXNwb25zZV9mb3JtYXQ6IFwiYjY0X2pzb25cIixcbiAgICAgICAgICAgIHByb21wdDogcGFyYW1zLmFyZ3MuaW5wdXRzLFxuICAgICAgICAgICAgbW9kZWw6IHBhcmFtcy5tb2RlbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWFrZVJvdXRlKCkge1xuICAgICAgICByZXR1cm4gXCJ2MS9pbWFnZXMvZ2VuZXJhdGlvbnNcIjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVzcG9uc2UocmVzcG9uc2UsIHVybCwgaGVhZGVycywgb3V0cHV0VHlwZSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBcImRhdGFcIiBpbiByZXNwb25zZSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXNwb25zZS5kYXRhKSAmJlxuICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBcImI2NF9qc29uXCIgaW4gcmVzcG9uc2UuZGF0YVswXSAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlc3BvbnNlLmRhdGFbMF0uYjY0X2pzb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChvdXRwdXRUeXBlID09PSBcImpzb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnJlc3BvbnNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiYXNlNjREYXRhID0gcmVzcG9uc2UuZGF0YVswXS5iNjRfanNvbjtcbiAgICAgICAgICAgIGlmIChvdXRwdXRUeXBlID09PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7YmFzZTY0RGF0YX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZldGNoKGBkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7YmFzZTY0RGF0YX1gKS50aGVuKChyZXMpID0+IHJlcy5ibG9iKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yKFwiUmVjZWl2ZWQgbWFsZm9ybWVkIHJlc3BvbnNlIGZyb20gTnNjYWxlIHRleHQtdG8taW1hZ2UgQVBJXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJvbWl0IiwiQmFzZUNvbnZlcnNhdGlvbmFsVGFzayIsIlRhc2tQcm92aWRlckhlbHBlciIsIkluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IiLCJOU0NBTEVfQVBJX0JBU0VfVVJMIiwiTnNjYWxlQ29udmVyc2F0aW9uYWxUYXNrIiwiY29uc3RydWN0b3IiLCJOc2NhbGVUZXh0VG9JbWFnZVRhc2siLCJwcmVwYXJlUGF5bG9hZCIsInBhcmFtcyIsImFyZ3MiLCJwYXJhbWV0ZXJzIiwicmVzcG9uc2VfZm9ybWF0IiwicHJvbXB0IiwiaW5wdXRzIiwibW9kZWwiLCJtYWtlUm91dGUiLCJnZXRSZXNwb25zZSIsInJlc3BvbnNlIiwidXJsIiwiaGVhZGVycyIsIm91dHB1dFR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJkYXRhIiwibGVuZ3RoIiwiYjY0X2pzb24iLCJiYXNlNjREYXRhIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwiYmxvYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/nscale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/openai.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/openai.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIConversationalTask: () => (/* binding */ OpenAIConversationalTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/**\n * Special case: provider configuration for a private models provider (OpenAI in this case).\n */ \nconst OPENAI_API_BASE_URL = \"https://api.openai.com\";\nclass OpenAIConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        // Pass clientSideRoutingOnly: true to the constructor\n        super(\"openai\", OPENAI_API_BASE_URL, true);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvb3BlbmFpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FDNEQ7QUFDN0QsTUFBTUMsc0JBQXNCO0FBQ3JCLE1BQU1DLGlDQUFpQ0Ysc0VBQXNCQTtJQUNoRUcsYUFBYztRQUNWLHNEQUFzRDtRQUN0RCxLQUFLLENBQUMsVUFBVUYscUJBQXFCO0lBQ3pDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Byb3ZpZGVycy9vcGVuYWkuanM/YTY0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNwZWNpYWwgY2FzZTogcHJvdmlkZXIgY29uZmlndXJhdGlvbiBmb3IgYSBwcml2YXRlIG1vZGVscyBwcm92aWRlciAoT3BlbkFJIGluIHRoaXMgY2FzZSkuXG4gKi9cbmltcG9ydCB7IEJhc2VDb252ZXJzYXRpb25hbFRhc2sgfSBmcm9tIFwiLi9wcm92aWRlckhlbHBlci5qc1wiO1xuY29uc3QgT1BFTkFJX0FQSV9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbVwiO1xuZXhwb3J0IGNsYXNzIE9wZW5BSUNvbnZlcnNhdGlvbmFsVGFzayBleHRlbmRzIEJhc2VDb252ZXJzYXRpb25hbFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBQYXNzIGNsaWVudFNpZGVSb3V0aW5nT25seTogdHJ1ZSB0byB0aGUgY29uc3RydWN0b3JcbiAgICAgICAgc3VwZXIoXCJvcGVuYWlcIiwgT1BFTkFJX0FQSV9CQVNFX1VSTCwgdHJ1ZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXJzYXRpb25hbFRhc2siLCJPUEVOQUlfQVBJX0JBU0VfVVJMIiwiT3BlbkFJQ29udmVyc2F0aW9uYWxUYXNrIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/ovhcloud.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/ovhcloud.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OvhCloudConversationalTask: () => (/* binding */ OvhCloudConversationalTask),\n/* harmony export */   OvhCloudTextGenerationTask: () => (/* binding */ OvhCloudTextGenerationTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/**\n * See the registered mapping of HF model ID => OVHcloud model ID here:\n *\n * https://huggingface.co/api/partners/ovhcloud/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at OVHcloud and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to OVHcloud, please open an issue on the present repo\n * and we will tag OVHcloud team members.\n *\n * Thanks!\n */ \n\n\nconst OVHCLOUD_API_BASE_URL = \"https://oai.endpoints.kepler.ai.cloud.ovh.net\";\nclass OvhCloudConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"ovhcloud\", OVHCLOUD_API_BASE_URL);\n    }\n}\nclass OvhCloudTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseTextGenerationTask {\n    constructor(){\n        super(\"ovhcloud\", OVHCLOUD_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            model: params.model,\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_1__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters ? {\n                max_tokens: params.args.parameters.max_new_tokens,\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_1__.omit)(params.args.parameters, \"max_new_tokens\")\n            } : undefined,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"choices\" in response && Array.isArray(response?.choices) && typeof response?.model === \"string\") {\n            const completion = response.choices[0];\n            return {\n                generated_text: completion.text\n            };\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from OVHcloud text generation API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvb3ZoY2xvdWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDb0Y7QUFDN0M7QUFDMEI7QUFDbEUsTUFBTUksd0JBQXdCO0FBQ3ZCLE1BQU1DLG1DQUFtQ0wsc0VBQXNCQTtJQUNsRU0sYUFBYztRQUNWLEtBQUssQ0FBQyxZQUFZRjtJQUN0QjtBQUNKO0FBQ08sTUFBTUcsbUNBQW1DTixzRUFBc0JBO0lBQ2xFSyxhQUFjO1FBQ1YsS0FBSyxDQUFDLFlBQVlGO0lBQ3RCO0lBQ0FJLGVBQWVDLE1BQU0sRUFBRTtRQUNuQixPQUFPO1lBQ0hDLE9BQU9ELE9BQU9DLEtBQUs7WUFDbkIsR0FBR1Isb0RBQUlBLENBQUNPLE9BQU9FLElBQUksRUFBRTtnQkFBQztnQkFBVTthQUFhLENBQUM7WUFDOUMsR0FBSUYsT0FBT0UsSUFBSSxDQUFDQyxVQUFVLEdBQ3BCO2dCQUNFQyxZQUFZSixPQUFPRSxJQUFJLENBQUNDLFVBQVUsQ0FBQ0UsY0FBYztnQkFDakQsR0FBR1osb0RBQUlBLENBQUNPLE9BQU9FLElBQUksQ0FBQ0MsVUFBVSxFQUFFLGlCQUFpQjtZQUNyRCxJQUNFRyxTQUFTO1lBQ2ZDLFFBQVFQLE9BQU9FLElBQUksQ0FBQ00sTUFBTTtRQUM5QjtJQUNKO0lBQ0EsTUFBTUMsWUFBWUMsUUFBUSxFQUFFO1FBQ3hCLElBQUksT0FBT0EsYUFBYSxZQUNwQixhQUFhQSxZQUNiQyxNQUFNQyxPQUFPLENBQUNGLFVBQVVHLFlBQ3hCLE9BQU9ILFVBQVVULFVBQVUsVUFBVTtZQUNyQyxNQUFNYSxhQUFhSixTQUFTRyxPQUFPLENBQUMsRUFBRTtZQUN0QyxPQUFPO2dCQUNIRSxnQkFBZ0JELFdBQVdFLElBQUk7WUFDbkM7UUFDSjtRQUNBLE1BQU0sSUFBSXRCLDBFQUFrQ0EsQ0FBQztJQUNqRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvb3ZoY2xvdWQuanM/MzdhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlZSB0aGUgcmVnaXN0ZXJlZCBtYXBwaW5nIG9mIEhGIG1vZGVsIElEID0+IE9WSGNsb3VkIG1vZGVsIElEIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9hcGkvcGFydG5lcnMvb3ZoY2xvdWQvbW9kZWxzXG4gKlxuICogVGhpcyBpcyBhIHB1YmxpY2x5IGF2YWlsYWJsZSBtYXBwaW5nLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIHRyeSB0byBydW4gaW5mZXJlbmNlIGZvciBhIG5ldyBtb2RlbCBsb2NhbGx5IGJlZm9yZSBpdCdzIHJlZ2lzdGVyZWQgb24gaHVnZ2luZ2ZhY2UuY28sXG4gKiB5b3UgY2FuIGFkZCBpdCB0byB0aGUgZGljdGlvbmFyeSBcIkhBUkRDT0RFRF9NT0RFTF9JRF9NQVBQSU5HXCIgaW4gY29uc3RzLnRzLCBmb3IgZGV2IHB1cnBvc2VzLlxuICpcbiAqIC0gSWYgeW91IHdvcmsgYXQgT1ZIY2xvdWQgYW5kIHdhbnQgdG8gdXBkYXRlIHRoaXMgbWFwcGluZywgcGxlYXNlIHVzZSB0aGUgbW9kZWwgbWFwcGluZyBBUEkgd2UgcHJvdmlkZSBvbiBodWdnaW5nZmFjZS5jb1xuICogLSBJZiB5b3UncmUgYSBjb21tdW5pdHkgbWVtYmVyIGFuZCB3YW50IHRvIGFkZCBhIG5ldyBzdXBwb3J0ZWQgSEYgbW9kZWwgdG8gT1ZIY2xvdWQsIHBsZWFzZSBvcGVuIGFuIGlzc3VlIG9uIHRoZSBwcmVzZW50IHJlcG9cbiAqIGFuZCB3ZSB3aWxsIHRhZyBPVkhjbG91ZCB0ZWFtIG1lbWJlcnMuXG4gKlxuICogVGhhbmtzIVxuICovXG5pbXBvcnQgeyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrLCBCYXNlVGV4dEdlbmVyYXRpb25UYXNrIH0gZnJvbSBcIi4vcHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IG9taXQgfSBmcm9tIFwiLi4vdXRpbHMvb21pdC5qc1wiO1xuaW1wb3J0IHsgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmNvbnN0IE9WSENMT1VEX0FQSV9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9vYWkuZW5kcG9pbnRzLmtlcGxlci5haS5jbG91ZC5vdmgubmV0XCI7XG5leHBvcnQgY2xhc3MgT3ZoQ2xvdWRDb252ZXJzYXRpb25hbFRhc2sgZXh0ZW5kcyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJvdmhjbG91ZFwiLCBPVkhDTE9VRF9BUElfQkFTRV9VUkwpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPdmhDbG91ZFRleHRHZW5lcmF0aW9uVGFzayBleHRlbmRzIEJhc2VUZXh0R2VuZXJhdGlvblRhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIm92aGNsb3VkXCIsIE9WSENMT1VEX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxuICAgIHByZXBhcmVQYXlsb2FkKHBhcmFtcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kZWw6IHBhcmFtcy5tb2RlbCxcbiAgICAgICAgICAgIC4uLm9taXQocGFyYW1zLmFyZ3MsIFtcImlucHV0c1wiLCBcInBhcmFtZXRlcnNcIl0pLFxuICAgICAgICAgICAgLi4uKHBhcmFtcy5hcmdzLnBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgbWF4X3Rva2VuczogcGFyYW1zLmFyZ3MucGFyYW1ldGVycy5tYXhfbmV3X3Rva2VucyxcbiAgICAgICAgICAgICAgICAgICAgLi4ub21pdChwYXJhbXMuYXJncy5wYXJhbWV0ZXJzLCBcIm1heF9uZXdfdG9rZW5zXCIpLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICBwcm9tcHQ6IHBhcmFtcy5hcmdzLmlucHV0cyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgXCJjaG9pY2VzXCIgaW4gcmVzcG9uc2UgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzcG9uc2U/LmNob2ljZXMpICYmXG4gICAgICAgICAgICB0eXBlb2YgcmVzcG9uc2U/Lm1vZGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gcmVzcG9uc2UuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkX3RleHQ6IGNvbXBsZXRpb24udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IoXCJSZWNlaXZlZCBtYWxmb3JtZWQgcmVzcG9uc2UgZnJvbSBPVkhjbG91ZCB0ZXh0IGdlbmVyYXRpb24gQVBJXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlQ29udmVyc2F0aW9uYWxUYXNrIiwiQmFzZVRleHRHZW5lcmF0aW9uVGFzayIsIm9taXQiLCJJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yIiwiT1ZIQ0xPVURfQVBJX0JBU0VfVVJMIiwiT3ZoQ2xvdWRDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsIk92aENsb3VkVGV4dEdlbmVyYXRpb25UYXNrIiwicHJlcGFyZVBheWxvYWQiLCJwYXJhbXMiLCJtb2RlbCIsImFyZ3MiLCJwYXJhbWV0ZXJzIiwibWF4X3Rva2VucyIsIm1heF9uZXdfdG9rZW5zIiwidW5kZWZpbmVkIiwicHJvbXB0IiwiaW5wdXRzIiwiZ2V0UmVzcG9uc2UiLCJyZXNwb25zZSIsIkFycmF5IiwiaXNBcnJheSIsImNob2ljZXMiLCJjb21wbGV0aW9uIiwiZ2VuZXJhdGVkX3RleHQiLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/ovhcloud.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConversationalTask: () => (/* binding */ BaseConversationalTask),\n/* harmony export */   BaseTextGenerationTask: () => (/* binding */ BaseTextGenerationTask),\n/* harmony export */   TaskProviderHelper: () => (/* binding */ TaskProviderHelper)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _utils_toArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/toArray.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/toArray.js\");\n\n\n\n/**\n * Base class for task-specific provider helpers\n */ class TaskProviderHelper {\n    constructor(provider, baseUrl, clientSideRoutingOnly = false){\n        this.provider = provider;\n        this.baseUrl = baseUrl;\n        this.clientSideRoutingOnly = clientSideRoutingOnly;\n    }\n    /**\n     * Prepare the base URL for the request\n     */ makeBaseUrl(params) {\n        return params.authMethod !== \"provider-key\" ? `${_config_js__WEBPACK_IMPORTED_MODULE_0__.HF_ROUTER_URL}/${this.provider}` : this.baseUrl;\n    }\n    /**\n     * Prepare the body for the request\n     */ makeBody(params) {\n        if (\"data\" in params.args && !!params.args.data) {\n            return params.args.data;\n        }\n        return JSON.stringify(this.preparePayload(params));\n    }\n    /**\n     * Prepare the URL for the request\n     */ makeUrl(params) {\n        const baseUrl = this.makeBaseUrl(params);\n        const route = this.makeRoute(params).replace(/^\\/+/, \"\");\n        return `${baseUrl}/${route}`;\n    }\n    /**\n     * Prepare the headers for the request\n     */ prepareHeaders(params, isBinary) {\n        const headers = {};\n        if (params.authMethod !== \"none\") {\n            headers[\"Authorization\"] = `Bearer ${params.accessToken}`;\n        }\n        if (!isBinary) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n        return headers;\n    }\n}\n// BASE IMPLEMENTATIONS FOR COMMON PATTERNS\nclass BaseConversationalTask extends TaskProviderHelper {\n    constructor(provider, baseUrl, clientSideRoutingOnly = false){\n        super(provider, baseUrl, clientSideRoutingOnly);\n    }\n    makeRoute() {\n        return \"v1/chat/completions\";\n    }\n    preparePayload(params) {\n        return {\n            ...params.args,\n            model: params.model\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && Array.isArray(response?.choices) && typeof response?.created === \"number\" && typeof response?.id === \"string\" && typeof response?.model === \"string\" && /// Together.ai and Nebius do not output a system_fingerprint\n        (response.system_fingerprint === undefined || response.system_fingerprint === null || typeof response.system_fingerprint === \"string\") && typeof response?.usage === \"object\") {\n            return response;\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Expected ChatCompletionOutput\");\n    }\n}\nclass BaseTextGenerationTask extends TaskProviderHelper {\n    constructor(provider, baseUrl, clientSideRoutingOnly = false){\n        super(provider, baseUrl, clientSideRoutingOnly);\n    }\n    preparePayload(params) {\n        return {\n            ...params.args,\n            model: params.model\n        };\n    }\n    makeRoute() {\n        return \"v1/completions\";\n    }\n    async getResponse(response) {\n        const res = (0,_utils_toArray_js__WEBPACK_IMPORTED_MODULE_2__.toArray)(response);\n        if (Array.isArray(res) && res.length > 0 && res.every((x)=>typeof x === \"object\" && !!x && \"generated_text\" in x && typeof x.generated_text === \"string\")) {\n            return res[0];\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Expected Array<{generated_text: string}>\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/replicate.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/replicate.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReplicateImageToImageTask: () => (/* binding */ ReplicateImageToImageTask),\n/* harmony export */   ReplicateTextToImageTask: () => (/* binding */ ReplicateTextToImageTask),\n/* harmony export */   ReplicateTextToSpeechTask: () => (/* binding */ ReplicateTextToSpeechTask),\n/* harmony export */   ReplicateTextToVideoTask: () => (/* binding */ ReplicateTextToVideoTask)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/isUrl.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/isUrl.js\");\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/**\n * See the registered mapping of HF model ID => Replicate model ID here:\n *\n * https://huggingface.co/api/partners/replicate/models\n *\n * This is a publicly available mapping.\n *\n * If you want to try to run inference for a new model locally before it's registered on huggingface.co,\n * you can add it to the dictionary \"HARDCODED_MODEL_ID_MAPPING\" in consts.ts, for dev purposes.\n *\n * - If you work at Replicate and want to update this mapping, please use the model mapping API we provide on huggingface.co\n * - If you're a community member and want to add a new supported HF model to Replicate, please open an issue on the present repo\n * and we will tag Replicate team members.\n *\n * Thanks!\n */ \n\n\n\n\nclass ReplicateTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_3__.TaskProviderHelper {\n    constructor(url){\n        super(\"replicate\", url || \"https://api.replicate.com\");\n    }\n    makeRoute(params) {\n        if (params.model.includes(\":\")) {\n            return \"v1/predictions\";\n        }\n        return `v1/models/${params.model}/predictions`;\n    }\n    preparePayload(params) {\n        return {\n            input: {\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_2__.omit)(params.args, [\n                    \"inputs\",\n                    \"parameters\"\n                ]),\n                ...params.args.parameters,\n                prompt: params.args.inputs\n            },\n            version: params.model.includes(\":\") ? params.model.split(\":\")[1] : undefined\n        };\n    }\n    prepareHeaders(params, binary) {\n        const headers = {\n            Authorization: `Bearer ${params.accessToken}`,\n            Prefer: \"wait\"\n        };\n        if (!binary) {\n            headers[\"Content-Type\"] = \"application/json\";\n        }\n        return headers;\n    }\n    makeUrl(params) {\n        const baseUrl = this.makeBaseUrl(params);\n        if (params.model.includes(\":\")) {\n            return `${baseUrl}/v1/predictions`;\n        }\n        return `${baseUrl}/v1/models/${params.model}/predictions`;\n    }\n}\nclass ReplicateTextToImageTask extends ReplicateTask {\n    preparePayload(params) {\n        return {\n            input: {\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_2__.omit)(params.args, [\n                    \"inputs\",\n                    \"parameters\"\n                ]),\n                ...params.args.parameters,\n                prompt: params.args.inputs,\n                lora_weights: params.mapping?.adapter === \"lora\" && params.mapping.adapterWeightsPath ? `https://huggingface.co/${params.mapping.hfModelId}` : undefined\n            },\n            version: params.model.includes(\":\") ? params.model.split(\":\")[1] : undefined\n        };\n    }\n    async getResponse(res, url, headers, outputType) {\n        void url;\n        void headers;\n        if (typeof res === \"object\" && \"output\" in res && Array.isArray(res.output) && res.output.length > 0 && typeof res.output[0] === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...res\n                };\n            }\n            if (outputType === \"url\") {\n                return res.output[0];\n            }\n            const urlResponse = await fetch(res.output[0]);\n            return await urlResponse.blob();\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(\"Received malformed response from Replicate text-to-image API\");\n    }\n}\nclass ReplicateTextToSpeechTask extends ReplicateTask {\n    preparePayload(params) {\n        const payload = super.preparePayload(params);\n        const input = payload[\"input\"];\n        if (typeof input === \"object\" && input !== null && \"prompt\" in input) {\n            const inputObj = input;\n            inputObj[\"text\"] = inputObj[\"prompt\"];\n            delete inputObj[\"prompt\"];\n        }\n        return payload;\n    }\n    async getResponse(response) {\n        if (response instanceof Blob) {\n            return response;\n        }\n        if (response && typeof response === \"object\") {\n            if (\"output\" in response) {\n                if (typeof response.output === \"string\") {\n                    const urlResponse = await fetch(response.output);\n                    return await urlResponse.blob();\n                } else if (Array.isArray(response.output)) {\n                    const urlResponse = await fetch(response.output[0]);\n                    return await urlResponse.blob();\n                }\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(\"Received malformed response from Replicate text-to-speech API\");\n    }\n}\nclass ReplicateTextToVideoTask extends ReplicateTask {\n    async getResponse(response) {\n        if (typeof response === \"object\" && !!response && \"output\" in response && typeof response.output === \"string\" && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(response.output)) {\n            const urlResponse = await fetch(response.output);\n            return await urlResponse.blob();\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(\"Received malformed response from Replicate text-to-video API\");\n    }\n}\nclass ReplicateImageToImageTask extends ReplicateTask {\n    preparePayload(params) {\n        return {\n            input: {\n                ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_2__.omit)(params.args, [\n                    \"inputs\",\n                    \"parameters\"\n                ]),\n                ...params.args.parameters,\n                input_image: params.args.inputs,\n                lora_weights: params.mapping?.adapter === \"lora\" && params.mapping.adapterWeightsPath ? `https://huggingface.co/${params.mapping.hfModelId}` : undefined\n            },\n            version: params.model.includes(\":\") ? params.model.split(\":\")[1] : undefined\n        };\n    }\n    async preparePayloadAsync(args) {\n        const { inputs, ...restArgs } = args;\n        // Convert Blob to base64 data URL\n        const bytes = new Uint8Array(await inputs.arrayBuffer());\n        const base64 = (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_4__.base64FromBytes)(bytes);\n        const imageInput = `data:${inputs.type || \"image/jpeg\"};base64,${base64}`;\n        return {\n            ...restArgs,\n            inputs: imageInput\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && !!response && \"output\" in response && Array.isArray(response.output) && response.output.length > 0 && typeof response.output[0] === \"string\") {\n            const urlResponse = await fetch(response.output[0]);\n            return await urlResponse.blob();\n        }\n        if (typeof response === \"object\" && !!response && \"output\" in response && typeof response.output === \"string\" && (0,_lib_isUrl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(response.output)) {\n            const urlResponse = await fetch(response.output);\n            return await urlResponse.blob();\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(\"Received malformed response from Replicate image-to-image API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/replicate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/sambanova.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/sambanova.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SambanovaConversationalTask: () => (/* binding */ SambanovaConversationalTask),\n/* harmony export */   SambanovaFeatureExtractionTask: () => (/* binding */ SambanovaFeatureExtractionTask)\n/* harmony export */ });\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\nclass SambanovaConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationalTask {\n    constructor(){\n        super(\"sambanova\", \"https://api.sambanova.ai\");\n    }\n    preparePayload(params) {\n        const responseFormat = params.args.response_format;\n        if (responseFormat?.type === \"json_schema\" && responseFormat.json_schema) {\n            if (responseFormat.json_schema.strict ?? true) {\n                responseFormat.json_schema.strict = false;\n            }\n        }\n        const payload = super.preparePayload(params);\n        return payload;\n    }\n}\nclass SambanovaFeatureExtractionTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_0__.TaskProviderHelper {\n    constructor(){\n        super(\"sambanova\", \"https://api.sambanova.ai\");\n    }\n    makeRoute() {\n        return `/v1/embeddings`;\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"data\" in response && Array.isArray(response.data)) {\n            return response.data.map((item)=>item.embedding);\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InferenceClientProviderOutputError(\"Received malformed response from Sambanova feature-extraction (embeddings) API\");\n    }\n    preparePayload(params) {\n        return {\n            model: params.model,\n            input: params.args.inputs,\n            ...params.args\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvc2FtYmFub3ZhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUY7QUFDZjtBQUMzRCxNQUFNRyxvQ0FBb0NILHNFQUFzQkE7SUFDbkVJLGFBQWM7UUFDVixLQUFLLENBQUMsYUFBYTtJQUN2QjtJQUNBQyxlQUFlQyxNQUFNLEVBQUU7UUFDbkIsTUFBTUMsaUJBQWlCRCxPQUFPRSxJQUFJLENBQUNDLGVBQWU7UUFDbEQsSUFBSUYsZ0JBQWdCRyxTQUFTLGlCQUFpQkgsZUFBZUksV0FBVyxFQUFFO1lBQ3RFLElBQUlKLGVBQWVJLFdBQVcsQ0FBQ0MsTUFBTSxJQUFJLE1BQU07Z0JBQzNDTCxlQUFlSSxXQUFXLENBQUNDLE1BQU0sR0FBRztZQUN4QztRQUNKO1FBQ0EsTUFBTUMsVUFBVSxLQUFLLENBQUNSLGVBQWVDO1FBQ3JDLE9BQU9PO0lBQ1g7QUFDSjtBQUNPLE1BQU1DLHVDQUF1Q2Isa0VBQWtCQTtJQUNsRUcsYUFBYztRQUNWLEtBQUssQ0FBQyxhQUFhO0lBQ3ZCO0lBQ0FXLFlBQVk7UUFDUixPQUFPLENBQUMsY0FBYyxDQUFDO0lBQzNCO0lBQ0EsTUFBTUMsWUFBWUMsUUFBUSxFQUFFO1FBQ3hCLElBQUksT0FBT0EsYUFBYSxZQUFZLFVBQVVBLFlBQVlDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0csSUFBSSxHQUFHO1lBQ3BGLE9BQU9ILFNBQVNHLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLE9BQVNBLEtBQUtDLFNBQVM7UUFDckQ7UUFDQSxNQUFNLElBQUlyQiwwRUFBa0NBLENBQUM7SUFDakQ7SUFDQUcsZUFBZUMsTUFBTSxFQUFFO1FBQ25CLE9BQU87WUFDSGtCLE9BQU9sQixPQUFPa0IsS0FBSztZQUNuQkMsT0FBT25CLE9BQU9FLElBQUksQ0FBQ2tCLE1BQU07WUFDekIsR0FBR3BCLE9BQU9FLElBQUk7UUFDbEI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvc2FtYmFub3ZhLmpzPzQ1MWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUNvbnZlcnNhdGlvbmFsVGFzaywgVGFza1Byb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4vcHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5leHBvcnQgY2xhc3MgU2FtYmFub3ZhQ29udmVyc2F0aW9uYWxUYXNrIGV4dGVuZHMgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwic2FtYmFub3ZhXCIsIFwiaHR0cHM6Ly9hcGkuc2FtYmFub3ZhLmFpXCIpO1xuICAgIH1cbiAgICBwcmVwYXJlUGF5bG9hZChwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VGb3JtYXQgPSBwYXJhbXMuYXJncy5yZXNwb25zZV9mb3JtYXQ7XG4gICAgICAgIGlmIChyZXNwb25zZUZvcm1hdD8udHlwZSA9PT0gXCJqc29uX3NjaGVtYVwiICYmIHJlc3BvbnNlRm9ybWF0Lmpzb25fc2NoZW1hKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VGb3JtYXQuanNvbl9zY2hlbWEuc3RyaWN0ID8/IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZUZvcm1hdC5qc29uX3NjaGVtYS5zdHJpY3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gc3VwZXIucHJlcGFyZVBheWxvYWQocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNhbWJhbm92YUZlYXR1cmVFeHRyYWN0aW9uVGFzayBleHRlbmRzIFRhc2tQcm92aWRlckhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwic2FtYmFub3ZhXCIsIFwiaHR0cHM6Ly9hcGkuc2FtYmFub3ZhLmFpXCIpO1xuICAgIH1cbiAgICBtYWtlUm91dGUoKSB7XG4gICAgICAgIHJldHVybiBgL3YxL2VtYmVkZGluZ3NgO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlc3BvbnNlID09PSBcIm9iamVjdFwiICYmIFwiZGF0YVwiIGluIHJlc3BvbnNlICYmIEFycmF5LmlzQXJyYXkocmVzcG9uc2UuZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLm1hcCgoaXRlbSkgPT4gaXRlbS5lbWJlZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yKFwiUmVjZWl2ZWQgbWFsZm9ybWVkIHJlc3BvbnNlIGZyb20gU2FtYmFub3ZhIGZlYXR1cmUtZXh0cmFjdGlvbiAoZW1iZWRkaW5ncykgQVBJXCIpO1xuICAgIH1cbiAgICBwcmVwYXJlUGF5bG9hZChwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGVsOiBwYXJhbXMubW9kZWwsXG4gICAgICAgICAgICBpbnB1dDogcGFyYW1zLmFyZ3MuaW5wdXRzLFxuICAgICAgICAgICAgLi4ucGFyYW1zLmFyZ3MsXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXJzYXRpb25hbFRhc2siLCJUYXNrUHJvdmlkZXJIZWxwZXIiLCJJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yIiwiU2FtYmFub3ZhQ29udmVyc2F0aW9uYWxUYXNrIiwiY29uc3RydWN0b3IiLCJwcmVwYXJlUGF5bG9hZCIsInBhcmFtcyIsInJlc3BvbnNlRm9ybWF0IiwiYXJncyIsInJlc3BvbnNlX2Zvcm1hdCIsInR5cGUiLCJqc29uX3NjaGVtYSIsInN0cmljdCIsInBheWxvYWQiLCJTYW1iYW5vdmFGZWF0dXJlRXh0cmFjdGlvblRhc2siLCJtYWtlUm91dGUiLCJnZXRSZXNwb25zZSIsInJlc3BvbnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsIm1hcCIsIml0ZW0iLCJlbWJlZGRpbmciLCJtb2RlbCIsImlucHV0IiwiaW5wdXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/sambanova.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/scaleway.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/scaleway.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScalewayConversationalTask: () => (/* binding */ ScalewayConversationalTask),\n/* harmony export */   ScalewayFeatureExtractionTask: () => (/* binding */ ScalewayFeatureExtractionTask),\n/* harmony export */   ScalewayTextGenerationTask: () => (/* binding */ ScalewayTextGenerationTask)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n\n\nconst SCALEWAY_API_BASE_URL = \"https://api.scaleway.ai\";\nclass ScalewayConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationalTask {\n    constructor(){\n        super(\"scaleway\", SCALEWAY_API_BASE_URL);\n    }\n}\nclass ScalewayTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseTextGenerationTask {\n    constructor(){\n        super(\"scaleway\", SCALEWAY_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            model: params.model,\n            ...params.args,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && response !== null && \"choices\" in response && Array.isArray(response.choices) && response.choices.length > 0) {\n            const completion = response.choices[0];\n            if (typeof completion === \"object\" && !!completion && \"text\" in completion && completion.text && typeof completion.text === \"string\") {\n                return {\n                    generated_text: completion.text\n                };\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.InferenceClientProviderOutputError(\"Received malformed response from Scaleway text generation API\");\n    }\n}\nclass ScalewayFeatureExtractionTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"scaleway\", SCALEWAY_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            input: params.args.inputs,\n            model: params.model\n        };\n    }\n    makeRoute() {\n        return \"v1/embeddings\";\n    }\n    async getResponse(response) {\n        return response.data.map((item)=>item.embedding);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvc2NhbGV3YXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0U7QUFDdUM7QUFDekcsTUFBTUksd0JBQXdCO0FBQ3ZCLE1BQU1DLG1DQUFtQ0osc0VBQXNCQTtJQUNsRUssYUFBYztRQUNWLEtBQUssQ0FBQyxZQUFZRjtJQUN0QjtBQUNKO0FBQ08sTUFBTUcsbUNBQW1DSixzRUFBc0JBO0lBQ2xFRyxhQUFjO1FBQ1YsS0FBSyxDQUFDLFlBQVlGO0lBQ3RCO0lBQ0FJLGVBQWVDLE1BQU0sRUFBRTtRQUNuQixPQUFPO1lBQ0hDLE9BQU9ELE9BQU9DLEtBQUs7WUFDbkIsR0FBR0QsT0FBT0UsSUFBSTtZQUNkQyxRQUFRSCxPQUFPRSxJQUFJLENBQUNFLE1BQU07UUFDOUI7SUFDSjtJQUNBLE1BQU1DLFlBQVlDLFFBQVEsRUFBRTtRQUN4QixJQUFJLE9BQU9BLGFBQWEsWUFDcEJBLGFBQWEsUUFDYixhQUFhQSxZQUNiQyxNQUFNQyxPQUFPLENBQUNGLFNBQVNHLE9BQU8sS0FDOUJILFNBQVNHLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7WUFDN0IsTUFBTUMsYUFBYUwsU0FBU0csT0FBTyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxPQUFPRSxlQUFlLFlBQ3RCLENBQUMsQ0FBQ0EsY0FDRixVQUFVQSxjQUNWQSxXQUFXQyxJQUFJLElBQ2YsT0FBT0QsV0FBV0MsSUFBSSxLQUFLLFVBQVU7Z0JBQ3JDLE9BQU87b0JBQ0hDLGdCQUFnQkYsV0FBV0MsSUFBSTtnQkFDbkM7WUFDSjtRQUNKO1FBQ0EsTUFBTSxJQUFJckIsMEVBQWtDQSxDQUFDO0lBQ2pEO0FBQ0o7QUFDTyxNQUFNdUIsc0NBQXNDckIsa0VBQWtCQTtJQUNqRUksYUFBYztRQUNWLEtBQUssQ0FBQyxZQUFZRjtJQUN0QjtJQUNBSSxlQUFlQyxNQUFNLEVBQUU7UUFDbkIsT0FBTztZQUNIZSxPQUFPZixPQUFPRSxJQUFJLENBQUNFLE1BQU07WUFDekJILE9BQU9ELE9BQU9DLEtBQUs7UUFDdkI7SUFDSjtJQUNBZSxZQUFZO1FBQ1IsT0FBTztJQUNYO0lBQ0EsTUFBTVgsWUFBWUMsUUFBUSxFQUFFO1FBQ3hCLE9BQU9BLFNBQVNXLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLE9BQVNBLEtBQUtDLFNBQVM7SUFDckQ7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL3NjYWxld2F5LmpzP2IxOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IEJhc2VDb252ZXJzYXRpb25hbFRhc2ssIFRhc2tQcm92aWRlckhlbHBlciwgQmFzZVRleHRHZW5lcmF0aW9uVGFzayB9IGZyb20gXCIuL3Byb3ZpZGVySGVscGVyLmpzXCI7XG5jb25zdCBTQ0FMRVdBWV9BUElfQkFTRV9VUkwgPSBcImh0dHBzOi8vYXBpLnNjYWxld2F5LmFpXCI7XG5leHBvcnQgY2xhc3MgU2NhbGV3YXlDb252ZXJzYXRpb25hbFRhc2sgZXh0ZW5kcyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJzY2FsZXdheVwiLCBTQ0FMRVdBWV9BUElfQkFTRV9VUkwpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTY2FsZXdheVRleHRHZW5lcmF0aW9uVGFzayBleHRlbmRzIEJhc2VUZXh0R2VuZXJhdGlvblRhc2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcInNjYWxld2F5XCIsIFNDQUxFV0FZX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxuICAgIHByZXBhcmVQYXlsb2FkKHBhcmFtcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kZWw6IHBhcmFtcy5tb2RlbCxcbiAgICAgICAgICAgIC4uLnBhcmFtcy5hcmdzLFxuICAgICAgICAgICAgcHJvbXB0OiBwYXJhbXMuYXJncy5pbnB1dHMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGdldFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlICE9PSBudWxsICYmXG4gICAgICAgICAgICBcImNob2ljZXNcIiBpbiByZXNwb25zZSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXNwb25zZS5jaG9pY2VzKSAmJlxuICAgICAgICAgICAgcmVzcG9uc2UuY2hvaWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gcmVzcG9uc2UuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29tcGxldGlvbiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICEhY29tcGxldGlvbiAmJlxuICAgICAgICAgICAgICAgIFwidGV4dFwiIGluIGNvbXBsZXRpb24gJiZcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uLnRleHQgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29tcGxldGlvbi50ZXh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkX3RleHQ6IGNvbXBsZXRpb24udGV4dCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yKFwiUmVjZWl2ZWQgbWFsZm9ybWVkIHJlc3BvbnNlIGZyb20gU2NhbGV3YXkgdGV4dCBnZW5lcmF0aW9uIEFQSVwiKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2NhbGV3YXlGZWF0dXJlRXh0cmFjdGlvblRhc2sgZXh0ZW5kcyBUYXNrUHJvdmlkZXJIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcInNjYWxld2F5XCIsIFNDQUxFV0FZX0FQSV9CQVNFX1VSTCk7XG4gICAgfVxuICAgIHByZXBhcmVQYXlsb2FkKHBhcmFtcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHBhcmFtcy5hcmdzLmlucHV0cyxcbiAgICAgICAgICAgIG1vZGVsOiBwYXJhbXMubW9kZWwsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG1ha2VSb3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidjEvZW1iZWRkaW5nc1wiO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXNwb25zZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5tYXAoKGl0ZW0pID0+IGl0ZW0uZW1iZWRkaW5nKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvciIsIkJhc2VDb252ZXJzYXRpb25hbFRhc2siLCJUYXNrUHJvdmlkZXJIZWxwZXIiLCJCYXNlVGV4dEdlbmVyYXRpb25UYXNrIiwiU0NBTEVXQVlfQVBJX0JBU0VfVVJMIiwiU2NhbGV3YXlDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsIlNjYWxld2F5VGV4dEdlbmVyYXRpb25UYXNrIiwicHJlcGFyZVBheWxvYWQiLCJwYXJhbXMiLCJtb2RlbCIsImFyZ3MiLCJwcm9tcHQiLCJpbnB1dHMiLCJnZXRSZXNwb25zZSIsInJlc3BvbnNlIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hvaWNlcyIsImxlbmd0aCIsImNvbXBsZXRpb24iLCJ0ZXh0IiwiZ2VuZXJhdGVkX3RleHQiLCJTY2FsZXdheUZlYXR1cmVFeHRyYWN0aW9uVGFzayIsImlucHV0IiwibWFrZVJvdXRlIiwiZGF0YSIsIm1hcCIsIml0ZW0iLCJlbWJlZGRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/scaleway.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/together.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/providers/together.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TogetherConversationalTask: () => (/* binding */ TogetherConversationalTask),\n/* harmony export */   TogetherTextGenerationTask: () => (/* binding */ TogetherTextGenerationTask),\n/* harmony export */   TogetherTextToImageTask: () => (/* binding */ TogetherTextToImageTask)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n/* harmony import */ var _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providerHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/providerHelper.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nconst TOGETHER_API_BASE_URL = \"https://api.together.xyz\";\nclass TogetherConversationalTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationalTask {\n    constructor(){\n        super(\"together\", TOGETHER_API_BASE_URL);\n    }\n    preparePayload(params) {\n        const payload = super.preparePayload(params);\n        const response_format = payload.response_format;\n        if (response_format?.type === \"json_schema\" && response_format?.json_schema?.schema) {\n            payload.response_format = {\n                type: \"json_schema\",\n                schema: response_format.json_schema.schema\n            };\n        }\n        return payload;\n    }\n}\nclass TogetherTextGenerationTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.BaseTextGenerationTask {\n    constructor(){\n        super(\"together\", TOGETHER_API_BASE_URL);\n    }\n    preparePayload(params) {\n        return {\n            model: params.model,\n            ...params.args,\n            prompt: params.args.inputs\n        };\n    }\n    async getResponse(response) {\n        if (typeof response === \"object\" && \"choices\" in response && Array.isArray(response?.choices) && typeof response?.model === \"string\") {\n            const completion = response.choices[0];\n            return {\n                generated_text: completion.text\n            };\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Together text generation API\");\n    }\n}\nclass TogetherTextToImageTask extends _providerHelper_js__WEBPACK_IMPORTED_MODULE_1__.TaskProviderHelper {\n    constructor(){\n        super(\"together\", TOGETHER_API_BASE_URL);\n    }\n    makeRoute() {\n        return \"v1/images/generations\";\n    }\n    preparePayload(params) {\n        return {\n            ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(params.args, [\n                \"inputs\",\n                \"parameters\"\n            ]),\n            ...params.args.parameters,\n            prompt: params.args.inputs,\n            response_format: \"base64\",\n            model: params.model\n        };\n    }\n    async getResponse(response, url, headers, outputType) {\n        if (typeof response === \"object\" && \"data\" in response && Array.isArray(response.data) && response.data.length > 0 && \"b64_json\" in response.data[0] && typeof response.data[0].b64_json === \"string\") {\n            if (outputType === \"json\") {\n                return {\n                    ...response\n                };\n            }\n            const base64Data = response.data[0].b64_json;\n            if (outputType === \"url\") {\n                return `data:image/jpeg;base64,${base64Data}`;\n            }\n            return fetch(`data:image/jpeg;base64,${base64Data}`).then((res)=>res.blob());\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderOutputError(\"Received malformed response from Together text-to-image API\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9wcm92aWRlcnMvdG9nZXRoZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXdDO0FBQ2tFO0FBQ3hDO0FBQ2xFLE1BQU1LLHdCQUF3QjtBQUN2QixNQUFNQyxtQ0FBbUNMLHNFQUFzQkE7SUFDbEVNLGFBQWM7UUFDVixLQUFLLENBQUMsWUFBWUY7SUFDdEI7SUFDQUcsZUFBZUMsTUFBTSxFQUFFO1FBQ25CLE1BQU1DLFVBQVUsS0FBSyxDQUFDRixlQUFlQztRQUNyQyxNQUFNRSxrQkFBa0JELFFBQVFDLGVBQWU7UUFDL0MsSUFBSUEsaUJBQWlCQyxTQUFTLGlCQUFpQkQsaUJBQWlCRSxhQUFhQyxRQUFRO1lBQ2pGSixRQUFRQyxlQUFlLEdBQUc7Z0JBQ3RCQyxNQUFNO2dCQUNORSxRQUFRSCxnQkFBZ0JFLFdBQVcsQ0FBQ0MsTUFBTTtZQUM5QztRQUNKO1FBQ0EsT0FBT0o7SUFDWDtBQUNKO0FBQ08sTUFBTUssbUNBQW1DYixzRUFBc0JBO0lBQ2xFSyxhQUFjO1FBQ1YsS0FBSyxDQUFDLFlBQVlGO0lBQ3RCO0lBQ0FHLGVBQWVDLE1BQU0sRUFBRTtRQUNuQixPQUFPO1lBQ0hPLE9BQU9QLE9BQU9PLEtBQUs7WUFDbkIsR0FBR1AsT0FBT1EsSUFBSTtZQUNkQyxRQUFRVCxPQUFPUSxJQUFJLENBQUNFLE1BQU07UUFDOUI7SUFDSjtJQUNBLE1BQU1DLFlBQVlDLFFBQVEsRUFBRTtRQUN4QixJQUFJLE9BQU9BLGFBQWEsWUFDcEIsYUFBYUEsWUFDYkMsTUFBTUMsT0FBTyxDQUFDRixVQUFVRyxZQUN4QixPQUFPSCxVQUFVTCxVQUFVLFVBQVU7WUFDckMsTUFBTVMsYUFBYUosU0FBU0csT0FBTyxDQUFDLEVBQUU7WUFDdEMsT0FBTztnQkFDSEUsZ0JBQWdCRCxXQUFXRSxJQUFJO1lBQ25DO1FBQ0o7UUFDQSxNQUFNLElBQUl2QiwwRUFBa0NBLENBQUM7SUFDakQ7QUFDSjtBQUNPLE1BQU13QixnQ0FBZ0N6QixrRUFBa0JBO0lBQzNESSxhQUFjO1FBQ1YsS0FBSyxDQUFDLFlBQVlGO0lBQ3RCO0lBQ0F3QixZQUFZO1FBQ1IsT0FBTztJQUNYO0lBQ0FyQixlQUFlQyxNQUFNLEVBQUU7UUFDbkIsT0FBTztZQUNILEdBQUdULG9EQUFJQSxDQUFDUyxPQUFPUSxJQUFJLEVBQUU7Z0JBQUM7Z0JBQVU7YUFBYSxDQUFDO1lBQzlDLEdBQUdSLE9BQU9RLElBQUksQ0FBQ2EsVUFBVTtZQUN6QlosUUFBUVQsT0FBT1EsSUFBSSxDQUFDRSxNQUFNO1lBQzFCUixpQkFBaUI7WUFDakJLLE9BQU9QLE9BQU9PLEtBQUs7UUFDdkI7SUFDSjtJQUNBLE1BQU1JLFlBQVlDLFFBQVEsRUFBRVUsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRTtRQUNsRCxJQUFJLE9BQU9aLGFBQWEsWUFDcEIsVUFBVUEsWUFDVkMsTUFBTUMsT0FBTyxDQUFDRixTQUFTYSxJQUFJLEtBQzNCYixTQUFTYSxJQUFJLENBQUNDLE1BQU0sR0FBRyxLQUN2QixjQUFjZCxTQUFTYSxJQUFJLENBQUMsRUFBRSxJQUM5QixPQUFPYixTQUFTYSxJQUFJLENBQUMsRUFBRSxDQUFDRSxRQUFRLEtBQUssVUFBVTtZQUMvQyxJQUFJSCxlQUFlLFFBQVE7Z0JBQ3ZCLE9BQU87b0JBQUUsR0FBR1osUUFBUTtnQkFBQztZQUN6QjtZQUNBLE1BQU1nQixhQUFhaEIsU0FBU2EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0UsUUFBUTtZQUM1QyxJQUFJSCxlQUFlLE9BQU87Z0JBQ3RCLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRUksV0FBVyxDQUFDO1lBQ2pEO1lBQ0EsT0FBT0MsTUFBTSxDQUFDLHVCQUF1QixFQUFFRCxXQUFXLENBQUMsRUFBRUUsSUFBSSxDQUFDLENBQUNDLE1BQVFBLElBQUlDLElBQUk7UUFDL0U7UUFDQSxNQUFNLElBQUlyQywwRUFBa0NBLENBQUM7SUFDakQ7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vcHJvdmlkZXJzL3RvZ2V0aGVyLmpzP2M5ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb21pdCB9IGZyb20gXCIuLi91dGlscy9vbWl0LmpzXCI7XG5pbXBvcnQgeyBCYXNlQ29udmVyc2F0aW9uYWxUYXNrLCBCYXNlVGV4dEdlbmVyYXRpb25UYXNrLCBUYXNrUHJvdmlkZXJIZWxwZXIsIH0gZnJvbSBcIi4vcHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5jb25zdCBUT0dFVEhFUl9BUElfQkFTRV9VUkwgPSBcImh0dHBzOi8vYXBpLnRvZ2V0aGVyLnh5elwiO1xuZXhwb3J0IGNsYXNzIFRvZ2V0aGVyQ29udmVyc2F0aW9uYWxUYXNrIGV4dGVuZHMgQmFzZUNvbnZlcnNhdGlvbmFsVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwidG9nZXRoZXJcIiwgVE9HRVRIRVJfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgcHJlcGFyZVBheWxvYWQocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBzdXBlci5wcmVwYXJlUGF5bG9hZChwYXJhbXMpO1xuICAgICAgICBjb25zdCByZXNwb25zZV9mb3JtYXQgPSBwYXlsb2FkLnJlc3BvbnNlX2Zvcm1hdDtcbiAgICAgICAgaWYgKHJlc3BvbnNlX2Zvcm1hdD8udHlwZSA9PT0gXCJqc29uX3NjaGVtYVwiICYmIHJlc3BvbnNlX2Zvcm1hdD8uanNvbl9zY2hlbWE/LnNjaGVtYSkge1xuICAgICAgICAgICAgcGF5bG9hZC5yZXNwb25zZV9mb3JtYXQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJqc29uX3NjaGVtYVwiLFxuICAgICAgICAgICAgICAgIHNjaGVtYTogcmVzcG9uc2VfZm9ybWF0Lmpzb25fc2NoZW1hLnNjaGVtYSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRvZ2V0aGVyVGV4dEdlbmVyYXRpb25UYXNrIGV4dGVuZHMgQmFzZVRleHRHZW5lcmF0aW9uVGFzayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwidG9nZXRoZXJcIiwgVE9HRVRIRVJfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgcHJlcGFyZVBheWxvYWQocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlbDogcGFyYW1zLm1vZGVsLFxuICAgICAgICAgICAgLi4ucGFyYW1zLmFyZ3MsXG4gICAgICAgICAgICBwcm9tcHQ6IHBhcmFtcy5hcmdzLmlucHV0cyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgXCJjaG9pY2VzXCIgaW4gcmVzcG9uc2UgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzcG9uc2U/LmNob2ljZXMpICYmXG4gICAgICAgICAgICB0eXBlb2YgcmVzcG9uc2U/Lm1vZGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0aW9uID0gcmVzcG9uc2UuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkX3RleHQ6IGNvbXBsZXRpb24udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IoXCJSZWNlaXZlZCBtYWxmb3JtZWQgcmVzcG9uc2UgZnJvbSBUb2dldGhlciB0ZXh0IGdlbmVyYXRpb24gQVBJXCIpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUb2dldGhlclRleHRUb0ltYWdlVGFzayBleHRlbmRzIFRhc2tQcm92aWRlckhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwidG9nZXRoZXJcIiwgVE9HRVRIRVJfQVBJX0JBU0VfVVJMKTtcbiAgICB9XG4gICAgbWFrZVJvdXRlKCkge1xuICAgICAgICByZXR1cm4gXCJ2MS9pbWFnZXMvZ2VuZXJhdGlvbnNcIjtcbiAgICB9XG4gICAgcHJlcGFyZVBheWxvYWQocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5vbWl0KHBhcmFtcy5hcmdzLCBbXCJpbnB1dHNcIiwgXCJwYXJhbWV0ZXJzXCJdKSxcbiAgICAgICAgICAgIC4uLnBhcmFtcy5hcmdzLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBwcm9tcHQ6IHBhcmFtcy5hcmdzLmlucHV0cyxcbiAgICAgICAgICAgIHJlc3BvbnNlX2Zvcm1hdDogXCJiYXNlNjRcIixcbiAgICAgICAgICAgIG1vZGVsOiBwYXJhbXMubW9kZWwsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGdldFJlc3BvbnNlKHJlc3BvbnNlLCB1cmwsIGhlYWRlcnMsIG91dHB1dFR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgXCJkYXRhXCIgaW4gcmVzcG9uc2UgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVzcG9uc2UuZGF0YSkgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgXCJiNjRfanNvblwiIGluIHJlc3BvbnNlLmRhdGFbMF0gJiZcbiAgICAgICAgICAgIHR5cGVvZiByZXNwb25zZS5kYXRhWzBdLmI2NF9qc29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAob3V0cHV0VHlwZSA9PT0gXCJqc29uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5yZXNwb25zZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYmFzZTY0RGF0YSA9IHJlc3BvbnNlLmRhdGFbMF0uYjY0X2pzb247XG4gICAgICAgICAgICBpZiAob3V0cHV0VHlwZSA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBgZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwke2Jhc2U2NERhdGF9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmZXRjaChgZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwke2Jhc2U2NERhdGF9YCkudGhlbigocmVzKSA9PiByZXMuYmxvYigpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvcihcIlJlY2VpdmVkIG1hbGZvcm1lZCByZXNwb25zZSBmcm9tIFRvZ2V0aGVyIHRleHQtdG8taW1hZ2UgQVBJXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJvbWl0IiwiQmFzZUNvbnZlcnNhdGlvbmFsVGFzayIsIkJhc2VUZXh0R2VuZXJhdGlvblRhc2siLCJUYXNrUHJvdmlkZXJIZWxwZXIiLCJJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yIiwiVE9HRVRIRVJfQVBJX0JBU0VfVVJMIiwiVG9nZXRoZXJDb252ZXJzYXRpb25hbFRhc2siLCJjb25zdHJ1Y3RvciIsInByZXBhcmVQYXlsb2FkIiwicGFyYW1zIiwicGF5bG9hZCIsInJlc3BvbnNlX2Zvcm1hdCIsInR5cGUiLCJqc29uX3NjaGVtYSIsInNjaGVtYSIsIlRvZ2V0aGVyVGV4dEdlbmVyYXRpb25UYXNrIiwibW9kZWwiLCJhcmdzIiwicHJvbXB0IiwiaW5wdXRzIiwiZ2V0UmVzcG9uc2UiLCJyZXNwb25zZSIsIkFycmF5IiwiaXNBcnJheSIsImNob2ljZXMiLCJjb21wbGV0aW9uIiwiZ2VuZXJhdGVkX3RleHQiLCJ0ZXh0IiwiVG9nZXRoZXJUZXh0VG9JbWFnZVRhc2siLCJtYWtlUm91dGUiLCJwYXJhbWV0ZXJzIiwidXJsIiwiaGVhZGVycyIsIm91dHB1dFR5cGUiLCJkYXRhIiwibGVuZ3RoIiwiYjY0X2pzb24iLCJiYXNlNjREYXRhIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwiYmxvYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/providers/together.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/getInferenceSnippets.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/snippets/getInferenceSnippets.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInferenceSnippets: () => (/* binding */ getInferenceSnippets)\n/* harmony export */ });\n/* harmony import */ var _huggingface_jinja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @huggingface/jinja */ \"(rsc)/./node_modules/@huggingface/jinja/dist/index.js\");\n/* harmony import */ var _huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @huggingface/tasks */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/index.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n/* harmony import */ var _templates_exported_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./templates.exported.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/templates.exported.js\");\n/* harmony import */ var _lib_logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/config.js\");\n\n\n\n\n\n\n\nconst PYTHON_CLIENTS = [\n    \"huggingface_hub\",\n    \"fal_client\",\n    \"requests\",\n    \"openai\"\n];\nconst JS_CLIENTS = [\n    \"fetch\",\n    \"huggingface.js\",\n    \"openai\"\n];\nconst SH_CLIENTS = [\n    \"curl\"\n];\nconst CLIENTS = {\n    js: [\n        ...JS_CLIENTS\n    ],\n    python: [\n        ...PYTHON_CLIENTS\n    ],\n    sh: [\n        ...SH_CLIENTS\n    ]\n};\n// The \"auto\"-provider policy is only available through the HF SDKs (huggingface.js / huggingface_hub)\n// except for conversational tasks for which we have https://router.huggingface.co/v1/chat/completions\nconst CLIENTS_NON_CONVERSATIONAL_AUTO_POLICY = {\n    js: [\n        \"huggingface.js\"\n    ],\n    python: [\n        \"huggingface_hub\"\n    ]\n};\n// Helpers to find + load templates\nconst hasTemplate = (language, client, templateName)=>_templates_exported_js__WEBPACK_IMPORTED_MODULE_4__.templates[language]?.[client]?.[templateName] !== undefined;\nconst loadTemplate = (language, client, templateName)=>{\n    const template = _templates_exported_js__WEBPACK_IMPORTED_MODULE_4__.templates[language]?.[client]?.[templateName];\n    if (!template) {\n        throw new Error(`Template not found: ${language}/${client}/${templateName}`);\n    }\n    return (data)=>new _huggingface_jinja__WEBPACK_IMPORTED_MODULE_0__.Template(template).render({\n            ...data\n        });\n};\nconst snippetImportPythonInferenceClient = loadTemplate(\"python\", \"huggingface_hub\", \"importInferenceClient\");\nconst snippetImportRequests = loadTemplate(\"python\", \"requests\", \"importRequests\");\n// Needed for huggingface_hub basic snippets\nconst HF_PYTHON_METHODS = {\n    \"audio-classification\": \"audio_classification\",\n    \"audio-to-audio\": \"audio_to_audio\",\n    \"automatic-speech-recognition\": \"automatic_speech_recognition\",\n    \"document-question-answering\": \"document_question_answering\",\n    \"feature-extraction\": \"feature_extraction\",\n    \"fill-mask\": \"fill_mask\",\n    \"image-classification\": \"image_classification\",\n    \"image-segmentation\": \"image_segmentation\",\n    \"image-to-image\": \"image_to_image\",\n    \"image-to-text\": \"image_to_text\",\n    \"object-detection\": \"object_detection\",\n    \"question-answering\": \"question_answering\",\n    \"sentence-similarity\": \"sentence_similarity\",\n    summarization: \"summarization\",\n    \"table-question-answering\": \"table_question_answering\",\n    \"tabular-classification\": \"tabular_classification\",\n    \"tabular-regression\": \"tabular_regression\",\n    \"text-classification\": \"text_classification\",\n    \"text-generation\": \"text_generation\",\n    \"text-to-image\": \"text_to_image\",\n    \"text-to-speech\": \"text_to_speech\",\n    \"text-to-video\": \"text_to_video\",\n    \"token-classification\": \"token_classification\",\n    translation: \"translation\",\n    \"visual-question-answering\": \"visual_question_answering\",\n    \"zero-shot-classification\": \"zero_shot_classification\",\n    \"zero-shot-image-classification\": \"zero_shot_image_classification\"\n};\n// Needed for huggingface.js basic snippets\nconst HF_JS_METHODS = {\n    \"automatic-speech-recognition\": \"automaticSpeechRecognition\",\n    \"feature-extraction\": \"featureExtraction\",\n    \"fill-mask\": \"fillMask\",\n    \"image-classification\": \"imageClassification\",\n    \"question-answering\": \"questionAnswering\",\n    \"sentence-similarity\": \"sentenceSimilarity\",\n    summarization: \"summarization\",\n    \"table-question-answering\": \"tableQuestionAnswering\",\n    \"text-classification\": \"textClassification\",\n    \"text-generation\": \"textGeneration\",\n    \"token-classification\": \"tokenClassification\",\n    \"text-to-speech\": \"textToSpeech\",\n    translation: \"translation\"\n};\n// Placeholders to replace with env variable in snippets\n// little hack to support both direct requests and routing => routed requests should start with \"hf_\"\nconst ACCESS_TOKEN_ROUTING_PLACEHOLDER = \"hf_token_placeholder\";\nconst ACCESS_TOKEN_DIRECT_REQUEST_PLACEHOLDER = \"not_hf_token_placeholder\";\n// Snippet generators\nconst snippetGenerator = (templateName, inputPreparationFn)=>{\n    return (model, provider, inferenceProviderMapping, opts)=>{\n        const logger = (0,_lib_logger_js__WEBPACK_IMPORTED_MODULE_5__.getLogger)();\n        const providerModelId = inferenceProviderMapping?.providerId ?? model.id;\n        /// Hacky: hard-code conversational templates here\n        let task = model.pipeline_tag;\n        if (model.pipeline_tag && [\n            \"text-generation\",\n            \"image-text-to-text\"\n        ].includes(model.pipeline_tag) && model.tags.includes(\"conversational\")) {\n            templateName = opts?.streaming ? \"conversationalStream\" : \"conversational\";\n            inputPreparationFn = prepareConversationalInput;\n            task = \"conversational\";\n        }\n        let providerHelper;\n        try {\n            providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_2__.getProviderHelper)(provider, task);\n        } catch (e) {\n            logger.error(`Failed to get provider helper for ${provider} (${task})`, e);\n            return [];\n        }\n        const placeholder = opts?.directRequest ? ACCESS_TOKEN_DIRECT_REQUEST_PLACEHOLDER : ACCESS_TOKEN_ROUTING_PLACEHOLDER;\n        const accessTokenOrPlaceholder = opts?.accessToken ?? placeholder;\n        /// Prepare inputs + make request\n        const inputs = opts?.inputs ? {\n            inputs: opts.inputs\n        } : inputPreparationFn ? inputPreparationFn(model, opts) : {\n            inputs: (0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model)\n        };\n        const request = (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__.makeRequestOptionsFromResolvedModel)(providerModelId, providerHelper, {\n            accessToken: accessTokenOrPlaceholder,\n            provider,\n            endpointUrl: opts?.endpointUrl ?? (provider === \"auto\" ? _config_js__WEBPACK_IMPORTED_MODULE_6__.HF_ROUTER_AUTO_ENDPOINT : undefined),\n            ...inputs\n        }, inferenceProviderMapping, {\n            task,\n            billTo: opts?.billTo\n        });\n        /// Parse request.info.body if not a binary.\n        /// This is the body sent to the provider. Important for snippets with raw payload (e.g curl, requests, etc.)\n        let providerInputs = inputs;\n        const bodyAsObj = request.info.body;\n        if (typeof bodyAsObj === \"string\") {\n            try {\n                providerInputs = JSON.parse(bodyAsObj);\n            } catch (e) {\n                logger.error(\"Failed to parse body as JSON\", e);\n            }\n        }\n        // Inputs for the \"auto\" route is strictly the same as \"inputs\", except the model includes the provider\n        // If not \"auto\" route, use the providerInputs\n        const autoInputs = !opts?.endpointUrl && !opts?.directRequest ? provider !== \"auto\" ? {\n            ...inputs,\n            model: `${model.id}:${provider}`\n        } : {\n            ...inputs,\n            model: `${model.id}`\n        } : providerInputs;\n        /// Prepare template injection data\n        const params = {\n            accessToken: accessTokenOrPlaceholder,\n            authorizationHeader: request.info.headers?.Authorization,\n            baseUrl: task === \"conversational\" && !opts?.endpointUrl && !opts?.directRequest ? _config_js__WEBPACK_IMPORTED_MODULE_6__.HF_ROUTER_AUTO_ENDPOINT : removeSuffix(request.url, \"/chat/completions\"),\n            fullUrl: task === \"conversational\" && !opts?.endpointUrl && !opts?.directRequest ? _config_js__WEBPACK_IMPORTED_MODULE_6__.HF_ROUTER_AUTO_ENDPOINT + \"/chat/completions\" : request.url,\n            inputs: {\n                asObj: inputs,\n                asCurlString: formatBody(inputs, \"curl\"),\n                asJsonString: formatBody(inputs, \"json\"),\n                asPythonString: formatBody(inputs, \"python\"),\n                asTsString: formatBody(inputs, \"ts\")\n            },\n            providerInputs: {\n                asObj: providerInputs,\n                asCurlString: formatBody(providerInputs, \"curl\"),\n                asJsonString: formatBody(providerInputs, \"json\"),\n                asPythonString: formatBody(providerInputs, \"python\"),\n                asTsString: formatBody(providerInputs, \"ts\")\n            },\n            autoInputs: {\n                asObj: autoInputs,\n                asCurlString: formatBody(autoInputs, \"curl\"),\n                asJsonString: formatBody(autoInputs, \"json\"),\n                asPythonString: formatBody(autoInputs, \"python\"),\n                asTsString: formatBody(autoInputs, \"ts\")\n            },\n            model,\n            provider,\n            providerModelId: task === \"conversational\" && !opts?.endpointUrl && !opts?.directRequest ? provider !== \"auto\" ? `${model.id}:${provider}` // e.g. \"moonshotai/Kimi-K2-Instruct:groq\"\n             : model.id : providerModelId ?? model.id,\n            billTo: opts?.billTo,\n            endpointUrl: opts?.endpointUrl\n        };\n        /// Iterate over clients => check if a snippet exists => generate\n        const clients = provider === \"auto\" && task !== \"conversational\" ? CLIENTS_NON_CONVERSATIONAL_AUTO_POLICY : CLIENTS;\n        return _huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.inferenceSnippetLanguages.map((language)=>{\n            const langClients = clients[language] ?? [];\n            return langClients.map((client)=>{\n                if (!hasTemplate(language, client, templateName)) {\n                    return;\n                }\n                const template = loadTemplate(language, client, templateName);\n                if (client === \"huggingface_hub\" && templateName.includes(\"basic\")) {\n                    if (!(model.pipeline_tag && model.pipeline_tag in HF_PYTHON_METHODS)) {\n                        return;\n                    }\n                    params[\"methodName\"] = HF_PYTHON_METHODS[model.pipeline_tag];\n                }\n                if (client === \"huggingface.js\" && templateName.includes(\"basic\")) {\n                    if (!(model.pipeline_tag && model.pipeline_tag in HF_JS_METHODS)) {\n                        return;\n                    }\n                    params[\"methodName\"] = HF_JS_METHODS[model.pipeline_tag];\n                }\n                /// Generate snippet\n                let snippet = template(params).trim();\n                if (!snippet) {\n                    return;\n                }\n                /// Add import section separately\n                if (client === \"huggingface_hub\") {\n                    const importSection = snippetImportPythonInferenceClient({\n                        ...params\n                    });\n                    snippet = `${importSection}\\n\\n${snippet}`;\n                } else if (client === \"requests\") {\n                    const importSection = snippetImportRequests({\n                        ...params,\n                        importBase64: snippet.includes(\"base64\"),\n                        importJson: snippet.includes(\"json.\")\n                    });\n                    snippet = `${importSection}\\n\\n${snippet}`;\n                }\n                /// Replace access token placeholder\n                if (snippet.includes(placeholder)) {\n                    snippet = replaceAccessTokenPlaceholder(opts?.directRequest, placeholder, snippet, language, provider, opts?.endpointUrl);\n                }\n                /// Snippet is ready!\n                return {\n                    language,\n                    client: client,\n                    content: snippet\n                };\n            }).filter((snippet)=>snippet !== undefined);\n        }).flat();\n    };\n};\nconst prepareDocumentQuestionAnsweringInput = (model)=>{\n    return JSON.parse((0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model));\n};\nconst prepareImageToImageInput = (model)=>{\n    const data = JSON.parse((0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model));\n    return {\n        inputs: data.image,\n        parameters: {\n            prompt: data.prompt\n        }\n    };\n};\nconst prepareConversationalInput = (model, opts)=>{\n    return {\n        messages: opts?.messages ?? (0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model),\n        ...opts?.temperature ? {\n            temperature: opts?.temperature\n        } : undefined,\n        ...opts?.max_tokens ? {\n            max_tokens: opts?.max_tokens\n        } : undefined,\n        ...opts?.top_p ? {\n            top_p: opts?.top_p\n        } : undefined\n    };\n};\nconst prepareQuestionAnsweringInput = (model)=>{\n    const data = JSON.parse((0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model));\n    return {\n        question: data.question,\n        context: data.context\n    };\n};\nconst prepareTableQuestionAnsweringInput = (model)=>{\n    const data = JSON.parse((0,_huggingface_tasks__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model));\n    return {\n        query: data.query,\n        table: JSON.stringify(data.table)\n    };\n};\nconst snippets = {\n    \"audio-classification\": snippetGenerator(\"basicAudio\"),\n    \"audio-to-audio\": snippetGenerator(\"basicAudio\"),\n    \"automatic-speech-recognition\": snippetGenerator(\"basicAudio\"),\n    \"document-question-answering\": snippetGenerator(\"documentQuestionAnswering\", prepareDocumentQuestionAnsweringInput),\n    \"feature-extraction\": snippetGenerator(\"basic\"),\n    \"fill-mask\": snippetGenerator(\"basic\"),\n    \"image-classification\": snippetGenerator(\"basicImage\"),\n    \"image-segmentation\": snippetGenerator(\"basicImage\"),\n    \"image-text-to-text\": snippetGenerator(\"conversational\"),\n    \"image-to-image\": snippetGenerator(\"imageToImage\", prepareImageToImageInput),\n    \"image-to-text\": snippetGenerator(\"basicImage\"),\n    \"image-to-video\": snippetGenerator(\"imageToVideo\", prepareImageToImageInput),\n    \"object-detection\": snippetGenerator(\"basicImage\"),\n    \"question-answering\": snippetGenerator(\"questionAnswering\", prepareQuestionAnsweringInput),\n    \"sentence-similarity\": snippetGenerator(\"basic\"),\n    summarization: snippetGenerator(\"basic\"),\n    \"tabular-classification\": snippetGenerator(\"tabular\"),\n    \"tabular-regression\": snippetGenerator(\"tabular\"),\n    \"table-question-answering\": snippetGenerator(\"tableQuestionAnswering\", prepareTableQuestionAnsweringInput),\n    \"text-classification\": snippetGenerator(\"basic\"),\n    \"text-generation\": snippetGenerator(\"basic\"),\n    \"text-to-audio\": snippetGenerator(\"textToAudio\"),\n    \"text-to-image\": snippetGenerator(\"textToImage\"),\n    \"text-to-speech\": snippetGenerator(\"textToSpeech\"),\n    \"text-to-video\": snippetGenerator(\"textToVideo\"),\n    \"token-classification\": snippetGenerator(\"basic\"),\n    translation: snippetGenerator(\"basic\"),\n    \"zero-shot-classification\": snippetGenerator(\"zeroShotClassification\"),\n    \"zero-shot-image-classification\": snippetGenerator(\"zeroShotImageClassification\")\n};\nfunction getInferenceSnippets(model, provider, inferenceProviderMapping, opts) {\n    return model.pipeline_tag && model.pipeline_tag in snippets ? snippets[model.pipeline_tag]?.(model, provider, inferenceProviderMapping, opts) ?? [] : [];\n}\n// String manipulation helpers\nfunction formatBody(obj, format) {\n    switch(format){\n        case \"curl\":\n            return indentString(formatBody(obj, \"json\"));\n        case \"json\":\n            /// Hacky: remove outer brackets to make is extendable in templates\n            return JSON.stringify(obj, null, 4).split(\"\\n\").slice(1, -1).join(\"\\n\");\n        case \"python\":\n            return indentString(Object.entries(obj).map(([key, value])=>{\n                const formattedValue = JSON.stringify(value, null, 4).replace(/\"/g, '\"');\n                return `${key}=${formattedValue},`;\n            }).join(\"\\n\"));\n        case \"ts\":\n            /// Hacky: remove outer brackets to make is extendable in templates\n            return formatTsObject(obj).split(\"\\n\").slice(1, -1).join(\"\\n\");\n        default:\n            throw new Error(`Unsupported format: ${format}`);\n    }\n}\nfunction formatTsObject(obj, depth) {\n    depth = depth ?? 0;\n    /// Case int, boolean, string, etc.\n    if (typeof obj !== \"object\" || obj === null) {\n        return JSON.stringify(obj);\n    }\n    /// Case array\n    if (Array.isArray(obj)) {\n        const items = obj.map((item)=>{\n            const formatted = formatTsObject(item, depth + 1);\n            return `${\" \".repeat(4 * (depth + 1))}${formatted},`;\n        }).join(\"\\n\");\n        return `[\\n${items}\\n${\" \".repeat(4 * depth)}]`;\n    }\n    /// Case mapping\n    const entries = Object.entries(obj);\n    const lines = entries.map(([key, value])=>{\n        const formattedValue = formatTsObject(value, depth + 1);\n        const keyStr = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key) ? key : `\"${key}\"`;\n        return `${\" \".repeat(4 * (depth + 1))}${keyStr}: ${formattedValue},`;\n    }).join(\"\\n\");\n    return `{\\n${lines}\\n${\" \".repeat(4 * depth)}}`;\n}\nfunction indentString(str) {\n    return str.split(\"\\n\").map((line)=>\" \".repeat(4) + line).join(\"\\n\");\n}\nfunction removeSuffix(str, suffix) {\n    return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;\n}\nfunction replaceAccessTokenPlaceholder(directRequest, placeholder, snippet, language, provider, endpointUrl) {\n    // If \"opts.accessToken\" is not set, the snippets are generated with a placeholder.\n    // Once snippets are rendered, we replace the placeholder with code to fetch the access token from an environment variable.\n    // Determine if HF_TOKEN or specific provider token should be used\n    const useHfToken = !endpointUrl && // custom endpointUrl => use a generic API_TOKEN\n    (provider == \"hf-inference\" || // hf-inference provider => use $HF_TOKEN\n    !directRequest && // if explicit directRequest => use provider-specific token\n    (snippet.includes(\"InferenceClient\") || // using a client => use $HF_TOKEN\n    snippet.includes(\"https://router.huggingface.co\"))); // explicit routed request => use $HF_TOKEN\n    const accessTokenEnvVar = useHfToken ? \"HF_TOKEN\" // e.g. routed request or hf-inference\n     : endpointUrl ? \"API_TOKEN\" : provider.toUpperCase().replace(\"-\", \"_\") + \"_API_KEY\"; // e.g. \"REPLICATE_API_KEY\"\n    // Replace the placeholder with the env variable\n    if (language === \"sh\") {\n        snippet = snippet.replace(`'Authorization: Bearer ${placeholder}'`, `\"Authorization: Bearer $${accessTokenEnvVar}\"` // e.g. \"Authorization: Bearer $HF_TOKEN\"\n        );\n    } else if (language === \"python\") {\n        snippet = \"import os\\n\" + snippet;\n        snippet = snippet.replace(`\"${placeholder}\"`, `os.environ[\"${accessTokenEnvVar}\"]` // e.g. os.environ[\"HF_TOKEN\")\n        );\n        snippet = snippet.replace(`\"Bearer ${placeholder}\"`, `f\"Bearer {os.environ['${accessTokenEnvVar}']}\"` // e.g. f\"Bearer {os.environ['HF_TOKEN']}\"\n        );\n        snippet = snippet.replace(`\"Key ${placeholder}\"`, `f\"Key {os.environ['${accessTokenEnvVar}']}\"` // e.g. f\"Key {os.environ['FAL_AI_API_KEY']}\"\n        );\n        snippet = snippet.replace(`\"X-Key ${placeholder}\"`, `f\"X-Key {os.environ['${accessTokenEnvVar}']}\"` // e.g. f\"X-Key {os.environ['BLACK_FOREST_LABS_API_KEY']}\"\n        );\n    } else if (language === \"js\") {\n        snippet = snippet.replace(`\"${placeholder}\"`, `process.env.${accessTokenEnvVar}` // e.g. process.env.HF_TOKEN\n        );\n        snippet = snippet.replace(`Authorization: \"Bearer ${placeholder}\",`, `Authorization: \\`Bearer $\\{process.env.${accessTokenEnvVar}}\\`,` // e.g. Authorization: `Bearer ${process.env.HF_TOKEN}`,\n        );\n        snippet = snippet.replace(`Authorization: \"Key ${placeholder}\",`, `Authorization: \\`Key $\\{process.env.${accessTokenEnvVar}}\\`,` // e.g. Authorization: `Key ${process.env.FAL_AI_API_KEY}`,\n        );\n        snippet = snippet.replace(`Authorization: \"X-Key ${placeholder}\",`, `Authorization: \\`X-Key $\\{process.env.${accessTokenEnvVar}}\\`,` // e.g. Authorization: `X-Key ${process.env.BLACK_FOREST_LABS_AI_API_KEY}`,\n        );\n    }\n    return snippet;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/getInferenceSnippets.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/snippets/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInferenceSnippets: () => (/* reexport safe */ _getInferenceSnippets_js__WEBPACK_IMPORTED_MODULE_0__.getInferenceSnippets)\n/* harmony export */ });\n/* harmony import */ var _getInferenceSnippets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getInferenceSnippets.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/getInferenceSnippets.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS9zbmlwcGV0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vc25pcHBldHMvaW5kZXguanM/MzJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBnZXRJbmZlcmVuY2VTbmlwcGV0cyB9IGZyb20gXCIuL2dldEluZmVyZW5jZVNuaXBwZXRzLmpzXCI7XG4iXSwibmFtZXMiOlsiZ2V0SW5mZXJlbmNlU25pcHBldHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/templates.exported.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/snippets/templates.exported.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   templates: () => (/* binding */ templates)\n/* harmony export */ });\n// Generated file - do not edit directly\nconst templates = {\n    \"js\": {\n        \"fetch\": {\n            \"basic\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n            \"basicAudio\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"audio/flac\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n            \"basicImage\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"image/jpeg\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n            \"conversational\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ \\n{{ autoInputs.asTsString }}\\n}).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n            \"imageToImage\": 'const image = fs.readFileSync(\"{{inputs.asObj.inputs}}\");\\n\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"image/jpeg\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: {\\n\t\t\t\t\"inputs\": `data:image/png;base64,${data.inputs.encode(\"base64\")}`,\\n\t\t\t\t\"parameters\": data.parameters,\\n\t\t\t}\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ \\n\tinputs: image,\\n\tparameters: {\\n\t\tprompt: \"{{ inputs.asObj.parameters.prompt }}\",\\n\t}\\n}).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n            \"imageToVideo\": 'const image = fs.readFileSync(\"{{inputs.asObj.inputs}}\");\\n\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"image/jpeg\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: {\\n\t\t\t\t\"image_url\": `data:image/png;base64,${data.image.encode(\"base64\")}`,\\n\t\t\t\t\"prompt\": data.prompt,\\n\t\t\t}\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({\\n\t\"image\": image,\\n\t\"prompt\": \"{{inputs.asObj.parameters.prompt}}\",\\n}).then((response) => {\\n    // Use video\\n});',\n            \"textToAudio\": '{% if model.library_name == \"transformers\" %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.blob();\\n    return result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    // Returns a byte object of the Audio wavform. Use it directly!\\n});\\n{% else %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});\\n{% endif %} ',\n            \"textToImage\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.blob();\\n\treturn result;\\n}\\n\\n\\nquery({ {{ providerInputs.asTsString }} }).then((response) => {\\n    // Use image\\n});',\n            \"textToSpeech\": '{% if model.library_name == \"transformers\" %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n{% if billTo %}\\n\t\t\t\t\"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.blob();\\n    return result;\\n}\\n\\nquery({ text: {{ inputs.asObj.inputs }} }).then((response) => {\\n    // Returns a byte object of the Audio wavform. Use it directly!\\n});\\n{% else %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({ text: {{ inputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});\\n{% endif %} ',\n            \"zeroShotClassification\": 'async function query(data) {\\n    const response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n        {\\n            headers: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n                \"Content-Type\": \"application/json\",\\n{% if billTo %}\\n                \"X-HF-Bill-To\": \"{{ billTo }}\",\\n{% endif %}         },\\n            method: \"POST\",\\n            body: JSON.stringify(data),\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\n    inputs: {{ providerInputs.asObj.inputs }},\\n    parameters: { candidate_labels: [\"refund\", \"legal\", \"faq\"] }\\n}).then((response) => {\\n    console.log(JSON.stringify(response));\\n});'\n        },\n        \"huggingface.js\": {\n            \"basic\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst output = await client.{{ methodName }}({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n\tmodel: \"{{ model.id }}\",\\n\tinputs: {{ inputs.asObj.inputs }},\\n\tprovider: \"{{ provider }}\",\\n}{% if billTo %}, {\\n\tbillTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\nconsole.log(output);',\n            \"basicAudio\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync({{inputs.asObj.inputs}});\\n\\nconst output = await client.{{ methodName }}({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n\tdata,\\n\tmodel: \"{{ model.id }}\",\\n\tprovider: \"{{ provider }}\",\\n}{% if billTo %}, {\\n\tbillTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\nconsole.log(output);',\n            \"basicImage\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync({{inputs.asObj.inputs}});\\n\\nconst output = await client.{{ methodName }}({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n\tdata,\\n\tmodel: \"{{ model.id }}\",\\n\tprovider: \"{{ provider }}\",\\n}{% if billTo %}, {\\n\tbillTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\nconsole.log(output);',\n            \"conversational\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst chatCompletion = await client.chatCompletion({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n{{ inputs.asTsString }}\\n}{% if billTo %}, {\\n    billTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\nconsole.log(chatCompletion.choices[0].message);',\n            \"conversationalStream\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nlet out = \"\";\\n\\nconst stream = client.chatCompletionStream({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n{{ inputs.asTsString }}\\n}{% if billTo %}, {\\n    billTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\nfor await (const chunk of stream) {\\n\tif (chunk.choices && chunk.choices.length > 0) {\\n\t\tconst newContent = chunk.choices[0].delta.content;\\n\t\tout += newContent;\\n\t\tconsole.log(newContent);\\n\t}\\n}',\n            \"imageToImage\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync(\"{{inputs.asObj.inputs}}\");\\n\\nconst image = await client.imageToImage({\\n{% if endpointUrl %}\\n\tendpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n\tprovider: \"{{provider}}\",\\n\tmodel: \"{{model.id}}\",\\n\tinputs: data,\\n\tparameters: { prompt: \"{{inputs.asObj.parameters.prompt}}\", },\\n}{% if billTo %}, {\\n\tbillTo: \"{{ billTo }}\",\\n}{% endif %});\\n/// Use the generated image (it\\'s a Blob)\\n// For example, you can save it to a file or display it in an image element\\n',\n            \"imageToVideo\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync(\"{{inputs.asObj.inputs}}\");\\n\\nconst video = await client.imageToVideo({\\n{% if endpointUrl %}\\n\tendpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n\tprovider: \"{{provider}}\",\\n\tmodel: \"{{model.id}}\",\\n\tinputs: data,\\n\tparameters: { prompt: \"{{inputs.asObj.parameters.prompt}}\", },\\n}{% if billTo %}, {\\n\tbillTo: \"{{ billTo }}\",\\n}{% endif %});\\n\\n/// Use the generated video (it\\'s a Blob)\\n// For example, you can save it to a file or display it in a video element\\n',\n            \"textToImage\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst image = await client.textToImage({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n\tinputs: {{ inputs.asObj.inputs }},\\n\tparameters: { num_inference_steps: 5 },\\n}{% if billTo %}, {\\n    billTo: \"{{ billTo }}\",\\n}{% endif %});\\n/// Use the generated image (it\\'s a Blob)',\n            \"textToSpeech\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst audio = await client.textToSpeech({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n\tinputs: {{ inputs.asObj.inputs }},\\n}{% if billTo %}, {\\n    billTo: \"{{ billTo }}\",\\n}{% endif %});\\n// Use the generated audio (it\\'s a Blob)',\n            \"textToVideo\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst video = await client.textToVideo({\\n{% if endpointUrl %}\\n    endpointUrl: \"{{ endpointUrl }}\",\\n{% endif %}\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n\tinputs: {{ inputs.asObj.inputs }},\\n}{% if billTo %}, {\\n    billTo: \"{{ billTo }}\",\\n}{% endif %});\\n// Use the generated video (it\\'s a Blob)'\n        },\n        \"openai\": {\n            \"conversational\": 'import { OpenAI } from \"openai\";\\n\\nconst client = new OpenAI({\\n\tbaseURL: \"{{ baseUrl }}\",\\n\tapiKey: \"{{ accessToken }}\",\\n{% if billTo %}\\n\tdefaultHeaders: {\\n\t\t\"X-HF-Bill-To\": \"{{ billTo }}\" \\n\t}\\n{% endif %}\\n});\\n\\nconst chatCompletion = await client.chat.completions.create({\\n\tmodel: \"{{ providerModelId }}\",\\n{{ inputs.asTsString }}\\n});\\n\\nconsole.log(chatCompletion.choices[0].message);',\n            \"conversationalStream\": 'import { OpenAI } from \"openai\";\\n\\nconst client = new OpenAI({\\n\tbaseURL: \"{{ baseUrl }}\",\\n\tapiKey: \"{{ accessToken }}\",\\n{% if billTo %}\\n    defaultHeaders: {\\n\t\t\"X-HF-Bill-To\": \"{{ billTo }}\" \\n\t}\\n{% endif %}\\n});\\n\\nconst stream = await client.chat.completions.create({\\n    model: \"{{ providerModelId }}\",\\n{{ inputs.asTsString }}\\n    stream: true,\\n});\\n\\nfor await (const chunk of stream) {\\n    process.stdout.write(chunk.choices[0]?.delta?.content || \"\");\\n}'\n        }\n    },\n    \"python\": {\n        \"fal_client\": {\n            \"imageToImage\": '{%if provider == \"fal-ai\" %}\\nimport fal_client\\nimport base64\\n\\ndef on_queue_update(update):\\n    if isinstance(update, fal_client.InProgress):\\n        for log in update.logs:\\n           print(log[\"message\"])\\n\\nwith open(\"{{inputs.asObj.inputs}}\", \"rb\") as image_file:\\n    image_base_64 = base64.b64encode(image_file.read()).decode(\\'utf-8\\')\\n\\nresult = fal_client.subscribe(\\n    \"fal-ai/flux-kontext/dev\",\\n    arguments={\\n        \"prompt\": f\"data:image/png;base64,{image_base_64}\",\\n        \"image_url\": \"{{ providerInputs.asObj.inputs }}\",\\n    },\\n    with_logs=True,\\n    on_queue_update=on_queue_update,\\n)\\nprint(result)\\n{%endif%}\\n',\n            \"imageToVideo\": '{%if provider == \"fal-ai\" %}\\nimport fal_client\\nimport base64\\n\\ndef on_queue_update(update):\\n    if isinstance(update, fal_client.InProgress):\\n        for log in update.logs:\\n           print(log[\"message\"])\\n\\nwith open(\"{{inputs.asObj.inputs}}\", \"rb\") as image_file:\\n    image_base_64 = base64.b64encode(image_file.read()).decode(\\'utf-8\\')\\n\\nresult = fal_client.subscribe(\\n    \"{{model.id}}\",\\n    arguments={\\n        \"image_url\": f\"data:image/png;base64,{image_base_64}\",\\n        \"prompt\": \"{{inputs.asObj.parameters.prompt}}\",\\n    },\\n    with_logs=True,\\n    on_queue_update=on_queue_update,\\n)\\nprint(result)\\n{%endif%}\\n',\n            \"textToImage\": '{% if provider == \"fal-ai\" %}\\nimport fal_client\\n\\n{% if providerInputs.asObj.loras is defined and providerInputs.asObj.loras != none %}\\nresult = fal_client.subscribe(\\n    \"{{ providerModelId }}\",\\n    arguments={\\n        \"prompt\": {{ inputs.asObj.inputs }},\\n        \"loras\":{{ providerInputs.asObj.loras | tojson }},\\n    },\\n)\\n{% else %}\\nresult = fal_client.subscribe(\\n    \"{{ providerModelId }}\",\\n    arguments={\\n        \"prompt\": {{ inputs.asObj.inputs }},\\n    },\\n)\\n{% endif %} \\nprint(result)\\n{% endif %} '\n        },\n        \"huggingface_hub\": {\n            \"basic\": 'result = client.{{ methodName }}(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n)',\n            \"basicAudio\": 'output = client.{{ methodName }}({{ inputs.asObj.inputs }}, model=\"{{ model.id }}\")',\n            \"basicImage\": 'output = client.{{ methodName }}({{ inputs.asObj.inputs }}, model=\"{{ model.id }}\")',\n            \"conversational\": 'completion = client.chat.completions.create(\\n    model=\"{{ model.id }}\",\\n{{ inputs.asPythonString }}\\n)\\n\\nprint(completion.choices[0].message) ',\n            \"conversationalStream\": 'stream = client.chat.completions.create(\\n    model=\"{{ model.id }}\",\\n{{ inputs.asPythonString }}\\n    stream=True,\\n)\\n\\nfor chunk in stream:\\n    print(chunk.choices[0].delta.content, end=\"\") ',\n            \"documentQuestionAnswering\": 'output = client.document_question_answering(\\n    \"{{ inputs.asObj.image }}\",\\n    question=\"{{ inputs.asObj.question }}\",\\n    model=\"{{ model.id }}\",\\n) ',\n            \"imageToImage\": 'with open(\"{{ inputs.asObj.inputs }}\", \"rb\") as image_file:\\n   input_image = image_file.read()\\n\\n# output is a PIL.Image object\\nimage = client.image_to_image(\\n    input_image,\\n    prompt=\"{{ inputs.asObj.parameters.prompt }}\",\\n    model=\"{{ model.id }}\",\\n)\\n',\n            \"imageToVideo\": 'with open(\"{{ inputs.asObj.inputs }}\", \"rb\") as image_file:\\n   input_image = image_file.read()\\n\\nvideo = client.image_to_video(\\n    input_image,\\n    prompt=\"{{ inputs.asObj.parameters.prompt }}\",\\n    model=\"{{ model.id }}\",\\n) \\n',\n            \"importInferenceClient\": 'from huggingface_hub import InferenceClient\\n\\nclient = InferenceClient(\\n{% if endpointUrl %}\\n    base_url=\"{{ baseUrl }}\",\\n{% endif %}\\n    provider=\"{{ provider }}\",\\n    api_key=\"{{ accessToken }}\",\\n{% if billTo %}\\n    bill_to=\"{{ billTo }}\",\\n{% endif %}\\n)',\n            \"questionAnswering\": 'answer = client.question_answering(\\n    question=\"{{ inputs.asObj.question }}\",\\n    context=\"{{ inputs.asObj.context }}\",\\n    model=\"{{ model.id }}\",\\n) ',\n            \"tableQuestionAnswering\": 'answer = client.table_question_answering(\\n    query=\"{{ inputs.asObj.query }}\",\\n    table={{ inputs.asObj.table }},\\n    model=\"{{ model.id }}\",\\n) ',\n            \"textToImage\": '# output is a PIL.Image object\\nimage = client.text_to_image(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n) ',\n            \"textToSpeech\": '# audio is returned as bytes\\naudio = client.text_to_speech(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n) \\n',\n            \"textToVideo\": 'video = client.text_to_video(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n) '\n        },\n        \"openai\": {\n            \"conversational\": 'from openai import OpenAI\\n\\nclient = OpenAI(\\n    base_url=\"{{ baseUrl }}\",\\n    api_key=\"{{ accessToken }}\",\\n{% if billTo %}\\n    default_headers={\\n        \"X-HF-Bill-To\": \"{{ billTo }}\"\\n    }\\n{% endif %}\\n)\\n\\ncompletion = client.chat.completions.create(\\n    model=\"{{ providerModelId }}\",\\n{{ inputs.asPythonString }}\\n)\\n\\nprint(completion.choices[0].message) ',\n            \"conversationalStream\": 'from openai import OpenAI\\n\\nclient = OpenAI(\\n    base_url=\"{{ baseUrl }}\",\\n    api_key=\"{{ accessToken }}\",\\n{% if billTo %}\\n    default_headers={\\n        \"X-HF-Bill-To\": \"{{ billTo }}\"\\n    }\\n{% endif %}\\n)\\n\\nstream = client.chat.completions.create(\\n    model=\"{{ providerModelId }}\",\\n{{ inputs.asPythonString }}\\n    stream=True,\\n)\\n\\nfor chunk in stream:\\n    print(chunk.choices[0].delta.content, end=\"\")'\n        },\n        \"requests\": {\n            \"basic\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n}) ',\n            \"basicAudio\": 'def query(filename):\\n    with open(filename, \"rb\") as f:\\n        data = f.read()\\n    response = requests.post(API_URL, headers={\"Content-Type\": \"audio/flac\", **headers}, data=data)\\n    return response.json()\\n\\noutput = query({{ providerInputs.asObj.inputs }})',\n            \"basicImage\": 'def query(filename):\\n    with open(filename, \"rb\") as f:\\n        data = f.read()\\n    response = requests.post(API_URL, headers={\"Content-Type\": \"image/jpeg\", **headers}, data=data)\\n    return response.json()\\n\\noutput = query({{ providerInputs.asObj.inputs }})',\n            \"conversational\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\nresponse = query({\\n{{ autoInputs.asJsonString }}\\n})\\n\\nprint(response[\"choices\"][0][\"message\"])',\n            \"conversationalStream\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload, stream=True)\\n    for line in response.iter_lines():\\n        if not line.startswith(b\"data:\"):\\n            continue\\n        if line.strip() == b\"data: [DONE]\":\\n            return\\n        yield json.loads(line.decode(\"utf-8\").lstrip(\"data:\").rstrip(\"/n\"))\\n\\nchunks = query({\\n{{ autoInputs.asJsonString }},\\n    \"stream\": True,\\n})\\n\\nfor chunk in chunks:\\n    print(chunk[\"choices\"][0][\"delta\"][\"content\"], end=\"\")',\n            \"documentQuestionAnswering\": 'def query(payload):\\n    with open(payload[\"image\"], \"rb\") as f:\\n        img = f.read()\\n        payload[\"image\"] = base64.b64encode(img).decode(\"utf-8\")\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {\\n        \"image\": \"{{ inputs.asObj.image }}\",\\n        \"question\": \"{{ inputs.asObj.question }}\",\\n    },\\n}) ',\n            \"imageToImage\": '\\ndef query(payload):\\n    with open(payload[\"inputs\"], \"rb\") as f:\\n        img = f.read()\\n        payload[\"inputs\"] = base64.b64encode(img).decode(\"utf-8\")\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nimage_bytes = query({\\n{{ providerInputs.asJsonString }}\\n})\\n\\n# You can access the image with PIL.Image for example\\nimport io\\nfrom PIL import Image\\nimage = Image.open(io.BytesIO(image_bytes)) ',\n            \"imageToVideo\": '\\ndef query(payload):\\n    with open(payload[\"inputs\"], \"rb\") as f:\\n        img = f.read()\\n        payload[\"inputs\"] = base64.b64encode(img).decode(\"utf-8\")\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nvideo_bytes = query({\\n{{ inputs.asJsonString }}\\n})\\n',\n            \"importRequests\": '{% if importBase64 %}\\nimport base64\\n{% endif %}\\n{% if importJson %}\\nimport json\\n{% endif %}\\nimport requests\\n\\nAPI_URL = \"{{ fullUrl }}\"\\nheaders = {\\n    \"Authorization\": \"{{ authorizationHeader }}\",\\n{% if billTo %}\\n    \"X-HF-Bill-To\": \"{{ billTo }}\"\\n{% endif %}\\n}',\n            \"tabular\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nresponse = query({\\n    \"inputs\": {\\n        \"data\": {{ providerInputs.asObj.inputs }}\\n    },\\n}) ',\n            \"textToAudio\": '{% if model.library_name == \"transformers\" %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\naudio_bytes = query({\\n    \"inputs\": {{ inputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio_bytes)\\n{% else %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\naudio, sampling_rate = query({\\n    \"inputs\": {{ inputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio, rate=sampling_rate)\\n{% endif %} ',\n            \"textToImage\": '{% if provider == \"hf-inference\" %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nimage_bytes = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n})\\n\\n# You can access the image with PIL.Image for example\\nimport io\\nfrom PIL import Image\\nimage = Image.open(io.BytesIO(image_bytes))\\n{% endif %}',\n            \"textToSpeech\": '{% if model.library_name == \"transformers\" %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\naudio_bytes = query({\\n    \"text\": {{ inputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio_bytes)\\n{% else %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\naudio, sampling_rate = query({\\n    \"text\": {{ inputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio, rate=sampling_rate)\\n{% endif %} ',\n            \"zeroShotClassification\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n    \"parameters\": {\"candidate_labels\": [\"refund\", \"legal\", \"faq\"]},\\n}) ',\n            \"zeroShotImageClassification\": 'def query(data):\\n    with open(data[\"image_path\"], \"rb\") as f:\\n        img = f.read()\\n    payload={\\n        \"parameters\": data[\"parameters\"],\\n        \"inputs\": base64.b64encode(img).decode(\"utf-8\")\\n    }\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"image_path\": {{ providerInputs.asObj.inputs }},\\n    \"parameters\": {\"candidate_labels\": [\"cat\", \"dog\", \"llama\"]},\\n}) '\n        }\n    },\n    \"sh\": {\n        \"curl\": {\n            \"basic\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: application/json' \\\\\\n{% if billTo %}\\n    -H 'X-HF-Bill-To: {{ billTo }}' \\\\\\n{% endif %}\\n    -d '{\\n{{ providerInputs.asCurlString }}\\n    }'\",\n            \"basicAudio\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: audio/flac' \\\\\\n{% if billTo %}\\n    -H 'X-HF-Bill-To: {{ billTo }}' \\\\\\n{% endif %}\\n    --data-binary @{{ providerInputs.asObj.inputs }}\",\n            \"basicImage\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: image/jpeg' \\\\\\n{% if billTo %}\\n    -H 'X-HF-Bill-To: {{ billTo }}' \\\\\\n{% endif %}\\n    --data-binary @{{ providerInputs.asObj.inputs }}\",\n            \"conversational\": \"curl {{ fullUrl }} \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: application/json' \\\\\\n{% if billTo %}\\n    -H 'X-HF-Bill-To: {{ billTo }}' \\\\\\n{% endif %}\\n    -d '{\\n{{ autoInputs.asCurlString }},\\n        \\\"stream\\\": false\\n    }'\",\n            \"conversationalStream\": \"curl {{ fullUrl }} \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: application/json' \\\\\\n{% if billTo %}\\n    -H 'X-HF-Bill-To: {{ billTo }}' \\\\\\n{% endif %}\\n    -d '{\\n{{ autoInputs.asCurlString }},\\n        \\\"stream\\\": true\\n    }'\",\n            \"zeroShotClassification\": 'curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -d \\'{\"inputs\": {{ providerInputs.asObj.inputs }}, \"parameters\": {\"candidate_labels\": [\"refund\", \"legal\", \"faq\"]}}\\' \\\\\\n    -H \\'Content-Type: application/json\\' \\\\\\n    -H \\'Authorization: {{ authorizationHeader }}\\'\\n{% if billTo %} \\\\\\n    -H \\'X-HF-Bill-To: {{ billTo }}\\'\\n{% endif %}'\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/snippets/templates.exported.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioClassification.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioClassification.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audioClassification: () => (/* binding */ audioClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/utils.js\");\n\n\n\n\n/**\n * This task reads some audio input and outputs the likelihood of classes.\n * Recommended model:  superb/hubert-large-superb-er\n */ async function audioClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"audio-classification\");\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preparePayload)(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"audio-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdWRpb0NsYXNzaWZpY2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUNWO0FBQzVDOzs7Q0FHQyxHQUNNLGVBQWVJLG9CQUFvQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ25ELE1BQU1DLFdBQVcsTUFBTVAsb0ZBQWVBLENBQUNLLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlQsNEVBQWlCQSxDQUFDTSxVQUFVO0lBQ25ELE1BQU1JLFVBQVVSLHlEQUFjQSxDQUFDRTtJQUMvQixNQUFNLEVBQUVPLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1YLCtEQUFZQSxDQUFDUyxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWUSxNQUFNO0lBQ1Y7SUFDQSxPQUFPSixlQUFlSyxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdWRpb0NsYXNzaWZpY2F0aW9uLmpzPzhiYTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbmltcG9ydCB7IHByZXBhcmVQYXlsb2FkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8qKlxuICogVGhpcyB0YXNrIHJlYWRzIHNvbWUgYXVkaW8gaW5wdXQgYW5kIG91dHB1dHMgdGhlIGxpa2VsaWhvb2Qgb2YgY2xhc3Nlcy5cbiAqIFJlY29tbWVuZGVkIG1vZGVsOiAgc3VwZXJiL2h1YmVydC1sYXJnZS1zdXBlcmItZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF1ZGlvQ2xhc3NpZmljYXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiYXVkaW8tY2xhc3NpZmljYXRpb25cIik7XG4gICAgY29uc3QgcGF5bG9hZCA9IHByZXBhcmVQYXlsb2FkKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJhdWRpby1jbGFzc2lmaWNhdGlvblwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwicHJlcGFyZVBheWxvYWQiLCJhdWRpb0NsYXNzaWZpY2F0aW9uIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsInBheWxvYWQiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioToAudio.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioToAudio.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audioToAudio: () => (/* binding */ audioToAudio)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/utils.js\");\n\n\n\n\n/**\n * This task reads some audio input and outputs one or multiple audio files.\n * Example model: speechbrain/sepformer-wham does audio source separation.\n */ async function audioToAudio(args, options) {\n    const model = \"inputs\" in args ? args.model : undefined;\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, model);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"audio-to-audio\");\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preparePayload)(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"audio-to-audio\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdWRpb1RvQXVkaW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ1Y7QUFDNUM7OztDQUdDLEdBQ00sZUFBZUksYUFBYUMsSUFBSSxFQUFFQyxPQUFPO0lBQzVDLE1BQU1DLFFBQVEsWUFBWUYsT0FBT0EsS0FBS0UsS0FBSyxHQUFHQztJQUM5QyxNQUFNQyxXQUFXLE1BQU1ULG9GQUFlQSxDQUFDSyxLQUFLSSxRQUFRLEVBQUVGO0lBQ3RELE1BQU1HLGlCQUFpQlQsNEVBQWlCQSxDQUFDUSxVQUFVO0lBQ25ELE1BQU1FLFVBQVVSLHlEQUFjQSxDQUFDRTtJQUMvQixNQUFNLEVBQUVPLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1YLCtEQUFZQSxDQUFDUyxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWUSxNQUFNO0lBQ1Y7SUFDQSxPQUFPSixlQUFlSyxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdWRpb1RvQXVkaW8uanM/NjE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuaW1wb3J0IHsgcHJlcGFyZVBheWxvYWQgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSBhdWRpbyBpbnB1dCBhbmQgb3V0cHV0cyBvbmUgb3IgbXVsdGlwbGUgYXVkaW8gZmlsZXMuXG4gKiBFeGFtcGxlIG1vZGVsOiBzcGVlY2hicmFpbi9zZXBmb3JtZXItd2hhbSBkb2VzIGF1ZGlvIHNvdXJjZSBzZXBhcmF0aW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXVkaW9Ub0F1ZGlvKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtb2RlbCA9IFwiaW5wdXRzXCIgaW4gYXJncyA/IGFyZ3MubW9kZWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgbW9kZWwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiYXVkaW8tdG8tYXVkaW9cIik7XG4gICAgY29uc3QgcGF5bG9hZCA9IHByZXBhcmVQYXlsb2FkKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJhdWRpby10by1hdWRpb1wiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwicHJlcGFyZVBheWxvYWQiLCJhdWRpb1RvQXVkaW8iLCJhcmdzIiwib3B0aW9ucyIsIm1vZGVsIiwidW5kZWZpbmVkIiwicHJvdmlkZXIiLCJwcm92aWRlckhlbHBlciIsInBheWxvYWQiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioToAudio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/automaticSpeechRecognition.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/audio/automaticSpeechRecognition.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   automaticSpeechRecognition: () => (/* binding */ automaticSpeechRecognition)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\n\n/**\n * This task reads some audio input and outputs the said words within the audio files.\n * Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self\n */ async function automaticSpeechRecognition(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"automatic-speech-recognition\");\n    const payload = await providerHelper.preparePayloadAsync(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"automatic-speech-recognition\"\n    });\n    const isValidOutput = typeof res?.text === \"string\";\n    if (!isValidOutput) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.InferenceClientProviderOutputError(\"Received malformed response from automatic-speech-recognition API\");\n    }\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdXRvbWF0aWNTcGVlY2hSZWNvZ25pdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDZTtBQUNyRTs7O0NBR0MsR0FDTSxlQUFlSSwyQkFBMkJDLElBQUksRUFBRUMsT0FBTztJQUMxRCxNQUFNQyxXQUFXLE1BQU1QLG9GQUFlQSxDQUFDSyxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJULDRFQUFpQkEsQ0FBQ00sVUFBVTtJQUNuRCxNQUFNSSxVQUFVLE1BQU1ELGVBQWVFLG1CQUFtQixDQUFDUDtJQUN6RCxNQUFNLEVBQUVRLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1aLCtEQUFZQSxDQUFDUyxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWUyxNQUFNO0lBQ1Y7SUFDQSxNQUFNQyxnQkFBZ0IsT0FBT0YsS0FBS0csU0FBUztJQUMzQyxJQUFJLENBQUNELGVBQWU7UUFDaEIsTUFBTSxJQUFJYiwwRUFBa0NBLENBQUM7SUFDakQ7SUFDQSxPQUFPTyxlQUFlUSxXQUFXLENBQUNKO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby9hdXRvbWF0aWNTcGVlY2hSZWNvZ25pdGlvbi5qcz9hY2ViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBJbmZlcmVuY2VDbGllbnRQcm92aWRlck91dHB1dEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9ycy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSBhdWRpbyBpbnB1dCBhbmQgb3V0cHV0cyB0aGUgc2FpZCB3b3JkcyB3aXRoaW4gdGhlIGF1ZGlvIGZpbGVzLlxuICogUmVjb21tZW5kZWQgbW9kZWwgKGVuZ2xpc2ggbGFuZ3VhZ2UpOiBmYWNlYm9vay93YXYydmVjMi1sYXJnZS05NjBoLWx2NjAtc2VsZlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0b21hdGljU3BlZWNoUmVjb2duaXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiKTtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgcHJvdmlkZXJIZWxwZXIucHJlcGFyZVBheWxvYWRBc3luYyhhcmdzKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlcyB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KHBheWxvYWQsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiLFxuICAgIH0pO1xuICAgIGNvbnN0IGlzVmFsaWRPdXRwdXQgPSB0eXBlb2YgcmVzPy50ZXh0ID09PSBcInN0cmluZ1wiO1xuICAgIGlmICghaXNWYWxpZE91dHB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgSW5mZXJlbmNlQ2xpZW50UHJvdmlkZXJPdXRwdXRFcnJvcihcIlJlY2VpdmVkIG1hbGZvcm1lZCByZXNwb25zZSBmcm9tIGF1dG9tYXRpYy1zcGVlY2gtcmVjb2duaXRpb24gQVBJXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsIkluZmVyZW5jZUNsaWVudFByb3ZpZGVyT3V0cHV0RXJyb3IiLCJhdXRvbWF0aWNTcGVlY2hSZWNvZ25pdGlvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJwYXlsb2FkIiwicHJlcGFyZVBheWxvYWRBc3luYyIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiaXNWYWxpZE91dHB1dCIsInRleHQiLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/automaticSpeechRecognition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/textToSpeech.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/audio/textToSpeech.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textToSpeech: () => (/* binding */ textToSpeech)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * This task synthesize an audio of a voice pronouncing a given text.\n * Recommended model: espnet/kan-bayashi_ljspeech_vits\n */ async function textToSpeech(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-to-speech\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-to-speech\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby90ZXh0VG9TcGVlY2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7OztDQUdDLEdBQ00sZUFBZUcsYUFBYUMsSUFBSSxFQUFFQyxPQUFPO0lBQzVDLE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE1BQU0sRUFBRUksTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVQsK0RBQVlBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUMzRCxHQUFHSixPQUFPO1FBQ1ZPLE1BQU07SUFDVjtJQUNBLE9BQU9ILGVBQWVJLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL2F1ZGlvL3RleHRUb1NwZWVjaC5qcz8xMTMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIFRoaXMgdGFzayBzeW50aGVzaXplIGFuIGF1ZGlvIG9mIGEgdm9pY2UgcHJvbm91bmNpbmcgYSBnaXZlbiB0ZXh0LlxuICogUmVjb21tZW5kZWQgbW9kZWw6IGVzcG5ldC9rYW4tYmF5YXNoaV9sanNwZWVjaF92aXRzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0VG9TcGVlY2goYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwidGV4dC10by1zcGVlY2hcIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInRleHQtdG8tc3BlZWNoXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJ0ZXh0VG9TcGVlY2giLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwiZGF0YSIsInJlcyIsInRhc2siLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/textToSpeech.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/audio/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preparePayload: () => (/* binding */ preparePayload)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n\nfunction preparePayload(args) {\n    return \"data\" in args ? args : {\n        ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(args, \"inputs\"),\n        data: args.inputs\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9hdWRpby91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNwQyxTQUFTQyxlQUFlQyxJQUFJO0lBQy9CLE9BQU8sVUFBVUEsT0FDWEEsT0FDQTtRQUNFLEdBQUdGLG9EQUFJQSxDQUFDRSxNQUFNLFNBQVM7UUFDdkJDLE1BQU1ELEtBQUtFLE1BQU07SUFDckI7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvYXVkaW8vdXRpbHMuanM/ZWU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvbWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL29taXQuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlUGF5bG9hZChhcmdzKSB7XG4gICAgcmV0dXJuIFwiZGF0YVwiIGluIGFyZ3NcbiAgICAgICAgPyBhcmdzXG4gICAgICAgIDoge1xuICAgICAgICAgICAgLi4ub21pdChhcmdzLCBcImlucHV0c1wiKSxcbiAgICAgICAgICAgIGRhdGE6IGFyZ3MuaW5wdXRzLFxuICAgICAgICB9O1xufVxuIl0sIm5hbWVzIjpbIm9taXQiLCJwcmVwYXJlUGF5bG9hZCIsImFyZ3MiLCJkYXRhIiwiaW5wdXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/request.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/custom/request.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _lib_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n\n\n\n\n/**\n * Primitive to make custom calls to the inference provider\n * @deprecated Use specific task functions instead. This function will be removed in a future version.\n */ async function request(args, options) {\n    const logger = (0,_lib_logger_js__WEBPACK_IMPORTED_MODULE_3__.getLogger)();\n    logger.warn(\"The request method is deprecated and will be removed in a future version of huggingface.js. Use specific task functions instead.\");\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, options?.task);\n    const result = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, options);\n    return result.data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdXN0b20vcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDTjtBQUNoRDs7O0NBR0MsR0FDTSxlQUFlSSxRQUFRQyxJQUFJLEVBQUVDLE9BQU87SUFDdkMsTUFBTUMsU0FBU0oseURBQVNBO0lBQ3hCSSxPQUFPQyxJQUFJLENBQUM7SUFDWixNQUFNQyxXQUFXLE1BQU1ULG9GQUFlQSxDQUFDSyxLQUFLSSxRQUFRLEVBQUVKLEtBQUtLLEtBQUssRUFBRUwsS0FBS00sV0FBVztJQUNsRixNQUFNQyxpQkFBaUJYLDRFQUFpQkEsQ0FBQ1EsVUFBVUgsU0FBU087SUFDNUQsTUFBTUMsU0FBUyxNQUFNWiwrREFBWUEsQ0FBQ0csTUFBTU8sZ0JBQWdCTjtJQUN4RCxPQUFPUSxPQUFPQyxJQUFJO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdXN0b20vcmVxdWVzdC5qcz9mMWM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwiLi4vLi4vbGliL2xvZ2dlci5qc1wiO1xuLyoqXG4gKiBQcmltaXRpdmUgdG8gbWFrZSBjdXN0b20gY2FsbHMgdG8gdGhlIGluZmVyZW5jZSBwcm92aWRlclxuICogQGRlcHJlY2F0ZWQgVXNlIHNwZWNpZmljIHRhc2sgZnVuY3Rpb25zIGluc3RlYWQuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoKTtcbiAgICBsb2dnZXIud2FybihcIlRoZSByZXF1ZXN0IG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBodWdnaW5nZmFjZS5qcy4gVXNlIHNwZWNpZmljIHRhc2sgZnVuY3Rpb25zIGluc3RlYWQuXCIpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIG9wdGlvbnM/LnRhc2spO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwiZ2V0TG9nZ2VyIiwicmVxdWVzdCIsImFyZ3MiLCJvcHRpb25zIiwibG9nZ2VyIiwid2FybiIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwidGFzayIsInJlc3VsdCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/streamingRequest.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/custom/streamingRequest.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   streamingRequest: () => (/* binding */ streamingRequest)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _lib_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/logger.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/logger.js\");\n\n\n\n\n/**\n * Primitive to make custom inference calls that expect server-sent events, and returns the response through a generator\n * @deprecated Use specific task functions instead. This function will be removed in a future version.\n */ async function* streamingRequest(args, options) {\n    const logger = (0,_lib_logger_js__WEBPACK_IMPORTED_MODULE_3__.getLogger)();\n    logger.warn(\"The streamingRequest method is deprecated and will be removed in a future version of huggingface.js. Use specific task functions instead.\");\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, options?.task);\n    yield* (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerStreamingRequest)(args, providerHelper, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdXN0b20vc3RyZWFtaW5nUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ0o7QUFDZjtBQUNoRDs7O0NBR0MsR0FDTSxnQkFBZ0JJLGlCQUFpQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ2pELE1BQU1DLFNBQVNKLHlEQUFTQTtJQUN4QkksT0FBT0MsSUFBSSxDQUFDO0lBQ1osTUFBTUMsV0FBVyxNQUFNVCxvRkFBZUEsQ0FBQ0ssS0FBS0ksUUFBUSxFQUFFSixLQUFLSyxLQUFLLEVBQUVMLEtBQUtNLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCWCw0RUFBaUJBLENBQUNRLFVBQVVILFNBQVNPO0lBQzVELE9BQU9YLHdFQUFxQkEsQ0FBQ0csTUFBTU8sZ0JBQWdCTjtBQUN2RCIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvY3VzdG9tL3N0cmVhbWluZ1JlcXVlc3QuanM/MDMzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclN0cmVhbWluZ1JlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcIi4uLy4uL2xpYi9sb2dnZXIuanNcIjtcbi8qKlxuICogUHJpbWl0aXZlIHRvIG1ha2UgY3VzdG9tIGluZmVyZW5jZSBjYWxscyB0aGF0IGV4cGVjdCBzZXJ2ZXItc2VudCBldmVudHMsIGFuZCByZXR1cm5zIHRoZSByZXNwb25zZSB0aHJvdWdoIGEgZ2VuZXJhdG9yXG4gKiBAZGVwcmVjYXRlZCBVc2Ugc3BlY2lmaWMgdGFzayBmdW5jdGlvbnMgaW5zdGVhZC4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBzdHJlYW1pbmdSZXF1ZXN0KGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoKTtcbiAgICBsb2dnZXIud2FybihcIlRoZSBzdHJlYW1pbmdSZXF1ZXN0IG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBodWdnaW5nZmFjZS5qcy4gVXNlIHNwZWNpZmljIHRhc2sgZnVuY3Rpb25zIGluc3RlYWQuXCIpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIG9wdGlvbnM/LnRhc2spO1xuICAgIHlpZWxkKiBpbm5lclN0cmVhbWluZ1JlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIG9wdGlvbnMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJTdHJlYW1pbmdSZXF1ZXN0IiwiZ2V0TG9nZ2VyIiwic3RyZWFtaW5nUmVxdWVzdCIsImFyZ3MiLCJvcHRpb25zIiwibG9nZ2VyIiwid2FybiIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwidGFzayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/streamingRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageClassification.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageClassification.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageClassification: () => (/* binding */ imageClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js\");\n\n\n\n\n/**\n * This task reads some image input and outputs the likelihood of classes.\n * Recommended model: google/vit-base-patch16-224\n */ async function imageClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"image-classification\");\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preparePayload)(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"image-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZUNsYXNzaWZpY2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUNWO0FBQzVDOzs7Q0FHQyxHQUNNLGVBQWVJLG9CQUFvQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ25ELE1BQU1DLFdBQVcsTUFBTVAsb0ZBQWVBLENBQUNLLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlQsNEVBQWlCQSxDQUFDTSxVQUFVO0lBQ25ELE1BQU1JLFVBQVVSLHlEQUFjQSxDQUFDRTtJQUMvQixNQUFNLEVBQUVPLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1YLCtEQUFZQSxDQUFDUyxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWUSxNQUFNO0lBQ1Y7SUFDQSxPQUFPSixlQUFlSyxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZUNsYXNzaWZpY2F0aW9uLmpzPzc5MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbmltcG9ydCB7IHByZXBhcmVQYXlsb2FkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8qKlxuICogVGhpcyB0YXNrIHJlYWRzIHNvbWUgaW1hZ2UgaW5wdXQgYW5kIG91dHB1dHMgdGhlIGxpa2VsaWhvb2Qgb2YgY2xhc3Nlcy5cbiAqIFJlY29tbWVuZGVkIG1vZGVsOiBnb29nbGUvdml0LWJhc2UtcGF0Y2gxNi0yMjRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltYWdlQ2xhc3NpZmljYXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiaW1hZ2UtY2xhc3NpZmljYXRpb25cIik7XG4gICAgY29uc3QgcGF5bG9hZCA9IHByZXBhcmVQYXlsb2FkKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJpbWFnZS1jbGFzc2lmaWNhdGlvblwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwicHJlcGFyZVBheWxvYWQiLCJpbWFnZUNsYXNzaWZpY2F0aW9uIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsInBheWxvYWQiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageSegmentation.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageSegmentation.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageSegmentation: () => (/* binding */ imageSegmentation)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n\n\n\n\n/**\n * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.\n * Recommended model: facebook/detr-resnet-50-panoptic\n */ async function imageSegmentation(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"image-segmentation\");\n    const payload = await providerHelper.preparePayloadAsync(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"image-segmentation\"\n    });\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__.makeRequestOptions)(args, providerHelper, {\n        ...options,\n        task: \"image-segmentation\"\n    });\n    return providerHelper.getResponse(res, url, info.headers);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZVNlZ21lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDZTtBQUNyRTs7O0NBR0MsR0FDTSxlQUFlSSxrQkFBa0JDLElBQUksRUFBRUMsT0FBTztJQUNqRCxNQUFNQyxXQUFXLE1BQU1QLG9GQUFlQSxDQUFDSyxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJULDRFQUFpQkEsQ0FBQ00sVUFBVTtJQUNuRCxNQUFNSSxVQUFVLE1BQU1ELGVBQWVFLG1CQUFtQixDQUFDUDtJQUN6RCxNQUFNLEVBQUVRLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1aLCtEQUFZQSxDQUFDUyxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWUyxNQUFNO0lBQ1Y7SUFDQSxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTWQsOEVBQWtCQSxDQUFDRSxNQUFNSyxnQkFBZ0I7UUFBRSxHQUFHSixPQUFPO1FBQUVTLE1BQU07SUFBcUI7SUFDOUcsT0FBT0wsZUFBZVEsV0FBVyxDQUFDSixLQUFLRSxLQUFLQyxLQUFLRSxPQUFPO0FBQzVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZVNlZ21lbnRhdGlvbi5qcz9iYzZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBtYWtlUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL21ha2VSZXF1ZXN0T3B0aW9ucy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSBpbWFnZSBpbnB1dCBhbmQgb3V0cHV0cyB0aGUgbGlrZWxpaG9vZCBvZiBjbGFzc2VzICYgYm91bmRpbmcgYm94ZXMgb2YgZGV0ZWN0ZWQgb2JqZWN0cy5cbiAqIFJlY29tbWVuZGVkIG1vZGVsOiBmYWNlYm9vay9kZXRyLXJlc25ldC01MC1wYW5vcHRpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1hZ2VTZWdtZW50YXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiaW1hZ2Utc2VnbWVudGF0aW9uXCIpO1xuICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBwcm92aWRlckhlbHBlci5wcmVwYXJlUGF5bG9hZEFzeW5jKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJpbWFnZS1zZWdtZW50YXRpb25cIixcbiAgICB9KTtcbiAgICBjb25zdCB7IHVybCwgaW5mbyB9ID0gYXdhaXQgbWFrZVJlcXVlc3RPcHRpb25zKGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7IC4uLm9wdGlvbnMsIHRhc2s6IFwiaW1hZ2Utc2VnbWVudGF0aW9uXCIgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcywgdXJsLCBpbmZvLmhlYWRlcnMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwibWFrZVJlcXVlc3RPcHRpb25zIiwiaW1hZ2VTZWdtZW50YXRpb24iLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwicGF5bG9hZCIsInByZXBhcmVQYXlsb2FkQXN5bmMiLCJkYXRhIiwicmVzIiwidGFzayIsInVybCIsImluZm8iLCJnZXRSZXNwb25zZSIsImhlYWRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageSegmentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToImage.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToImage.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageToImage: () => (/* binding */ imageToImage)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n\n\n\n\n/**\n * This task reads some text input and outputs an image.\n * Recommended model: lllyasviel/sd-controlnet-depth\n */ async function imageToImage(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"image-to-image\");\n    const payload = await providerHelper.preparePayloadAsync(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"image-to-image\"\n    });\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__.makeRequestOptions)(args, providerHelper, {\n        ...options,\n        task: \"image-to-image\"\n    });\n    return providerHelper.getResponse(res, url, info.headers);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZVRvSW1hZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ2U7QUFDckU7OztDQUdDLEdBQ00sZUFBZUksYUFBYUMsSUFBSSxFQUFFQyxPQUFPO0lBQzVDLE1BQU1DLFdBQVcsTUFBTVAsb0ZBQWVBLENBQUNLLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlQsNEVBQWlCQSxDQUFDTSxVQUFVO0lBQ25ELE1BQU1JLFVBQVUsTUFBTUQsZUFBZUUsbUJBQW1CLENBQUNQO0lBQ3pELE1BQU0sRUFBRVEsTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVosK0RBQVlBLENBQUNTLFNBQVNELGdCQUFnQjtRQUM5RCxHQUFHSixPQUFPO1FBQ1ZTLE1BQU07SUFDVjtJQUNBLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNZCw4RUFBa0JBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUFFLEdBQUdKLE9BQU87UUFBRVMsTUFBTTtJQUFpQjtJQUMxRyxPQUFPTCxlQUFlUSxXQUFXLENBQUNKLEtBQUtFLEtBQUtDLEtBQUtFLE9BQU87QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL2N2L2ltYWdlVG9JbWFnZS5qcz85OWNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBtYWtlUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL21ha2VSZXF1ZXN0T3B0aW9ucy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSB0ZXh0IGlucHV0IGFuZCBvdXRwdXRzIGFuIGltYWdlLlxuICogUmVjb21tZW5kZWQgbW9kZWw6IGxsbHlhc3ZpZWwvc2QtY29udHJvbG5ldC1kZXB0aFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1hZ2VUb0ltYWdlKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcImltYWdlLXRvLWltYWdlXCIpO1xuICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBwcm92aWRlckhlbHBlci5wcmVwYXJlUGF5bG9hZEFzeW5jKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJpbWFnZS10by1pbWFnZVwiLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgdXJsLCBpbmZvIH0gPSBhd2FpdCBtYWtlUmVxdWVzdE9wdGlvbnMoYXJncywgcHJvdmlkZXJIZWxwZXIsIHsgLi4ub3B0aW9ucywgdGFzazogXCJpbWFnZS10by1pbWFnZVwiIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMsIHVybCwgaW5mby5oZWFkZXJzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsIm1ha2VSZXF1ZXN0T3B0aW9ucyIsImltYWdlVG9JbWFnZSIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJwYXlsb2FkIiwicHJlcGFyZVBheWxvYWRBc3luYyIsImRhdGEiLCJyZXMiLCJ0YXNrIiwidXJsIiwiaW5mbyIsImdldFJlc3BvbnNlIiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToImage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToText.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToText.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageToText: () => (/* binding */ imageToText)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js\");\n\n\n\n\n/**\n * This task reads some image input and outputs the text caption.\n */ async function imageToText(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"image-to-text\");\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preparePayload)(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"image-to-text\"\n    });\n    return providerHelper.getResponse(res[0]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZVRvVGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDVjtBQUM1Qzs7Q0FFQyxHQUNNLGVBQWVJLFlBQVlDLElBQUksRUFBRUMsT0FBTztJQUMzQyxNQUFNQyxXQUFXLE1BQU1QLG9GQUFlQSxDQUFDSyxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJULDRFQUFpQkEsQ0FBQ00sVUFBVTtJQUNuRCxNQUFNSSxVQUFVUix5REFBY0EsQ0FBQ0U7SUFDL0IsTUFBTSxFQUFFTyxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNWCwrREFBWUEsQ0FBQ1MsU0FBU0QsZ0JBQWdCO1FBQzlELEdBQUdKLE9BQU87UUFDVlEsTUFBTTtJQUNWO0lBQ0EsT0FBT0osZUFBZUssV0FBVyxDQUFDRixHQUFHLENBQUMsRUFBRTtBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvY3YvaW1hZ2VUb1RleHQuanM/MjU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuaW1wb3J0IHsgcHJlcGFyZVBheWxvYWQgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSBpbWFnZSBpbnB1dCBhbmQgb3V0cHV0cyB0aGUgdGV4dCBjYXB0aW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1hZ2VUb1RleHQoYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiaW1hZ2UtdG8tdGV4dFwiKTtcbiAgICBjb25zdCBwYXlsb2FkID0gcHJlcGFyZVBheWxvYWQoYXJncyk7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChwYXlsb2FkLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcImltYWdlLXRvLXRleHRcIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzWzBdKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInByZXBhcmVQYXlsb2FkIiwiaW1hZ2VUb1RleHQiLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwicGF5bG9hZCIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToText.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToVideo.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToVideo.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageToVideo: () => (/* binding */ imageToVideo)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n\n\n\n\n/**\n * This task reads some text input and outputs an image.\n * Recommended model: Wan-AI/Wan2.1-I2V-14B-720P\n */ async function imageToVideo(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"image-to-video\");\n    const payload = await providerHelper.preparePayloadAsync(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"image-to-video\"\n    });\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_3__.makeRequestOptions)(args, providerHelper, {\n        ...options,\n        task: \"image-to-video\"\n    });\n    return providerHelper.getResponse(res, url, info.headers);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9pbWFnZVRvVmlkZW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ2U7QUFDckU7OztDQUdDLEdBQ00sZUFBZUksYUFBYUMsSUFBSSxFQUFFQyxPQUFPO0lBQzVDLE1BQU1DLFdBQVcsTUFBTVAsb0ZBQWVBLENBQUNLLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlQsNEVBQWlCQSxDQUFDTSxVQUFVO0lBQ25ELE1BQU1JLFVBQVUsTUFBTUQsZUFBZUUsbUJBQW1CLENBQUNQO0lBQ3pELE1BQU0sRUFBRVEsTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVosK0RBQVlBLENBQUNTLFNBQVNELGdCQUFnQjtRQUM5RCxHQUFHSixPQUFPO1FBQ1ZTLE1BQU07SUFDVjtJQUNBLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNZCw4RUFBa0JBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUFFLEdBQUdKLE9BQU87UUFBRVMsTUFBTTtJQUFpQjtJQUMxRyxPQUFPTCxlQUFlUSxXQUFXLENBQUNKLEtBQUtFLEtBQUtDLEtBQUtFLE9BQU87QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL2N2L2ltYWdlVG9WaWRlby5qcz9mMDAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBtYWtlUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL21ha2VSZXF1ZXN0T3B0aW9ucy5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSB0ZXh0IGlucHV0IGFuZCBvdXRwdXRzIGFuIGltYWdlLlxuICogUmVjb21tZW5kZWQgbW9kZWw6IFdhbi1BSS9XYW4yLjEtSTJWLTE0Qi03MjBQXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbWFnZVRvVmlkZW8oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiaW1hZ2UtdG8tdmlkZW9cIik7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHByb3ZpZGVySGVscGVyLnByZXBhcmVQYXlsb2FkQXN5bmMoYXJncyk7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChwYXlsb2FkLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcImltYWdlLXRvLXZpZGVvXCIsXG4gICAgfSk7XG4gICAgY29uc3QgeyB1cmwsIGluZm8gfSA9IGF3YWl0IG1ha2VSZXF1ZXN0T3B0aW9ucyhhcmdzLCBwcm92aWRlckhlbHBlciwgeyAuLi5vcHRpb25zLCB0YXNrOiBcImltYWdlLXRvLXZpZGVvXCIgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcywgdXJsLCBpbmZvLmhlYWRlcnMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwibWFrZVJlcXVlc3RPcHRpb25zIiwiaW1hZ2VUb1ZpZGVvIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsInBheWxvYWQiLCJwcmVwYXJlUGF5bG9hZEFzeW5jIiwiZGF0YSIsInJlcyIsInRhc2siLCJ1cmwiLCJpbmZvIiwiZ2V0UmVzcG9uc2UiLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToVideo.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/objectDetection.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/objectDetection.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   objectDetection: () => (/* binding */ objectDetection)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js\");\n\n\n\n\n/**\n * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.\n * Recommended model: facebook/detr-resnet-50\n */ async function objectDetection(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"object-detection\");\n    const payload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.preparePayload)(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"object-detection\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi9vYmplY3REZXRlY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ1Y7QUFDNUM7OztDQUdDLEdBQ00sZUFBZUksZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU87SUFDL0MsTUFBTUMsV0FBVyxNQUFNUCxvRkFBZUEsQ0FBQ0ssS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCVCw0RUFBaUJBLENBQUNNLFVBQVU7SUFDbkQsTUFBTUksVUFBVVIseURBQWNBLENBQUNFO0lBQy9CLE1BQU0sRUFBRU8sTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVgsK0RBQVlBLENBQUNTLFNBQVNELGdCQUFnQjtRQUM5RCxHQUFHSixPQUFPO1FBQ1ZRLE1BQU07SUFDVjtJQUNBLE9BQU9KLGVBQWVLLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL2N2L29iamVjdERldGVjdGlvbi5qcz8xNGE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG5pbXBvcnQgeyBwcmVwYXJlUGF5bG9hZCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG4vKipcbiAqIFRoaXMgdGFzayByZWFkcyBzb21lIGltYWdlIGlucHV0IGFuZCBvdXRwdXRzIHRoZSBsaWtlbGlob29kIG9mIGNsYXNzZXMgJiBib3VuZGluZyBib3hlcyBvZiBkZXRlY3RlZCBvYmplY3RzLlxuICogUmVjb21tZW5kZWQgbW9kZWw6IGZhY2Vib29rL2RldHItcmVzbmV0LTUwXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvYmplY3REZXRlY3Rpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwib2JqZWN0LWRldGVjdGlvblwiKTtcbiAgICBjb25zdCBwYXlsb2FkID0gcHJlcGFyZVBheWxvYWQoYXJncyk7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChwYXlsb2FkLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcIm9iamVjdC1kZXRlY3Rpb25cIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInByZXBhcmVQYXlsb2FkIiwib2JqZWN0RGV0ZWN0aW9uIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsInBheWxvYWQiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/objectDetection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToImage.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToImage.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textToImage: () => (/* binding */ textToImage)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n\nasync function textToImage(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-to-image\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_3__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-to-image\"\n    });\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_2__.makeRequestOptions)(args, providerHelper, {\n        ...options,\n        task: \"text-to-image\"\n    });\n    return providerHelper.getResponse(res, url, info.headers, options?.outputType);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi90ZXh0VG9JbWFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ0U7QUFDZjtBQUMvQyxlQUFlSSxZQUFZQyxJQUFJLEVBQUVDLE9BQU87SUFDM0MsTUFBTUMsV0FBVyxNQUFNUCxvRkFBZUEsQ0FBQ0ssS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCVCw0RUFBaUJBLENBQUNNLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1iLDhFQUFrQkEsQ0FBQ0csTUFBTUssZ0JBQWdCO1FBQUUsR0FBR0osT0FBTztRQUFFTyxNQUFNO0lBQWdCO0lBQ3pHLE9BQU9ILGVBQWVNLFdBQVcsQ0FBQ0osS0FBS0UsS0FBS0MsS0FBS0UsT0FBTyxFQUFFWCxTQUFTWTtBQUN2RSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvY3YvdGV4dFRvSW1hZ2UuanM/ZGMzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBtYWtlUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL21ha2VSZXF1ZXN0T3B0aW9ucy5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0VG9JbWFnZShhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0ZXh0LXRvLWltYWdlXCIpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJ0ZXh0LXRvLWltYWdlXCIsXG4gICAgfSk7XG4gICAgY29uc3QgeyB1cmwsIGluZm8gfSA9IGF3YWl0IG1ha2VSZXF1ZXN0T3B0aW9ucyhhcmdzLCBwcm92aWRlckhlbHBlciwgeyAuLi5vcHRpb25zLCB0YXNrOiBcInRleHQtdG8taW1hZ2VcIiB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzLCB1cmwsIGluZm8uaGVhZGVycywgb3B0aW9ucz8ub3V0cHV0VHlwZSk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJtYWtlUmVxdWVzdE9wdGlvbnMiLCJpbm5lclJlcXVlc3QiLCJ0ZXh0VG9JbWFnZSIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsInVybCIsImluZm8iLCJnZXRSZXNwb25zZSIsImhlYWRlcnMiLCJvdXRwdXRUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToImage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToVideo.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToVideo.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textToVideo: () => (/* binding */ textToVideo)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n\nasync function textToVideo(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-to-video\");\n    const { data: response } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_3__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-to-video\"\n    });\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_2__.makeRequestOptions)(args, providerHelper, {\n        ...options,\n        task: \"text-to-video\"\n    });\n    return providerHelper.getResponse(response, url, info.headers);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi90ZXh0VG9WaWRlby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyRTtBQUNSO0FBQ0U7QUFDZjtBQUMvQyxlQUFlSSxZQUFZQyxJQUFJLEVBQUVDLE9BQU87SUFDM0MsTUFBTUMsV0FBVyxNQUFNUCxvRkFBZUEsQ0FBQ0ssS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCVCw0RUFBaUJBLENBQUNNLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxRQUFRLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQ2hFLEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1iLDhFQUFrQkEsQ0FBQ0csTUFBTUssZ0JBQWdCO1FBQUUsR0FBR0osT0FBTztRQUFFTyxNQUFNO0lBQWdCO0lBQ3pHLE9BQU9ILGVBQWVNLFdBQVcsQ0FBQ0osVUFBVUUsS0FBS0MsS0FBS0UsT0FBTztBQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvY3YvdGV4dFRvVmlkZW8uanM/MTY3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBtYWtlUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL21ha2VSZXF1ZXN0T3B0aW9ucy5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0VG9WaWRlbyhhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0ZXh0LXRvLXZpZGVvXCIpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzcG9uc2UgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInRleHQtdG8tdmlkZW9cIixcbiAgICB9KTtcbiAgICBjb25zdCB7IHVybCwgaW5mbyB9ID0gYXdhaXQgbWFrZVJlcXVlc3RPcHRpb25zKGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7IC4uLm9wdGlvbnMsIHRhc2s6IFwidGV4dC10by12aWRlb1wiIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXNwb25zZSwgdXJsLCBpbmZvLmhlYWRlcnMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwibWFrZVJlcXVlc3RPcHRpb25zIiwiaW5uZXJSZXF1ZXN0IiwidGV4dFRvVmlkZW8iLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwiZGF0YSIsInJlc3BvbnNlIiwidGFzayIsInVybCIsImluZm8iLCJnZXRSZXNwb25zZSIsImhlYWRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToVideo.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preparePayload: () => (/* binding */ preparePayload)\n/* harmony export */ });\n/* harmony import */ var _utils_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/omit.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\");\n\nfunction preparePayload(args) {\n    return \"data\" in args ? args : {\n        ...(0,_utils_omit_js__WEBPACK_IMPORTED_MODULE_0__.omit)(args, \"inputs\"),\n        data: args.inputs\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNwQyxTQUFTQyxlQUFlQyxJQUFJO0lBQy9CLE9BQU8sVUFBVUEsT0FBT0EsT0FBTztRQUFFLEdBQUdGLG9EQUFJQSxDQUFDRSxNQUFNLFNBQVM7UUFBRUMsTUFBTUQsS0FBS0UsTUFBTTtJQUFDO0FBQ2hGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi91dGlscy5qcz9jOTJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9taXQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvb21pdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVQYXlsb2FkKGFyZ3MpIHtcbiAgICByZXR1cm4gXCJkYXRhXCIgaW4gYXJncyA/IGFyZ3MgOiB7IC4uLm9taXQoYXJncywgXCJpbnB1dHNcIiksIGRhdGE6IGFyZ3MuaW5wdXRzIH07XG59XG4iXSwibmFtZXMiOlsib21pdCIsInByZXBhcmVQYXlsb2FkIiwiYXJncyIsImRhdGEiLCJpbnB1dHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/zeroShotImageClassification.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/cv/zeroShotImageClassification.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zeroShotImageClassification: () => (/* binding */ zeroShotImageClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n\nasync function preparePayload(args) {\n    if (args.inputs instanceof Blob) {\n        return {\n            ...args,\n            inputs: {\n                image: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__.base64FromBytes)(new Uint8Array(await args.inputs.arrayBuffer()))\n            }\n        };\n    } else {\n        return {\n            ...args,\n            inputs: {\n                image: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__.base64FromBytes)(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n            }\n        };\n    }\n}\n/**\n * Classify an image to specified classes.\n * Recommended model: openai/clip-vit-large-patch14-336\n */ async function zeroShotImageClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"zero-shot-image-classification\");\n    const payload = await preparePayload(args);\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_3__.innerRequest)(payload, providerHelper, {\n        ...options,\n        task: \"zero-shot-image-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9jdi96ZXJvU2hvdEltYWdlQ2xhc3NpZmljYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNGO0FBQ1g7QUFDdEQsZUFBZUksZUFBZUMsSUFBSTtJQUM5QixJQUFJQSxLQUFLQyxNQUFNLFlBQVlDLE1BQU07UUFDN0IsT0FBTztZQUNILEdBQUdGLElBQUk7WUFDUEMsUUFBUTtnQkFDSkUsT0FBT04sMEVBQWVBLENBQUMsSUFBSU8sV0FBVyxNQUFNSixLQUFLQyxNQUFNLENBQUNJLFdBQVc7WUFDdkU7UUFDSjtJQUNKLE9BQ0s7UUFDRCxPQUFPO1lBQ0gsR0FBR0wsSUFBSTtZQUNQQyxRQUFRO2dCQUNKRSxPQUFPTiwwRUFBZUEsQ0FBQyxJQUFJTyxXQUFXSixLQUFLQyxNQUFNLENBQUNFLEtBQUssWUFBWUcsY0FBY04sS0FBS0MsTUFBTSxDQUFDRSxLQUFLLEdBQUcsTUFBTUgsS0FBS0MsTUFBTSxDQUFDRSxLQUFLLENBQUNFLFdBQVc7WUFDNUk7UUFDSjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxlQUFlRSw0QkFBNEJQLElBQUksRUFBRVEsT0FBTztJQUMzRCxNQUFNQyxXQUFXLE1BQU1kLG9GQUFlQSxDQUFDSyxLQUFLUyxRQUFRLEVBQUVULEtBQUtVLEtBQUssRUFBRVYsS0FBS1csV0FBVztJQUNsRixNQUFNQyxpQkFBaUJoQiw0RUFBaUJBLENBQUNhLFVBQVU7SUFDbkQsTUFBTUksVUFBVSxNQUFNZCxlQUFlQztJQUNyQyxNQUFNLEVBQUVjLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1qQiwrREFBWUEsQ0FBQ2UsU0FBU0QsZ0JBQWdCO1FBQzlELEdBQUdKLE9BQU87UUFDVlEsTUFBTTtJQUNWO0lBQ0EsT0FBT0osZUFBZUssV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvY3YvemVyb1Nob3RJbWFnZUNsYXNzaWZpY2F0aW9uLmpzPzAzZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgYmFzZTY0RnJvbUJ5dGVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Jhc2U2NEZyb21CeXRlcy5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVQYXlsb2FkKGFyZ3MpIHtcbiAgICBpZiAoYXJncy5pbnB1dHMgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICAgICAgaW1hZ2U6IGJhc2U2NEZyb21CeXRlcyhuZXcgVWludDhBcnJheShhd2FpdCBhcmdzLmlucHV0cy5hcnJheUJ1ZmZlcigpKSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgICBpbnB1dHM6IHtcbiAgICAgICAgICAgICAgICBpbWFnZTogYmFzZTY0RnJvbUJ5dGVzKG5ldyBVaW50OEFycmF5KGFyZ3MuaW5wdXRzLmltYWdlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBhcmdzLmlucHV0cy5pbWFnZSA6IGF3YWl0IGFyZ3MuaW5wdXRzLmltYWdlLmFycmF5QnVmZmVyKCkpKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzc2lmeSBhbiBpbWFnZSB0byBzcGVjaWZpZWQgY2xhc3Nlcy5cbiAqIFJlY29tbWVuZGVkIG1vZGVsOiBvcGVuYWkvY2xpcC12aXQtbGFyZ2UtcGF0Y2gxNC0zMzZcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHplcm9TaG90SW1hZ2VDbGFzc2lmaWNhdGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ6ZXJvLXNob3QtaW1hZ2UtY2xhc3NpZmljYXRpb25cIik7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHByZXBhcmVQYXlsb2FkKGFyZ3MpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocGF5bG9hZCwgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJ6ZXJvLXNob3QtaW1hZ2UtY2xhc3NpZmljYXRpb25cIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImJhc2U2NEZyb21CeXRlcyIsImlubmVyUmVxdWVzdCIsInByZXBhcmVQYXlsb2FkIiwiYXJncyIsImlucHV0cyIsIkJsb2IiLCJpbWFnZSIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiemVyb1Nob3RJbWFnZUNsYXNzaWZpY2F0aW9uIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwicGF5bG9hZCIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/zeroShotImageClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audioClassification: () => (/* reexport safe */ _audio_audioClassification_js__WEBPACK_IMPORTED_MODULE_2__.audioClassification),\n/* harmony export */   audioToAudio: () => (/* reexport safe */ _audio_audioToAudio_js__WEBPACK_IMPORTED_MODULE_3__.audioToAudio),\n/* harmony export */   automaticSpeechRecognition: () => (/* reexport safe */ _audio_automaticSpeechRecognition_js__WEBPACK_IMPORTED_MODULE_4__.automaticSpeechRecognition),\n/* harmony export */   chatCompletion: () => (/* reexport safe */ _nlp_chatCompletion_js__WEBPACK_IMPORTED_MODULE_15__.chatCompletion),\n/* harmony export */   chatCompletionStream: () => (/* reexport safe */ _nlp_chatCompletionStream_js__WEBPACK_IMPORTED_MODULE_16__.chatCompletionStream),\n/* harmony export */   documentQuestionAnswering: () => (/* reexport safe */ _multimodal_documentQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_29__.documentQuestionAnswering),\n/* harmony export */   featureExtraction: () => (/* reexport safe */ _nlp_featureExtraction_js__WEBPACK_IMPORTED_MODULE_17__.featureExtraction),\n/* harmony export */   fillMask: () => (/* reexport safe */ _nlp_fillMask_js__WEBPACK_IMPORTED_MODULE_18__.fillMask),\n/* harmony export */   imageClassification: () => (/* reexport safe */ _cv_imageClassification_js__WEBPACK_IMPORTED_MODULE_6__.imageClassification),\n/* harmony export */   imageSegmentation: () => (/* reexport safe */ _cv_imageSegmentation_js__WEBPACK_IMPORTED_MODULE_7__.imageSegmentation),\n/* harmony export */   imageToImage: () => (/* reexport safe */ _cv_imageToImage_js__WEBPACK_IMPORTED_MODULE_8__.imageToImage),\n/* harmony export */   imageToText: () => (/* reexport safe */ _cv_imageToText_js__WEBPACK_IMPORTED_MODULE_9__.imageToText),\n/* harmony export */   imageToVideo: () => (/* reexport safe */ _cv_imageToVideo_js__WEBPACK_IMPORTED_MODULE_10__.imageToVideo),\n/* harmony export */   objectDetection: () => (/* reexport safe */ _cv_objectDetection_js__WEBPACK_IMPORTED_MODULE_11__.objectDetection),\n/* harmony export */   questionAnswering: () => (/* reexport safe */ _nlp_questionAnswering_js__WEBPACK_IMPORTED_MODULE_19__.questionAnswering),\n/* harmony export */   request: () => (/* reexport safe */ _custom_request_js__WEBPACK_IMPORTED_MODULE_0__.request),\n/* harmony export */   sentenceSimilarity: () => (/* reexport safe */ _nlp_sentenceSimilarity_js__WEBPACK_IMPORTED_MODULE_20__.sentenceSimilarity),\n/* harmony export */   streamingRequest: () => (/* reexport safe */ _custom_streamingRequest_js__WEBPACK_IMPORTED_MODULE_1__.streamingRequest),\n/* harmony export */   summarization: () => (/* reexport safe */ _nlp_summarization_js__WEBPACK_IMPORTED_MODULE_21__.summarization),\n/* harmony export */   tableQuestionAnswering: () => (/* reexport safe */ _nlp_tableQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_22__.tableQuestionAnswering),\n/* harmony export */   tabularClassification: () => (/* reexport safe */ _tabular_tabularClassification_js__WEBPACK_IMPORTED_MODULE_31__.tabularClassification),\n/* harmony export */   tabularRegression: () => (/* reexport safe */ _tabular_tabularRegression_js__WEBPACK_IMPORTED_MODULE_32__.tabularRegression),\n/* harmony export */   textClassification: () => (/* reexport safe */ _nlp_textClassification_js__WEBPACK_IMPORTED_MODULE_23__.textClassification),\n/* harmony export */   textGeneration: () => (/* reexport safe */ _nlp_textGeneration_js__WEBPACK_IMPORTED_MODULE_24__.textGeneration),\n/* harmony export */   textGenerationStream: () => (/* reexport safe */ _nlp_textGenerationStream_js__WEBPACK_IMPORTED_MODULE_25__.textGenerationStream),\n/* harmony export */   textToImage: () => (/* reexport safe */ _cv_textToImage_js__WEBPACK_IMPORTED_MODULE_12__.textToImage),\n/* harmony export */   textToSpeech: () => (/* reexport safe */ _audio_textToSpeech_js__WEBPACK_IMPORTED_MODULE_5__.textToSpeech),\n/* harmony export */   textToVideo: () => (/* reexport safe */ _cv_textToVideo_js__WEBPACK_IMPORTED_MODULE_13__.textToVideo),\n/* harmony export */   tokenClassification: () => (/* reexport safe */ _nlp_tokenClassification_js__WEBPACK_IMPORTED_MODULE_26__.tokenClassification),\n/* harmony export */   translation: () => (/* reexport safe */ _nlp_translation_js__WEBPACK_IMPORTED_MODULE_27__.translation),\n/* harmony export */   visualQuestionAnswering: () => (/* reexport safe */ _multimodal_visualQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_30__.visualQuestionAnswering),\n/* harmony export */   zeroShotClassification: () => (/* reexport safe */ _nlp_zeroShotClassification_js__WEBPACK_IMPORTED_MODULE_28__.zeroShotClassification),\n/* harmony export */   zeroShotImageClassification: () => (/* reexport safe */ _cv_zeroShotImageClassification_js__WEBPACK_IMPORTED_MODULE_14__.zeroShotImageClassification)\n/* harmony export */ });\n/* harmony import */ var _custom_request_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./custom/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/request.js\");\n/* harmony import */ var _custom_streamingRequest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom/streamingRequest.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/custom/streamingRequest.js\");\n/* harmony import */ var _audio_audioClassification_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio/audioClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioClassification.js\");\n/* harmony import */ var _audio_audioToAudio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio/audioToAudio.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/audioToAudio.js\");\n/* harmony import */ var _audio_automaticSpeechRecognition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audio/automaticSpeechRecognition.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/automaticSpeechRecognition.js\");\n/* harmony import */ var _audio_textToSpeech_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./audio/textToSpeech.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/audio/textToSpeech.js\");\n/* harmony import */ var _cv_imageClassification_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cv/imageClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageClassification.js\");\n/* harmony import */ var _cv_imageSegmentation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cv/imageSegmentation.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageSegmentation.js\");\n/* harmony import */ var _cv_imageToImage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cv/imageToImage.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToImage.js\");\n/* harmony import */ var _cv_imageToText_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cv/imageToText.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToText.js\");\n/* harmony import */ var _cv_imageToVideo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cv/imageToVideo.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/imageToVideo.js\");\n/* harmony import */ var _cv_objectDetection_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cv/objectDetection.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/objectDetection.js\");\n/* harmony import */ var _cv_textToImage_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cv/textToImage.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToImage.js\");\n/* harmony import */ var _cv_textToVideo_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cv/textToVideo.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/textToVideo.js\");\n/* harmony import */ var _cv_zeroShotImageClassification_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./cv/zeroShotImageClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/cv/zeroShotImageClassification.js\");\n/* harmony import */ var _nlp_chatCompletion_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./nlp/chatCompletion.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletion.js\");\n/* harmony import */ var _nlp_chatCompletionStream_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./nlp/chatCompletionStream.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletionStream.js\");\n/* harmony import */ var _nlp_featureExtraction_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./nlp/featureExtraction.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/featureExtraction.js\");\n/* harmony import */ var _nlp_fillMask_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./nlp/fillMask.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/fillMask.js\");\n/* harmony import */ var _nlp_questionAnswering_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./nlp/questionAnswering.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/questionAnswering.js\");\n/* harmony import */ var _nlp_sentenceSimilarity_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./nlp/sentenceSimilarity.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/sentenceSimilarity.js\");\n/* harmony import */ var _nlp_summarization_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./nlp/summarization.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/summarization.js\");\n/* harmony import */ var _nlp_tableQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./nlp/tableQuestionAnswering.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tableQuestionAnswering.js\");\n/* harmony import */ var _nlp_textClassification_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./nlp/textClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textClassification.js\");\n/* harmony import */ var _nlp_textGeneration_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./nlp/textGeneration.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGeneration.js\");\n/* harmony import */ var _nlp_textGenerationStream_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./nlp/textGenerationStream.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGenerationStream.js\");\n/* harmony import */ var _nlp_tokenClassification_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./nlp/tokenClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tokenClassification.js\");\n/* harmony import */ var _nlp_translation_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./nlp/translation.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/translation.js\");\n/* harmony import */ var _nlp_zeroShotClassification_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./nlp/zeroShotClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/zeroShotClassification.js\");\n/* harmony import */ var _multimodal_documentQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./multimodal/documentQuestionAnswering.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/documentQuestionAnswering.js\");\n/* harmony import */ var _multimodal_visualQuestionAnswering_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./multimodal/visualQuestionAnswering.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/visualQuestionAnswering.js\");\n/* harmony import */ var _tabular_tabularClassification_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./tabular/tabularClassification.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularClassification.js\");\n/* harmony import */ var _tabular_tabularRegression_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./tabular/tabularRegression.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularRegression.js\");\n// Custom tasks with arbitrary inputs and outputs\n\n\n// Audio tasks\n\n\n\n\n// Computer Vision tasks\n\n\n\n\n\n\n\n\n\n// Natural Language Processing tasks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Multimodal tasks\n\n\n// Tabular tasks\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBaUQ7QUFDYjtBQUNTO0FBQzdDLGNBQWM7QUFDaUM7QUFDUDtBQUNjO0FBQ2Q7QUFDeEMsd0JBQXdCO0FBQ29CO0FBQ0Y7QUFDTDtBQUNEO0FBQ0M7QUFDRztBQUNKO0FBQ0E7QUFDZ0I7QUFDcEQsb0NBQW9DO0FBQ0k7QUFDTTtBQUNIO0FBQ1Q7QUFDUztBQUNDO0FBQ0w7QUFDUztBQUNKO0FBQ0o7QUFDTTtBQUNEO0FBQ1I7QUFDVztBQUNoRCxtQkFBbUI7QUFDdUM7QUFDRjtBQUN4RCxnQkFBZ0I7QUFDbUM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvaW5kZXguanM/OWUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDdXN0b20gdGFza3Mgd2l0aCBhcmJpdHJhcnkgaW5wdXRzIGFuZCBvdXRwdXRzXG5leHBvcnQgKiBmcm9tIFwiLi9jdXN0b20vcmVxdWVzdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3VzdG9tL3N0cmVhbWluZ1JlcXVlc3QuanNcIjtcbi8vIEF1ZGlvIHRhc2tzXG5leHBvcnQgKiBmcm9tIFwiLi9hdWRpby9hdWRpb0NsYXNzaWZpY2F0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hdWRpby9hdWRpb1RvQXVkaW8uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F1ZGlvL2F1dG9tYXRpY1NwZWVjaFJlY29nbml0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hdWRpby90ZXh0VG9TcGVlY2guanNcIjtcbi8vIENvbXB1dGVyIFZpc2lvbiB0YXNrc1xuZXhwb3J0ICogZnJvbSBcIi4vY3YvaW1hZ2VDbGFzc2lmaWNhdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3YvaW1hZ2VTZWdtZW50YXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2N2L2ltYWdlVG9JbWFnZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3YvaW1hZ2VUb1RleHQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2N2L2ltYWdlVG9WaWRlby5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3Yvb2JqZWN0RGV0ZWN0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jdi90ZXh0VG9JbWFnZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3YvdGV4dFRvVmlkZW8uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2N2L3plcm9TaG90SW1hZ2VDbGFzc2lmaWNhdGlvbi5qc1wiO1xuLy8gTmF0dXJhbCBMYW5ndWFnZSBQcm9jZXNzaW5nIHRhc2tzXG5leHBvcnQgKiBmcm9tIFwiLi9ubHAvY2hhdENvbXBsZXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25scC9jaGF0Q29tcGxldGlvblN0cmVhbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbmxwL2ZlYXR1cmVFeHRyYWN0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ubHAvZmlsbE1hc2suanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25scC9xdWVzdGlvbkFuc3dlcmluZy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbmxwL3NlbnRlbmNlU2ltaWxhcml0eS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbmxwL3N1bW1hcml6YXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25scC90YWJsZVF1ZXN0aW9uQW5zd2VyaW5nLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ubHAvdGV4dENsYXNzaWZpY2F0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ubHAvdGV4dEdlbmVyYXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25scC90ZXh0R2VuZXJhdGlvblN0cmVhbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbmxwL3Rva2VuQ2xhc3NpZmljYXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL25scC90cmFuc2xhdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbmxwL3plcm9TaG90Q2xhc3NpZmljYXRpb24uanNcIjtcbi8vIE11bHRpbW9kYWwgdGFza3NcbmV4cG9ydCAqIGZyb20gXCIuL211bHRpbW9kYWwvZG9jdW1lbnRRdWVzdGlvbkFuc3dlcmluZy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbXVsdGltb2RhbC92aXN1YWxRdWVzdGlvbkFuc3dlcmluZy5qc1wiO1xuLy8gVGFidWxhciB0YXNrc1xuZXhwb3J0ICogZnJvbSBcIi4vdGFidWxhci90YWJ1bGFyQ2xhc3NpZmljYXRpb24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RhYnVsYXIvdGFidWxhclJlZ3Jlc3Npb24uanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/documentQuestionAnswering.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/documentQuestionAnswering.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   documentQuestionAnswering: () => (/* binding */ documentQuestionAnswering)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n\n/**\n * Answers a question on a document image. Recommended model: impira/layoutlm-document-qa.\n */ async function documentQuestionAnswering(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"document-question-answering\");\n    const reqArgs = {\n        ...args,\n        inputs: {\n            question: args.inputs.question,\n            // convert Blob or ArrayBuffer to base64\n            image: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__.base64FromBytes)(new Uint8Array(await args.inputs.image.arrayBuffer()))\n        }\n    };\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_3__.innerRequest)(reqArgs, providerHelper, {\n        ...options,\n        task: \"document-question-answering\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9tdWx0aW1vZGFsL2RvY3VtZW50UXVlc3Rpb25BbnN3ZXJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNGO0FBQ1g7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlSSwwQkFBMEJDLElBQUksRUFBRUMsT0FBTztJQUN6RCxNQUFNQyxXQUFXLE1BQU1QLG9GQUFlQSxDQUFDSyxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJULDRFQUFpQkEsQ0FBQ00sVUFBVTtJQUNuRCxNQUFNSSxVQUFVO1FBQ1osR0FBR04sSUFBSTtRQUNQTyxRQUFRO1lBQ0pDLFVBQVVSLEtBQUtPLE1BQU0sQ0FBQ0MsUUFBUTtZQUM5Qix3Q0FBd0M7WUFDeENDLE9BQU9aLDBFQUFlQSxDQUFDLElBQUlhLFdBQVcsTUFBTVYsS0FBS08sTUFBTSxDQUFDRSxLQUFLLENBQUNFLFdBQVc7UUFDN0U7SUFDSjtJQUNBLE1BQU0sRUFBRUMsTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTWYsK0RBQVlBLENBQUNRLFNBQVNELGdCQUFnQjtRQUM5RCxHQUFHSixPQUFPO1FBQ1ZhLE1BQU07SUFDVjtJQUNBLE9BQU9ULGVBQWVVLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL211bHRpbW9kYWwvZG9jdW1lbnRRdWVzdGlvbkFuc3dlcmluZy5qcz80NGU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGJhc2U2NEZyb21CeXRlcyB9IGZyb20gXCIuLi8uLi91dGlscy9iYXNlNjRGcm9tQnl0ZXMuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIEFuc3dlcnMgYSBxdWVzdGlvbiBvbiBhIGRvY3VtZW50IGltYWdlLiBSZWNvbW1lbmRlZCBtb2RlbDogaW1waXJhL2xheW91dGxtLWRvY3VtZW50LXFhLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9jdW1lbnRRdWVzdGlvbkFuc3dlcmluZyhhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJkb2N1bWVudC1xdWVzdGlvbi1hbnN3ZXJpbmdcIik7XG4gICAgY29uc3QgcmVxQXJncyA9IHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICBxdWVzdGlvbjogYXJncy5pbnB1dHMucXVlc3Rpb24sXG4gICAgICAgICAgICAvLyBjb252ZXJ0IEJsb2Igb3IgQXJyYXlCdWZmZXIgdG8gYmFzZTY0XG4gICAgICAgICAgICBpbWFnZTogYmFzZTY0RnJvbUJ5dGVzKG5ldyBVaW50OEFycmF5KGF3YWl0IGFyZ3MuaW5wdXRzLmltYWdlLmFycmF5QnVmZmVyKCkpKSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocmVxQXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJkb2N1bWVudC1xdWVzdGlvbi1hbnN3ZXJpbmdcIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImJhc2U2NEZyb21CeXRlcyIsImlubmVyUmVxdWVzdCIsImRvY3VtZW50UXVlc3Rpb25BbnN3ZXJpbmciLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwicmVxQXJncyIsImlucHV0cyIsInF1ZXN0aW9uIiwiaW1hZ2UiLCJVaW50OEFycmF5IiwiYXJyYXlCdWZmZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/documentQuestionAnswering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/visualQuestionAnswering.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/visualQuestionAnswering.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visualQuestionAnswering: () => (/* binding */ visualQuestionAnswering)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/base64FromBytes.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n\n/**\n * Answers a question on an image. Recommended model: dandelin/vilt-b32-finetuned-vqa.\n */ async function visualQuestionAnswering(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"visual-question-answering\");\n    const reqArgs = {\n        ...args,\n        inputs: {\n            question: args.inputs.question,\n            // convert Blob or ArrayBuffer to base64\n            image: (0,_utils_base64FromBytes_js__WEBPACK_IMPORTED_MODULE_2__.base64FromBytes)(new Uint8Array(await args.inputs.image.arrayBuffer()))\n        }\n    };\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_3__.innerRequest)(reqArgs, providerHelper, {\n        ...options,\n        task: \"visual-question-answering\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9tdWx0aW1vZGFsL3Zpc3VhbFF1ZXN0aW9uQW5zd2VyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJFO0FBQ1I7QUFDRjtBQUNYO0FBQ3REOztDQUVDLEdBQ00sZUFBZUksd0JBQXdCQyxJQUFJLEVBQUVDLE9BQU87SUFDdkQsTUFBTUMsV0FBVyxNQUFNUCxvRkFBZUEsQ0FBQ0ssS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCVCw0RUFBaUJBLENBQUNNLFVBQVU7SUFDbkQsTUFBTUksVUFBVTtRQUNaLEdBQUdOLElBQUk7UUFDUE8sUUFBUTtZQUNKQyxVQUFVUixLQUFLTyxNQUFNLENBQUNDLFFBQVE7WUFDOUIsd0NBQXdDO1lBQ3hDQyxPQUFPWiwwRUFBZUEsQ0FBQyxJQUFJYSxXQUFXLE1BQU1WLEtBQUtPLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDRSxXQUFXO1FBQzdFO0lBQ0o7SUFDQSxNQUFNLEVBQUVDLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1mLCtEQUFZQSxDQUFDUSxTQUFTRCxnQkFBZ0I7UUFDOUQsR0FBR0osT0FBTztRQUNWYSxNQUFNO0lBQ1Y7SUFDQSxPQUFPVCxlQUFlVSxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9tdWx0aW1vZGFsL3Zpc3VhbFF1ZXN0aW9uQW5zd2VyaW5nLmpzP2FhOWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgYmFzZTY0RnJvbUJ5dGVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Jhc2U2NEZyb21CeXRlcy5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogQW5zd2VycyBhIHF1ZXN0aW9uIG9uIGFuIGltYWdlLiBSZWNvbW1lbmRlZCBtb2RlbDogZGFuZGVsaW4vdmlsdC1iMzItZmluZXR1bmVkLXZxYS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZpc3VhbFF1ZXN0aW9uQW5zd2VyaW5nKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcInZpc3VhbC1xdWVzdGlvbi1hbnN3ZXJpbmdcIik7XG4gICAgY29uc3QgcmVxQXJncyA9IHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICBxdWVzdGlvbjogYXJncy5pbnB1dHMucXVlc3Rpb24sXG4gICAgICAgICAgICAvLyBjb252ZXJ0IEJsb2Igb3IgQXJyYXlCdWZmZXIgdG8gYmFzZTY0XG4gICAgICAgICAgICBpbWFnZTogYmFzZTY0RnJvbUJ5dGVzKG5ldyBVaW50OEFycmF5KGF3YWl0IGFyZ3MuaW5wdXRzLmltYWdlLmFycmF5QnVmZmVyKCkpKSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QocmVxQXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJ2aXN1YWwtcXVlc3Rpb24tYW5zd2VyaW5nXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJiYXNlNjRGcm9tQnl0ZXMiLCJpbm5lclJlcXVlc3QiLCJ2aXN1YWxRdWVzdGlvbkFuc3dlcmluZyIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJyZXFBcmdzIiwiaW5wdXRzIiwicXVlc3Rpb24iLCJpbWFnZSIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/multimodal/visualQuestionAnswering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletion.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletion.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatCompletion: () => (/* binding */ chatCompletion)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Use the chat completion endpoint to generate a response to a prompt, using OpenAI message completion API no stream\n */ async function chatCompletion(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"conversational\");\n    const { data: response } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"conversational\"\n    });\n    return providerHelper.getResponse(response);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvY2hhdENvbXBsZXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxlQUFlQyxJQUFJLEVBQUVDLE9BQU87SUFDOUMsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxRQUFRLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQ2hFLEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL2NoYXRDb21wbGV0aW9uLmpzPzAyMGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVXNlIHRoZSBjaGF0IGNvbXBsZXRpb24gZW5kcG9pbnQgdG8gZ2VuZXJhdGUgYSByZXNwb25zZSB0byBhIHByb21wdCwgdXNpbmcgT3BlbkFJIG1lc3NhZ2UgY29tcGxldGlvbiBBUEkgbm8gc3RyZWFtXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGF0Q29tcGxldGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJjb252ZXJzYXRpb25hbFwiKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlc3BvbnNlIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJjb252ZXJzYXRpb25hbFwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXNwb25zZSk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJjaGF0Q29tcGxldGlvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzcG9uc2UiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletionStream.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletionStream.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatCompletionStream: () => (/* binding */ chatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Use to continue text from a prompt. Same as `textGeneration` but returns generator that can be read one token at a time\n */ async function* chatCompletionStream(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"conversational\");\n    yield* (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerStreamingRequest)(args, providerHelper, {\n        ...options,\n        task: \"conversational\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvY2hhdENvbXBsZXRpb25TdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ0o7QUFDL0Q7O0NBRUMsR0FDTSxnQkFBZ0JHLHFCQUFxQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ3JELE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE9BQU9KLHdFQUFxQkEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQy9DLEdBQUdKLE9BQU87UUFDVkssTUFBTTtJQUNWO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL25scC9jaGF0Q29tcGxldGlvblN0cmVhbS5qcz8xMjk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyU3RyZWFtaW5nUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIFVzZSB0byBjb250aW51ZSB0ZXh0IGZyb20gYSBwcm9tcHQuIFNhbWUgYXMgYHRleHRHZW5lcmF0aW9uYCBidXQgcmV0dXJucyBnZW5lcmF0b3IgdGhhdCBjYW4gYmUgcmVhZCBvbmUgdG9rZW4gYXQgYSB0aW1lXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogY2hhdENvbXBsZXRpb25TdHJlYW0oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiY29udmVyc2F0aW9uYWxcIik7XG4gICAgeWllbGQqIGlubmVyU3RyZWFtaW5nUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcImNvbnZlcnNhdGlvbmFsXCIsXG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclN0cmVhbWluZ1JlcXVlc3QiLCJjaGF0Q29tcGxldGlvblN0cmVhbSIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJ0YXNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/chatCompletionStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/featureExtraction.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/featureExtraction.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   featureExtraction: () => (/* binding */ featureExtraction)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * This task reads some text and outputs raw float values, that are usually consumed as part of a semantic database/semantic search.\n */ async function featureExtraction(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"feature-extraction\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"feature-extraction\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvZmVhdHVyZUV4dHJhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxrQkFBa0JDLElBQUksRUFBRUMsT0FBTztJQUNqRCxNQUFNQyxXQUFXLE1BQU1OLG9GQUFlQSxDQUFDSSxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJSLDRFQUFpQkEsQ0FBQ0ssVUFBVTtJQUNuRCxNQUFNLEVBQUVJLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1ULCtEQUFZQSxDQUFDRSxNQUFNSyxnQkFBZ0I7UUFDM0QsR0FBR0osT0FBTztRQUNWTyxNQUFNO0lBQ1Y7SUFDQSxPQUFPSCxlQUFlSSxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvZmVhdHVyZUV4dHJhY3Rpb24uanM/ZTM1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuLyoqXG4gKiBUaGlzIHRhc2sgcmVhZHMgc29tZSB0ZXh0IGFuZCBvdXRwdXRzIHJhdyBmbG9hdCB2YWx1ZXMsIHRoYXQgYXJlIHVzdWFsbHkgY29uc3VtZWQgYXMgcGFydCBvZiBhIHNlbWFudGljIGRhdGFiYXNlL3NlbWFudGljIHNlYXJjaC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZlYXR1cmVFeHRyYWN0aW9uKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcImZlYXR1cmUtZXh0cmFjdGlvblwiKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlcyB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwiZmVhdHVyZS1leHRyYWN0aW9uXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJmZWF0dXJlRXh0cmFjdGlvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/featureExtraction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/fillMask.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/fillMask.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillMask: () => (/* binding */ fillMask)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Tries to fill in a hole with a missing word (token to be precise). That’s the base task for BERT models.\n */ async function fillMask(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"fill-mask\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"fill-mask\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvZmlsbE1hc2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxTQUFTQyxJQUFJLEVBQUVDLE9BQU87SUFDeEMsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL2ZpbGxNYXNrLmpzPzY0ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVHJpZXMgdG8gZmlsbCBpbiBhIGhvbGUgd2l0aCBhIG1pc3Npbmcgd29yZCAodG9rZW4gdG8gYmUgcHJlY2lzZSkuIFRoYXTigJlzIHRoZSBiYXNlIHRhc2sgZm9yIEJFUlQgbW9kZWxzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmlsbE1hc2soYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwiZmlsbC1tYXNrXCIpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJmaWxsLW1hc2tcIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsImZpbGxNYXNrIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/fillMask.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/questionAnswering.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/questionAnswering.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   questionAnswering: () => (/* binding */ questionAnswering)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Want to have a nice know-it-all bot that can answer any question?. Recommended model: deepset/roberta-base-squad2\n */ async function questionAnswering(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"question-answering\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"question-answering\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvcXVlc3Rpb25BbnN3ZXJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxrQkFBa0JDLElBQUksRUFBRUMsT0FBTztJQUNqRCxNQUFNQyxXQUFXLE1BQU1OLG9GQUFlQSxDQUFDSSxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJSLDRFQUFpQkEsQ0FBQ0ssVUFBVTtJQUNuRCxNQUFNLEVBQUVJLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1ULCtEQUFZQSxDQUFDRSxNQUFNSyxnQkFBZ0I7UUFDM0QsR0FBR0osT0FBTztRQUNWTyxNQUFNO0lBQ1Y7SUFDQSxPQUFPSCxlQUFlSSxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvcXVlc3Rpb25BbnN3ZXJpbmcuanM/ZWRiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuLyoqXG4gKiBXYW50IHRvIGhhdmUgYSBuaWNlIGtub3ctaXQtYWxsIGJvdCB0aGF0IGNhbiBhbnN3ZXIgYW55IHF1ZXN0aW9uPy4gUmVjb21tZW5kZWQgbW9kZWw6IGRlZXBzZXQvcm9iZXJ0YS1iYXNlLXNxdWFkMlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcXVlc3Rpb25BbnN3ZXJpbmcoYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwicXVlc3Rpb24tYW5zd2VyaW5nXCIpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJxdWVzdGlvbi1hbnN3ZXJpbmdcIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInF1ZXN0aW9uQW5zd2VyaW5nIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/questionAnswering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/sentenceSimilarity.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/sentenceSimilarity.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sentenceSimilarity: () => (/* binding */ sentenceSimilarity)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Calculate the semantic similarity between one text and a list of other sentences by comparing their embeddings.\n */ async function sentenceSimilarity(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"sentence-similarity\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"sentence-similarity\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvc2VudGVuY2VTaW1pbGFyaXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ3REOztDQUVDLEdBQ00sZUFBZUcsbUJBQW1CQyxJQUFJLEVBQUVDLE9BQU87SUFDbEQsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL3NlbnRlbmNlU2ltaWxhcml0eS5qcz9iMWEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgc2VtYW50aWMgc2ltaWxhcml0eSBiZXR3ZWVuIG9uZSB0ZXh0IGFuZCBhIGxpc3Qgb2Ygb3RoZXIgc2VudGVuY2VzIGJ5IGNvbXBhcmluZyB0aGVpciBlbWJlZGRpbmdzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VudGVuY2VTaW1pbGFyaXR5KGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcInNlbnRlbmNlLXNpbWlsYXJpdHlcIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInNlbnRlbmNlLXNpbWlsYXJpdHlcIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInNlbnRlbmNlU2ltaWxhcml0eSIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/sentenceSimilarity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/summarization.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/summarization.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   summarization: () => (/* binding */ summarization)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * This task is well known to summarize longer text into shorter text. Be careful, some models have a maximum length of input. That means that the summary cannot handle full books for instance. Be careful when choosing your model.\n */ async function summarization(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"summarization\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"summarization\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvc3VtbWFyaXphdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUN0RDs7Q0FFQyxHQUNNLGVBQWVHLGNBQWNDLElBQUksRUFBRUMsT0FBTztJQUM3QyxNQUFNQyxXQUFXLE1BQU1OLG9GQUFlQSxDQUFDSSxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJSLDRFQUFpQkEsQ0FBQ0ssVUFBVTtJQUNuRCxNQUFNLEVBQUVJLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1ULCtEQUFZQSxDQUFDRSxNQUFNSyxnQkFBZ0I7UUFDM0QsR0FBR0osT0FBTztRQUNWTyxNQUFNO0lBQ1Y7SUFDQSxPQUFPSCxlQUFlSSxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvc3VtbWFyaXphdGlvbi5qcz9iMGViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIFRoaXMgdGFzayBpcyB3ZWxsIGtub3duIHRvIHN1bW1hcml6ZSBsb25nZXIgdGV4dCBpbnRvIHNob3J0ZXIgdGV4dC4gQmUgY2FyZWZ1bCwgc29tZSBtb2RlbHMgaGF2ZSBhIG1heGltdW0gbGVuZ3RoIG9mIGlucHV0LiBUaGF0IG1lYW5zIHRoYXQgdGhlIHN1bW1hcnkgY2Fubm90IGhhbmRsZSBmdWxsIGJvb2tzIGZvciBpbnN0YW5jZS4gQmUgY2FyZWZ1bCB3aGVuIGNob29zaW5nIHlvdXIgbW9kZWwuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdW1tYXJpemF0aW9uKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcInN1bW1hcml6YXRpb25cIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInN1bW1hcml6YXRpb25cIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInN1bW1hcml6YXRpb24iLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwiZGF0YSIsInJlcyIsInRhc2siLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/summarization.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tableQuestionAnswering.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tableQuestionAnswering.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tableQuestionAnswering: () => (/* binding */ tableQuestionAnswering)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions in plain english! Recommended model: google/tapas-base-finetuned-wtq.\n */ async function tableQuestionAnswering(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"table-question-answering\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"table-question-answering\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdGFibGVRdWVzdGlvbkFuc3dlcmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUN0RDs7Q0FFQyxHQUNNLGVBQWVHLHVCQUF1QkMsSUFBSSxFQUFFQyxPQUFPO0lBQ3RELE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE1BQU0sRUFBRUksTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVQsK0RBQVlBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUMzRCxHQUFHSixPQUFPO1FBQ1ZPLE1BQU07SUFDVjtJQUNBLE9BQU9ILGVBQWVJLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL25scC90YWJsZVF1ZXN0aW9uQW5zd2VyaW5nLmpzPzZlNjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogRG9u4oCZdCBrbm93IFNRTD8gRG9u4oCZdCB3YW50IHRvIGRpdmUgaW50byBhIGxhcmdlIHNwcmVhZHNoZWV0PyBBc2sgcXVlc3Rpb25zIGluIHBsYWluIGVuZ2xpc2ghIFJlY29tbWVuZGVkIG1vZGVsOiBnb29nbGUvdGFwYXMtYmFzZS1maW5ldHVuZWQtd3RxLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGFibGVRdWVzdGlvbkFuc3dlcmluZyhhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0YWJsZS1xdWVzdGlvbi1hbnN3ZXJpbmdcIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInRhYmxlLXF1ZXN0aW9uLWFuc3dlcmluZ1wiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwidGFibGVRdWVzdGlvbkFuc3dlcmluZyIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tableQuestionAnswering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textClassification.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textClassification.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textClassification: () => (/* binding */ textClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Usually used for sentiment-analysis this will output the likelihood of classes of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english\n */ async function textClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-classification\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdGV4dENsYXNzaWZpY2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ3REOztDQUVDLEdBQ00sZUFBZUcsbUJBQW1CQyxJQUFJLEVBQUVDLE9BQU87SUFDbEQsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL3RleHRDbGFzc2lmaWNhdGlvbi5qcz9lY2U5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIFVzdWFsbHkgdXNlZCBmb3Igc2VudGltZW50LWFuYWx5c2lzIHRoaXMgd2lsbCBvdXRwdXQgdGhlIGxpa2VsaWhvb2Qgb2YgY2xhc3NlcyBvZiBhbiBpbnB1dC4gUmVjb21tZW5kZWQgbW9kZWw6IGRpc3RpbGJlcnQtYmFzZS11bmNhc2VkLWZpbmV0dW5lZC1zc3QtMi1lbmdsaXNoXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0Q2xhc3NpZmljYXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwidGV4dC1jbGFzc2lmaWNhdGlvblwiKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlcyB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwidGV4dC1jbGFzc2lmaWNhdGlvblwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwidGV4dENsYXNzaWZpY2F0aW9uIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsImRhdGEiLCJyZXMiLCJ0YXNrIiwiZ2V0UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGeneration.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGeneration.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textGeneration: () => (/* binding */ textGeneration)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Use to continue text from a prompt. This is a very generic task. Recommended model: gpt2 (it’s a simple model, but fun to play with).\n */ async function textGeneration(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-generation\");\n    const { data: response } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-generation\"\n    });\n    return providerHelper.getResponse(response);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdGV4dEdlbmVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxlQUFlQyxJQUFJLEVBQUVDLE9BQU87SUFDOUMsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxRQUFRLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQ2hFLEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL3RleHRHZW5lcmF0aW9uLmpzP2JkNDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVXNlIHRvIGNvbnRpbnVlIHRleHQgZnJvbSBhIHByb21wdC4gVGhpcyBpcyBhIHZlcnkgZ2VuZXJpYyB0YXNrLiBSZWNvbW1lbmRlZCBtb2RlbDogZ3B0MiAoaXTigJlzIGEgc2ltcGxlIG1vZGVsLCBidXQgZnVuIHRvIHBsYXkgd2l0aCkuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXh0R2VuZXJhdGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0ZXh0LWdlbmVyYXRpb25cIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXNwb25zZSB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwidGV4dC1nZW5lcmF0aW9uXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlc3BvbnNlKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInRleHRHZW5lcmF0aW9uIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsImRhdGEiLCJyZXNwb25zZSIsInRhc2siLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGeneration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGenerationStream.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGenerationStream.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   textGenerationStream: () => (/* binding */ textGenerationStream)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Use to continue text from a prompt. Same as `textGeneration` but returns generator that can be read one token at a time\n */ async function* textGenerationStream(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"text-generation\");\n    yield* (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerStreamingRequest)(args, providerHelper, {\n        ...options,\n        task: \"text-generation\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdGV4dEdlbmVyYXRpb25TdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ0o7QUFDL0Q7O0NBRUMsR0FDTSxnQkFBZ0JHLHFCQUFxQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ3JELE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE9BQU9KLHdFQUFxQkEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQy9DLEdBQUdKLE9BQU87UUFDVkssTUFBTTtJQUNWO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL25scC90ZXh0R2VuZXJhdGlvblN0cmVhbS5qcz8zNmYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0SW5mZXJlbmNlUHJvdmlkZXJNYXBwaW5nLmpzXCI7XG5pbXBvcnQgeyBnZXRQcm92aWRlckhlbHBlciB9IGZyb20gXCIuLi8uLi9saWIvZ2V0UHJvdmlkZXJIZWxwZXIuanNcIjtcbmltcG9ydCB7IGlubmVyU3RyZWFtaW5nUmVxdWVzdCB9IGZyb20gXCIuLi8uLi91dGlscy9yZXF1ZXN0LmpzXCI7XG4vKipcbiAqIFVzZSB0byBjb250aW51ZSB0ZXh0IGZyb20gYSBwcm9tcHQuIFNhbWUgYXMgYHRleHRHZW5lcmF0aW9uYCBidXQgcmV0dXJucyBnZW5lcmF0b3IgdGhhdCBjYW4gYmUgcmVhZCBvbmUgdG9rZW4gYXQgYSB0aW1lXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogdGV4dEdlbmVyYXRpb25TdHJlYW0oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwidGV4dC1nZW5lcmF0aW9uXCIpO1xuICAgIHlpZWxkKiBpbm5lclN0cmVhbWluZ1JlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJ0ZXh0LWdlbmVyYXRpb25cIixcbiAgICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyU3RyZWFtaW5nUmVxdWVzdCIsInRleHRHZW5lcmF0aW9uU3RyZWFtIiwiYXJncyIsIm9wdGlvbnMiLCJwcm92aWRlciIsIm1vZGVsIiwiZW5kcG9pbnRVcmwiLCJwcm92aWRlckhlbHBlciIsInRhc2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/textGenerationStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tokenClassification.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tokenClassification.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tokenClassification: () => (/* binding */ tokenClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Usually used for sentence parsing, either grammatical, or Named Entity Recognition (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english\n */ async function tokenClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"token-classification\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"token-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdG9rZW5DbGFzc2lmaWNhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUN0RDs7Q0FFQyxHQUNNLGVBQWVHLG9CQUFvQkMsSUFBSSxFQUFFQyxPQUFPO0lBQ25ELE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE1BQU0sRUFBRUksTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVQsK0RBQVlBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUMzRCxHQUFHSixPQUFPO1FBQ1ZPLE1BQU07SUFDVjtJQUNBLE9BQU9ILGVBQWVJLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL25scC90b2tlbkNsYXNzaWZpY2F0aW9uLmpzPzUwNjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVXN1YWxseSB1c2VkIGZvciBzZW50ZW5jZSBwYXJzaW5nLCBlaXRoZXIgZ3JhbW1hdGljYWwsIG9yIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbiAoTkVSKSB0byB1bmRlcnN0YW5kIGtleXdvcmRzIGNvbnRhaW5lZCB3aXRoaW4gdGV4dC4gUmVjb21tZW5kZWQgbW9kZWw6IGRibWR6L2JlcnQtbGFyZ2UtY2FzZWQtZmluZXR1bmVkLWNvbmxsMDMtZW5nbGlzaFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9rZW5DbGFzc2lmaWNhdGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0b2tlbi1jbGFzc2lmaWNhdGlvblwiKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlcyB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwidG9rZW4tY2xhc3NpZmljYXRpb25cIixcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvdmlkZXJIZWxwZXIuZ2V0UmVzcG9uc2UocmVzKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlUHJvdmlkZXIiLCJnZXRQcm92aWRlckhlbHBlciIsImlubmVyUmVxdWVzdCIsInRva2VuQ2xhc3NpZmljYXRpb24iLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwiZGF0YSIsInJlcyIsInRhc2siLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/tokenClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/translation.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/translation.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   translation: () => (/* binding */ translation)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * This task is well known to translate text from one language to another. Recommended model: Helsinki-NLP/opus-mt-ru-en.\n */ async function translation(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"translation\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"translation\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvdHJhbnNsYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyRTtBQUNSO0FBQ2I7QUFDdEQ7O0NBRUMsR0FDTSxlQUFlRyxZQUFZQyxJQUFJLEVBQUVDLE9BQU87SUFDM0MsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvbmxwL3RyYW5zbGF0aW9uLmpzPzYzMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVGhpcyB0YXNrIGlzIHdlbGwga25vd24gdG8gdHJhbnNsYXRlIHRleHQgZnJvbSBvbmUgbGFuZ3VhZ2UgdG8gYW5vdGhlci4gUmVjb21tZW5kZWQgbW9kZWw6IEhlbHNpbmtpLU5MUC9vcHVzLW10LXJ1LWVuLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdHJhbnNsYXRpb24oYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgcmVzb2x2ZVByb3ZpZGVyKGFyZ3MucHJvdmlkZXIsIGFyZ3MubW9kZWwsIGFyZ3MuZW5kcG9pbnRVcmwpO1xuICAgIGNvbnN0IHByb3ZpZGVySGVscGVyID0gZ2V0UHJvdmlkZXJIZWxwZXIocHJvdmlkZXIsIFwidHJhbnNsYXRpb25cIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInRyYW5zbGF0aW9uXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJ0cmFuc2xhdGlvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/translation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/zeroShotClassification.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/nlp/zeroShotClassification.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zeroShotClassification: () => (/* binding */ zeroShotClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * This task is super useful to try out classification with zero code, you simply pass a sentence/paragraph and the possible labels for that sentence, and you get a result. Recommended model: facebook/bart-large-mnli.\n */ async function zeroShotClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"zero-shot-classification\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"zero-shot-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy9ubHAvemVyb1Nob3RDbGFzc2lmaWNhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUN0RDs7Q0FFQyxHQUNNLGVBQWVHLHVCQUF1QkMsSUFBSSxFQUFFQyxPQUFPO0lBQ3RELE1BQU1DLFdBQVcsTUFBTU4sb0ZBQWVBLENBQUNJLEtBQUtFLFFBQVEsRUFBRUYsS0FBS0csS0FBSyxFQUFFSCxLQUFLSSxXQUFXO0lBQ2xGLE1BQU1DLGlCQUFpQlIsNEVBQWlCQSxDQUFDSyxVQUFVO0lBQ25ELE1BQU0sRUFBRUksTUFBTUMsR0FBRyxFQUFFLEdBQUcsTUFBTVQsK0RBQVlBLENBQUNFLE1BQU1LLGdCQUFnQjtRQUMzRCxHQUFHSixPQUFPO1FBQ1ZPLE1BQU07SUFDVjtJQUNBLE9BQU9ILGVBQWVJLFdBQVcsQ0FBQ0Y7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3Rhc2tzL25scC96ZXJvU2hvdENsYXNzaWZpY2F0aW9uLmpzPzFmZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogVGhpcyB0YXNrIGlzIHN1cGVyIHVzZWZ1bCB0byB0cnkgb3V0IGNsYXNzaWZpY2F0aW9uIHdpdGggemVybyBjb2RlLCB5b3Ugc2ltcGx5IHBhc3MgYSBzZW50ZW5jZS9wYXJhZ3JhcGggYW5kIHRoZSBwb3NzaWJsZSBsYWJlbHMgZm9yIHRoYXQgc2VudGVuY2UsIGFuZCB5b3UgZ2V0IGEgcmVzdWx0LiBSZWNvbW1lbmRlZCBtb2RlbDogZmFjZWJvb2svYmFydC1sYXJnZS1tbmxpLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gemVyb1Nob3RDbGFzc2lmaWNhdGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ6ZXJvLXNob3QtY2xhc3NpZmljYXRpb25cIik7XG4gICAgY29uc3QgeyBkYXRhOiByZXMgfSA9IGF3YWl0IGlubmVyUmVxdWVzdChhcmdzLCBwcm92aWRlckhlbHBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0YXNrOiBcInplcm8tc2hvdC1jbGFzc2lmaWNhdGlvblwiLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm92aWRlckhlbHBlci5nZXRSZXNwb25zZShyZXMpO1xufVxuIl0sIm5hbWVzIjpbInJlc29sdmVQcm92aWRlciIsImdldFByb3ZpZGVySGVscGVyIiwiaW5uZXJSZXF1ZXN0IiwiemVyb1Nob3RDbGFzc2lmaWNhdGlvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/nlp/zeroShotClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularClassification.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularClassification.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tabularClassification: () => (/* binding */ tabularClassification)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Predicts target label for a given set of features in tabular form.\n * Typically, you will want to train a classification model on your training data and use it with your new data of the same format.\n * Example model: vvmnnnkv/wine-quality\n */ async function tabularClassification(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"tabular-classification\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"tabular-classification\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy90YWJ1bGFyL3RhYnVsYXJDbGFzc2lmaWNhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJFO0FBQ1I7QUFDYjtBQUN0RDs7OztDQUlDLEdBQ00sZUFBZUcsc0JBQXNCQyxJQUFJLEVBQUVDLE9BQU87SUFDckQsTUFBTUMsV0FBVyxNQUFNTixvRkFBZUEsQ0FBQ0ksS0FBS0UsUUFBUSxFQUFFRixLQUFLRyxLQUFLLEVBQUVILEtBQUtJLFdBQVc7SUFDbEYsTUFBTUMsaUJBQWlCUiw0RUFBaUJBLENBQUNLLFVBQVU7SUFDbkQsTUFBTSxFQUFFSSxNQUFNQyxHQUFHLEVBQUUsR0FBRyxNQUFNVCwrREFBWUEsQ0FBQ0UsTUFBTUssZ0JBQWdCO1FBQzNELEdBQUdKLE9BQU87UUFDVk8sTUFBTTtJQUNWO0lBQ0EsT0FBT0gsZUFBZUksV0FBVyxDQUFDRjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdGFza3MvdGFidWxhci90YWJ1bGFyQ2xhc3NpZmljYXRpb24uanM/OWRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldEluZmVyZW5jZVByb3ZpZGVyTWFwcGluZy5qc1wiO1xuaW1wb3J0IHsgZ2V0UHJvdmlkZXJIZWxwZXIgfSBmcm9tIFwiLi4vLi4vbGliL2dldFByb3ZpZGVySGVscGVyLmpzXCI7XG5pbXBvcnQgeyBpbm5lclJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcmVxdWVzdC5qc1wiO1xuLyoqXG4gKiBQcmVkaWN0cyB0YXJnZXQgbGFiZWwgZm9yIGEgZ2l2ZW4gc2V0IG9mIGZlYXR1cmVzIGluIHRhYnVsYXIgZm9ybS5cbiAqIFR5cGljYWxseSwgeW91IHdpbGwgd2FudCB0byB0cmFpbiBhIGNsYXNzaWZpY2F0aW9uIG1vZGVsIG9uIHlvdXIgdHJhaW5pbmcgZGF0YSBhbmQgdXNlIGl0IHdpdGggeW91ciBuZXcgZGF0YSBvZiB0aGUgc2FtZSBmb3JtYXQuXG4gKiBFeGFtcGxlIG1vZGVsOiB2dm1ubm5rdi93aW5lLXF1YWxpdHlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRhYnVsYXJDbGFzc2lmaWNhdGlvbihhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCByZXNvbHZlUHJvdmlkZXIoYXJncy5wcm92aWRlciwgYXJncy5tb2RlbCwgYXJncy5lbmRwb2ludFVybCk7XG4gICAgY29uc3QgcHJvdmlkZXJIZWxwZXIgPSBnZXRQcm92aWRlckhlbHBlcihwcm92aWRlciwgXCJ0YWJ1bGFyLWNsYXNzaWZpY2F0aW9uXCIpO1xuICAgIGNvbnN0IHsgZGF0YTogcmVzIH0gPSBhd2FpdCBpbm5lclJlcXVlc3QoYXJncywgcHJvdmlkZXJIZWxwZXIsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGFzazogXCJ0YWJ1bGFyLWNsYXNzaWZpY2F0aW9uXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJ0YWJ1bGFyQ2xhc3NpZmljYXRpb24iLCJhcmdzIiwib3B0aW9ucyIsInByb3ZpZGVyIiwibW9kZWwiLCJlbmRwb2ludFVybCIsInByb3ZpZGVySGVscGVyIiwiZGF0YSIsInJlcyIsInRhc2siLCJnZXRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularClassification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularRegression.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularRegression.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tabularRegression: () => (/* binding */ tabularRegression)\n/* harmony export */ });\n/* harmony import */ var _lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/getInferenceProviderMapping.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getInferenceProviderMapping.js\");\n/* harmony import */ var _lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/getProviderHelper.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/getProviderHelper.js\");\n/* harmony import */ var _utils_request_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/request.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\");\n\n\n\n/**\n * Predicts target value for a given set of features in tabular form.\n * Typically, you will want to train a regression model on your training data and use it with your new data of the same format.\n * Example model: scikit-learn/Fish-Weight\n */ async function tabularRegression(args, options) {\n    const provider = await (0,_lib_getInferenceProviderMapping_js__WEBPACK_IMPORTED_MODULE_0__.resolveProvider)(args.provider, args.model, args.endpointUrl);\n    const providerHelper = (0,_lib_getProviderHelper_js__WEBPACK_IMPORTED_MODULE_1__.getProviderHelper)(provider, \"tabular-regression\");\n    const { data: res } = await (0,_utils_request_js__WEBPACK_IMPORTED_MODULE_2__.innerRequest)(args, providerHelper, {\n        ...options,\n        task: \"tabular-regression\"\n    });\n    return providerHelper.getResponse(res);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy90YWJ1bGFyL3RhYnVsYXJSZWdyZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMkU7QUFDUjtBQUNiO0FBQ3REOzs7O0NBSUMsR0FDTSxlQUFlRyxrQkFBa0JDLElBQUksRUFBRUMsT0FBTztJQUNqRCxNQUFNQyxXQUFXLE1BQU1OLG9GQUFlQSxDQUFDSSxLQUFLRSxRQUFRLEVBQUVGLEtBQUtHLEtBQUssRUFBRUgsS0FBS0ksV0FBVztJQUNsRixNQUFNQyxpQkFBaUJSLDRFQUFpQkEsQ0FBQ0ssVUFBVTtJQUNuRCxNQUFNLEVBQUVJLE1BQU1DLEdBQUcsRUFBRSxHQUFHLE1BQU1ULCtEQUFZQSxDQUFDRSxNQUFNSyxnQkFBZ0I7UUFDM0QsR0FBR0osT0FBTztRQUNWTyxNQUFNO0lBQ1Y7SUFDQSxPQUFPSCxlQUFlSSxXQUFXLENBQUNGO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90YXNrcy90YWJ1bGFyL3RhYnVsYXJSZWdyZXNzaW9uLmpzPzgwZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzb2x2ZVByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRJbmZlcmVuY2VQcm92aWRlck1hcHBpbmcuanNcIjtcbmltcG9ydCB7IGdldFByb3ZpZGVySGVscGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9nZXRQcm92aWRlckhlbHBlci5qc1wiO1xuaW1wb3J0IHsgaW5uZXJSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QuanNcIjtcbi8qKlxuICogUHJlZGljdHMgdGFyZ2V0IHZhbHVlIGZvciBhIGdpdmVuIHNldCBvZiBmZWF0dXJlcyBpbiB0YWJ1bGFyIGZvcm0uXG4gKiBUeXBpY2FsbHksIHlvdSB3aWxsIHdhbnQgdG8gdHJhaW4gYSByZWdyZXNzaW9uIG1vZGVsIG9uIHlvdXIgdHJhaW5pbmcgZGF0YSBhbmQgdXNlIGl0IHdpdGggeW91ciBuZXcgZGF0YSBvZiB0aGUgc2FtZSBmb3JtYXQuXG4gKiBFeGFtcGxlIG1vZGVsOiBzY2lraXQtbGVhcm4vRmlzaC1XZWlnaHRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRhYnVsYXJSZWdyZXNzaW9uKGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHJlc29sdmVQcm92aWRlcihhcmdzLnByb3ZpZGVyLCBhcmdzLm1vZGVsLCBhcmdzLmVuZHBvaW50VXJsKTtcbiAgICBjb25zdCBwcm92aWRlckhlbHBlciA9IGdldFByb3ZpZGVySGVscGVyKHByb3ZpZGVyLCBcInRhYnVsYXItcmVncmVzc2lvblwiKTtcbiAgICBjb25zdCB7IGRhdGE6IHJlcyB9ID0gYXdhaXQgaW5uZXJSZXF1ZXN0KGFyZ3MsIHByb3ZpZGVySGVscGVyLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRhc2s6IFwidGFidWxhci1yZWdyZXNzaW9uXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3ZpZGVySGVscGVyLmdldFJlc3BvbnNlKHJlcyk7XG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJIZWxwZXIiLCJpbm5lclJlcXVlc3QiLCJ0YWJ1bGFyUmVncmVzc2lvbiIsImFyZ3MiLCJvcHRpb25zIiwicHJvdmlkZXIiLCJtb2RlbCIsImVuZHBvaW50VXJsIiwicHJvdmlkZXJIZWxwZXIiLCJkYXRhIiwicmVzIiwidGFzayIsImdldFJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/tasks/tabular/tabularRegression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INFERENCE_PROVIDERS: () => (/* binding */ INFERENCE_PROVIDERS),\n/* harmony export */   PROVIDERS_OR_POLICIES: () => (/* binding */ PROVIDERS_OR_POLICIES)\n/* harmony export */ });\nconst INFERENCE_PROVIDERS = [\n    \"black-forest-labs\",\n    \"cerebras\",\n    \"cohere\",\n    \"fal-ai\",\n    \"featherless-ai\",\n    \"fireworks-ai\",\n    \"groq\",\n    \"hf-inference\",\n    \"hyperbolic\",\n    \"nebius\",\n    \"novita\",\n    \"nscale\",\n    \"openai\",\n    \"ovhcloud\",\n    \"replicate\",\n    \"sambanova\",\n    \"scaleway\",\n    \"together\"\n];\nconst PROVIDERS_OR_POLICIES = [\n    ...INFERENCE_PROVIDERS,\n    \"auto\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLHNCQUFzQjtJQUMvQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSCxDQUFDO0FBQ0ssTUFBTUMsd0JBQXdCO09BQUlEO0lBQXFCO0NBQU8sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdHlwZXMuanM/OTEwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSU5GRVJFTkNFX1BST1ZJREVSUyA9IFtcbiAgICBcImJsYWNrLWZvcmVzdC1sYWJzXCIsXG4gICAgXCJjZXJlYnJhc1wiLFxuICAgIFwiY29oZXJlXCIsXG4gICAgXCJmYWwtYWlcIixcbiAgICBcImZlYXRoZXJsZXNzLWFpXCIsXG4gICAgXCJmaXJld29ya3MtYWlcIixcbiAgICBcImdyb3FcIixcbiAgICBcImhmLWluZmVyZW5jZVwiLFxuICAgIFwiaHlwZXJib2xpY1wiLFxuICAgIFwibmViaXVzXCIsXG4gICAgXCJub3ZpdGFcIixcbiAgICBcIm5zY2FsZVwiLFxuICAgIFwib3BlbmFpXCIsXG4gICAgXCJvdmhjbG91ZFwiLFxuICAgIFwicmVwbGljYXRlXCIsXG4gICAgXCJzYW1iYW5vdmFcIixcbiAgICBcInNjYWxld2F5XCIsXG4gICAgXCJ0b2dldGhlclwiLFxuXTtcbmV4cG9ydCBjb25zdCBQUk9WSURFUlNfT1JfUE9MSUNJRVMgPSBbLi4uSU5GRVJFTkNFX1BST1ZJREVSUywgXCJhdXRvXCJdO1xuIl0sIm5hbWVzIjpbIklORkVSRU5DRV9QUk9WSURFUlMiLCJQUk9WSURFUlNfT1JfUE9MSUNJRVMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64FromBytes: () => (/* binding */ base64FromBytes)\n/* harmony export */ });\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy9iYXNlNjRGcm9tQnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGdCQUFnQkMsR0FBRztJQUMvQixJQUFJQyxXQUFXQyxNQUFNLEVBQUU7UUFDbkIsT0FBT0QsV0FBV0MsTUFBTSxDQUFDQyxJQUFJLENBQUNILEtBQUtJLFFBQVEsQ0FBQztJQUNoRCxPQUNLO1FBQ0QsTUFBTUMsTUFBTSxFQUFFO1FBQ2RMLElBQUlNLE9BQU8sQ0FBQyxDQUFDQztZQUNURixJQUFJRyxJQUFJLENBQUNDLE9BQU9DLFlBQVksQ0FBQ0g7UUFDakM7UUFDQSxPQUFPTixXQUFXVSxJQUFJLENBQUNOLElBQUlPLElBQUksQ0FBQztJQUNwQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy9iYXNlNjRGcm9tQnl0ZXMuanM/ZWY1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYmFzZTY0RnJvbUJ5dGVzKGFycikge1xuICAgIGlmIChnbG9iYWxUaGlzLkJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgYmluID0gW107XG4gICAgICAgIGFyci5mb3JFYWNoKChieXRlKSA9PiB7XG4gICAgICAgICAgICBiaW4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBnbG9iYWxUaGlzLmJ0b2EoYmluLmpvaW4oXCJcIikpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJiYXNlNjRGcm9tQnl0ZXMiLCJhcnIiLCJnbG9iYWxUaGlzIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiYmluIiwiZm9yRWFjaCIsImJ5dGUiLCJwdXNoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYnRvYSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/base64FromBytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/delay.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/delay.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\nfunction delay(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>resolve(), ms);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy9kZWxheS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsTUFBTUMsRUFBRTtJQUNwQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7UUFDaEJDLFdBQVcsSUFBTUQsV0FBV0Y7SUFDaEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdXRpbHMvZGVsYXkuanM/ZWNmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCksIG1zKTtcbiAgICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJkZWxheSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/omit.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   omit: () => (/* binding */ omit)\n/* harmony export */ });\n/* harmony import */ var _pick_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pick.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/pick.js\");\n/* harmony import */ var _typedInclude_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typedInclude.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedInclude.js\");\n\n\n/**\n * Return copy of object, omitting blocklisted array of props\n */ function omit(o, props) {\n    const propsArr = Array.isArray(props) ? props : [\n        props\n    ];\n    const letsKeep = Object.keys(o).filter((prop)=>!(0,_typedInclude_js__WEBPACK_IMPORTED_MODULE_1__.typedInclude)(propsArr, prop));\n    return (0,_pick_js__WEBPACK_IMPORTED_MODULE_0__.pick)(o, letsKeep);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy9vbWl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNnQjtBQUNqRDs7Q0FFQyxHQUNNLFNBQVNFLEtBQUtDLENBQUMsRUFBRUMsS0FBSztJQUN6QixNQUFNQyxXQUFXQyxNQUFNQyxPQUFPLENBQUNILFNBQVNBLFFBQVE7UUFBQ0E7S0FBTTtJQUN2RCxNQUFNSSxXQUFXQyxPQUFPQyxJQUFJLENBQUNQLEdBQUdRLE1BQU0sQ0FBQyxDQUFDQyxPQUFTLENBQUNYLDhEQUFZQSxDQUFDSSxVQUFVTztJQUN6RSxPQUFPWiw4Q0FBSUEsQ0FBQ0csR0FBR0s7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvaW5mZXJlbmNlL2Rpc3QvZXNtL3V0aWxzL29taXQuanM/MmUwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwaWNrIH0gZnJvbSBcIi4vcGljay5qc1wiO1xuaW1wb3J0IHsgdHlwZWRJbmNsdWRlIH0gZnJvbSBcIi4vdHlwZWRJbmNsdWRlLmpzXCI7XG4vKipcbiAqIFJldHVybiBjb3B5IG9mIG9iamVjdCwgb21pdHRpbmcgYmxvY2tsaXN0ZWQgYXJyYXkgb2YgcHJvcHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9taXQobywgcHJvcHMpIHtcbiAgICBjb25zdCBwcm9wc0FyciA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xuICAgIGNvbnN0IGxldHNLZWVwID0gT2JqZWN0LmtleXMobykuZmlsdGVyKChwcm9wKSA9PiAhdHlwZWRJbmNsdWRlKHByb3BzQXJyLCBwcm9wKSk7XG4gICAgcmV0dXJuIHBpY2sobywgbGV0c0tlZXApO1xufVxuIl0sIm5hbWVzIjpbInBpY2siLCJ0eXBlZEluY2x1ZGUiLCJvbWl0IiwibyIsInByb3BzIiwicHJvcHNBcnIiLCJBcnJheSIsImlzQXJyYXkiLCJsZXRzS2VlcCIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJwcm9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/omit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/pick.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/pick.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pick: () => (/* binding */ pick)\n/* harmony export */ });\n/**\n * Return copy of object, only keeping allowlisted properties.\n */ function pick(o, props) {\n    return Object.assign({}, ...props.map((prop)=>{\n        if (o[prop] !== undefined) {\n            return {\n                [prop]: o[prop]\n            };\n        }\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy9waWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLFNBQVNBLEtBQUtDLENBQUMsRUFBRUMsS0FBSztJQUN6QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxNQUFNRixNQUFNRyxHQUFHLENBQUMsQ0FBQ0M7UUFDbkMsSUFBSUwsQ0FBQyxDQUFDSyxLQUFLLEtBQUtDLFdBQVc7WUFDdkIsT0FBTztnQkFBRSxDQUFDRCxLQUFLLEVBQUVMLENBQUMsQ0FBQ0ssS0FBSztZQUFDO1FBQzdCO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdXRpbHMvcGljay5qcz9jZTNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJuIGNvcHkgb2Ygb2JqZWN0LCBvbmx5IGtlZXBpbmcgYWxsb3dsaXN0ZWQgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBpY2sobywgcHJvcHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgLi4ucHJvcHMubWFwKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChvW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IFtwcm9wXTogb1twcm9wXSB9O1xuICAgICAgICB9XG4gICAgfSkpO1xufVxuIl0sIm5hbWVzIjpbInBpY2siLCJvIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJtYXAiLCJwcm9wIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/pick.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/request.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   innerRequest: () => (/* binding */ innerRequest),\n/* harmony export */   innerStreamingRequest: () => (/* binding */ innerStreamingRequest)\n/* harmony export */ });\n/* harmony import */ var _lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/makeRequestOptions.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/lib/makeRequestOptions.js\");\n/* harmony import */ var _vendor_fetch_event_source_parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/fetch-event-source/parse.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/vendor/fetch-event-source/parse.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/@huggingface/inference/dist/esm/errors.js\");\n\n\n\nfunction bodyToJson(body) {\n    let data = null;\n    if (body instanceof Blob || body instanceof ArrayBuffer) {\n        data = \"[Blob or ArrayBuffer]\";\n    } else if (typeof body === \"string\") {\n        try {\n            data = JSON.parse(body);\n        } catch  {\n            data = body;\n        }\n    }\n    if (data.accessToken) {\n        data.accessToken = \"[REDACTED]\";\n    }\n    return data;\n}\n/**\n * Primitive to make custom calls to the inference provider\n */ async function innerRequest(args, providerHelper, options) {\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_0__.makeRequestOptions)(args, providerHelper, options);\n    const response = await (options?.fetch ?? fetch)(url, info);\n    const requestContext = {\n        url,\n        info\n    };\n    if (options?.retry_on_error !== false && response.status === 503) {\n        return innerRequest(args, providerHelper, options);\n    }\n    if (!response.ok) {\n        const contentType = response.headers.get(\"Content-Type\");\n        if ([\n            \"application/json\",\n            \"application/problem+json\"\n        ].some((ct)=>contentType?.startsWith(ct))) {\n            const output = await response.json();\n            if ([\n                400,\n                422,\n                404,\n                500\n            ].includes(response.status) && options?.chatCompletion) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Provider ${args.provider} does not seem to support chat completion for model ${args.model} . Error: ${JSON.stringify(output.error)}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n            if (typeof output.error === \"string\" || typeof output.detail === \"string\" || typeof output.message === \"string\") {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: ${output.error ?? output.detail ?? output.message}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            } else {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: an HTTP error occurred when requesting the provider.`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n        }\n        const message = contentType?.startsWith(\"text/plain;\") ? await response.text() : undefined;\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: ${message ?? \"an HTTP error occurred when requesting the provider\"}`, {\n            url,\n            method: info.method ?? \"GET\",\n            headers: info.headers,\n            body: bodyToJson(info.body)\n        }, {\n            requestId: response.headers.get(\"x-request-id\") ?? \"\",\n            status: response.status,\n            body: message ?? \"\"\n        });\n    }\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n        const data = await response.json();\n        return {\n            data,\n            requestContext\n        };\n    }\n    const blob = await response.blob();\n    return {\n        data: blob,\n        requestContext\n    };\n}\n/**\n * Primitive to make custom inference calls that expect server-sent events, and returns the response through a generator\n */ async function* innerStreamingRequest(args, providerHelper, options) {\n    const { url, info } = await (0,_lib_makeRequestOptions_js__WEBPACK_IMPORTED_MODULE_0__.makeRequestOptions)({\n        ...args,\n        stream: true\n    }, providerHelper, options);\n    const response = await (options?.fetch ?? fetch)(url, info);\n    if (options?.retry_on_error !== false && response.status === 503) {\n        return yield* innerStreamingRequest(args, providerHelper, options);\n    }\n    if (!response.ok) {\n        if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n            const output = await response.json();\n            if ([\n                400,\n                422,\n                404,\n                500\n            ].includes(response.status) && options?.chatCompletion) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Provider ${args.provider} does not seem to support chat completion for model ${args.model} . Error: ${JSON.stringify(output.error)}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n            if (typeof output.error === \"string\") {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: ${output.error}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n            if (output.error && \"message\" in output.error && typeof output.error.message === \"string\") {\n                /// OpenAI errors\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: ${output.error.message}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n            // Sambanova errors\n            if (typeof output.message === \"string\") {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: ${output.message}`, {\n                    url,\n                    method: info.method ?? \"GET\",\n                    headers: info.headers,\n                    body: bodyToJson(info.body)\n                }, {\n                    requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                    status: response.status,\n                    body: output\n                });\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: an HTTP error occurred when requesting the provider.`, {\n            url,\n            method: info.method ?? \"GET\",\n            headers: info.headers,\n            body: bodyToJson(info.body)\n        }, {\n            requestId: response.headers.get(\"x-request-id\") ?? \"\",\n            status: response.status,\n            body: \"\"\n        });\n    }\n    if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: server does not support event stream content type, it returned ` + response.headers.get(\"content-type\"), {\n            url,\n            method: info.method ?? \"GET\",\n            headers: info.headers,\n            body: bodyToJson(info.body)\n        }, {\n            requestId: response.headers.get(\"x-request-id\") ?? \"\",\n            status: response.status,\n            body: \"\"\n        });\n    }\n    if (!response.body) {\n        return;\n    }\n    const reader = response.body.getReader();\n    let events = [];\n    const onEvent = (event)=>{\n        // accumulate events in array\n        events.push(event);\n    };\n    const onChunk = (0,_vendor_fetch_event_source_parse_js__WEBPACK_IMPORTED_MODULE_1__.getLines)((0,_vendor_fetch_event_source_parse_js__WEBPACK_IMPORTED_MODULE_1__.getMessages)(()=>{}, ()=>{}, onEvent));\n    try {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) {\n                return;\n            }\n            onChunk(value);\n            for (const event of events){\n                if (event.data.length > 0) {\n                    if (event.data === \"[DONE]\") {\n                        return;\n                    }\n                    const data = JSON.parse(event.data);\n                    if (typeof data === \"object\" && data !== null && \"error\" in data) {\n                        const errorStr = typeof data.error === \"string\" ? data.error : typeof data.error === \"object\" && data.error && \"message\" in data.error && typeof data.error.message === \"string\" ? data.error.message : JSON.stringify(data.error);\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InferenceClientProviderApiError(`Failed to perform inference: an occurred while streaming the response: ${errorStr}`, {\n                            url,\n                            method: info.method ?? \"GET\",\n                            headers: info.headers,\n                            body: bodyToJson(info.body)\n                        }, {\n                            requestId: response.headers.get(\"x-request-id\") ?? \"\",\n                            status: response.status,\n                            body: data\n                        });\n                    }\n                    yield data;\n                }\n            }\n            events = [];\n        }\n    } finally{\n        reader.releaseLock();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/toArray.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/toArray.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toArray: () => (/* binding */ toArray)\n/* harmony export */ });\nfunction toArray(obj) {\n    if (Array.isArray(obj)) {\n        return obj;\n    }\n    return [\n        obj\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy90b0FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxRQUFRQyxHQUFHO0lBQ3ZCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsTUFBTTtRQUNwQixPQUFPQTtJQUNYO0lBQ0EsT0FBTztRQUFDQTtLQUFJO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy90b0FycmF5LmpzP2NmODMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICByZXR1cm4gW29ial07XG59XG4iXSwibmFtZXMiOlsidG9BcnJheSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/toArray.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedEntries.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/typedEntries.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   typedEntries: () => (/* binding */ typedEntries)\n/* harmony export */ });\nfunction typedEntries(obj) {\n    return Object.entries(obj);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy90eXBlZEVudHJpZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGFBQWFDLEdBQUc7SUFDNUIsT0FBT0MsT0FBT0MsT0FBTyxDQUFDRjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS9pbmZlcmVuY2UvZGlzdC9lc20vdXRpbHMvdHlwZWRFbnRyaWVzLmpzPzY2NmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHR5cGVkRW50cmllcyhvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMob2JqKTtcbn1cbiJdLCJuYW1lcyI6WyJ0eXBlZEVudHJpZXMiLCJvYmoiLCJPYmplY3QiLCJlbnRyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedEntries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedInclude.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/utils/typedInclude.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   typedInclude: () => (/* binding */ typedInclude)\n/* harmony export */ });\nfunction typedInclude(arr, v) {\n    return arr.includes(v);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy90eXBlZEluY2x1ZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGFBQWFDLEdBQUcsRUFBRUMsQ0FBQztJQUMvQixPQUFPRCxJQUFJRSxRQUFRLENBQUNEO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL2luZmVyZW5jZS9kaXN0L2VzbS91dGlscy90eXBlZEluY2x1ZGUuanM/NDAwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdHlwZWRJbmNsdWRlKGFyciwgdikge1xuICAgIHJldHVybiBhcnIuaW5jbHVkZXModik7XG59XG4iXSwibmFtZXMiOlsidHlwZWRJbmNsdWRlIiwiYXJyIiwidiIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/utils/typedInclude.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/inference/dist/esm/vendor/fetch-event-source/parse.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/inference/dist/esm/vendor/fetch-event-source/parse.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBytes: () => (/* binding */ getBytes),\n/* harmony export */   getLines: () => (/* binding */ getLines),\n/* harmony export */   getMessages: () => (/* binding */ getMessages)\n/* harmony export */ });\n/**\n This file is a part of fetch-event-source package (as of v2.0.1)\n https://github.com/Azure/fetch-event-source/blob/v2.0.1/src/parse.ts\n\n Full package can be used after it is made compatible with nodejs:\n https://github.com/Azure/fetch-event-source/issues/20\n\n Below is the fetch-event-source package license:\n\n MIT License\n\n Copyright (c) Microsoft Corporation.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE\n\n */ /**\n * Converts a ReadableStream into a callback pattern.\n * @param stream The input ReadableStream.\n * @param onChunk A function that will be called on each new byte chunk in the stream.\n * @returns {Promise<void>} A promise that will be resolved when the stream closes.\n */ async function getBytes(stream, onChunk) {\n    const reader = stream.getReader();\n    let result;\n    while(!(result = await reader.read()).done){\n        onChunk(result.value);\n    }\n}\n/**\n * Parses arbitary byte chunks into EventSource line buffers.\n * Each line should be of the format \"field: value\" and ends with \\r, \\n, or \\r\\n.\n * @param onLine A function that will be called on each new EventSource line.\n * @returns A function that should be called for each incoming byte chunk.\n */ function getLines(onLine) {\n    let buffer;\n    let position; // current read position\n    let fieldLength; // length of the `field` portion of the line\n    let discardTrailingNewline = false;\n    // return a function that can process each incoming byte chunk:\n    return function onChunk(arr) {\n        if (buffer === undefined) {\n            buffer = arr;\n            position = 0;\n            fieldLength = -1;\n        } else {\n            // we're still parsing the old line. Append the new bytes into buffer:\n            buffer = concat(buffer, arr);\n        }\n        const bufLength = buffer.length;\n        let lineStart = 0; // index where the current line starts\n        while(position < bufLength){\n            if (discardTrailingNewline) {\n                if (buffer[position] === 10 /* ControlChars.NewLine */ ) {\n                    lineStart = ++position; // skip to next char\n                }\n                discardTrailingNewline = false;\n            }\n            // start looking forward till the end of line:\n            let lineEnd = -1; // index of the \\r or \\n char\n            for(; position < bufLength && lineEnd === -1; ++position){\n                switch(buffer[position]){\n                    case 58 /* ControlChars.Colon */ :\n                        if (fieldLength === -1) {\n                            fieldLength = position - lineStart;\n                        }\n                        break;\n                    case 13 /* ControlChars.CarriageReturn */ :\n                        discardTrailingNewline = true;\n                    // eslint-disable-next-line no-fallthrough\n                    case 10 /* ControlChars.NewLine */ :\n                        lineEnd = position;\n                        break;\n                }\n            }\n            if (lineEnd === -1) {\n                break;\n            }\n            // we've reached the line end, send it out:\n            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n            lineStart = position; // we're now on the next line\n            fieldLength = -1;\n        }\n        if (lineStart === bufLength) {\n            buffer = undefined; // we've finished reading it\n        } else if (lineStart !== 0) {\n            // Create a new view into buffer beginning at lineStart so we don't\n            // need to copy over the previous lines when we get the new arr:\n            buffer = buffer.subarray(lineStart);\n            position -= lineStart;\n        }\n    };\n}\n/**\n * Parses line buffers into EventSourceMessages.\n * @param onId A function that will be called on each `id` field.\n * @param onRetry A function that will be called on each `retry` field.\n * @param onMessage A function that will be called on each message.\n * @returns A function that should be called for each incoming line buffer.\n */ function getMessages(onId, onRetry, onMessage) {\n    let message = newMessage();\n    const decoder = new TextDecoder();\n    // return a function that can process each incoming line buffer:\n    return function onLine(line, fieldLength) {\n        if (line.length === 0) {\n            // empty line denotes end of message. Trigger the callback and start a new message:\n            onMessage?.(message);\n            message = newMessage();\n        } else if (fieldLength > 0) {\n            // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n            // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n            const field = decoder.decode(line.subarray(0, fieldLength));\n            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* ControlChars.Space */  ? 2 : 1);\n            const value = decoder.decode(line.subarray(valueOffset));\n            switch(field){\n                case \"data\":\n                    // if this message already has data, append the new value to the old.\n                    // otherwise, just set to the new value:\n                    message.data = message.data ? message.data + \"\\n\" + value : value; // otherwise, \n                    break;\n                case \"event\":\n                    message.event = value;\n                    break;\n                case \"id\":\n                    onId(message.id = value);\n                    break;\n                case \"retry\":\n                    {\n                        const retry = parseInt(value, 10);\n                        if (!isNaN(retry)) {\n                            onRetry(message.retry = retry);\n                        }\n                        break;\n                    }\n            }\n        }\n    };\n}\nfunction concat(a, b) {\n    const res = new Uint8Array(a.length + b.length);\n    res.set(a);\n    res.set(b, a.length);\n    return res;\n}\nfunction newMessage() {\n    // data, event, and id must be initialized to empty strings:\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n    // retry should be initialized to undefined so we return a consistent shape\n    // to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways\n    return {\n        data: \"\",\n        event: \"\",\n        id: \"\",\n        retry: undefined\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/inference/dist/esm/vendor/fetch-event-source/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/jinja/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@huggingface/jinja/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Environment: () => (/* binding */ Environment),\n/* harmony export */   Interpreter: () => (/* binding */ Interpreter),\n/* harmony export */   Template: () => (/* binding */ Template),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n// src/lexer.ts\nvar TOKEN_TYPES = Object.freeze({\n    Text: \"Text\",\n    // The text between Jinja statements or expressions\n    NumericLiteral: \"NumericLiteral\",\n    // e.g., 123, 1.0\n    StringLiteral: \"StringLiteral\",\n    // 'string'\n    Identifier: \"Identifier\",\n    // Variables, functions, statements, booleans, etc.\n    Equals: \"Equals\",\n    // =\n    OpenParen: \"OpenParen\",\n    // (\n    CloseParen: \"CloseParen\",\n    // )\n    OpenStatement: \"OpenStatement\",\n    // {%\n    CloseStatement: \"CloseStatement\",\n    // %}\n    OpenExpression: \"OpenExpression\",\n    // {{\n    CloseExpression: \"CloseExpression\",\n    // }}\n    OpenSquareBracket: \"OpenSquareBracket\",\n    // [\n    CloseSquareBracket: \"CloseSquareBracket\",\n    // ]\n    OpenCurlyBracket: \"OpenCurlyBracket\",\n    // {\n    CloseCurlyBracket: \"CloseCurlyBracket\",\n    // }\n    Comma: \"Comma\",\n    // ,\n    Dot: \"Dot\",\n    // .\n    Colon: \"Colon\",\n    // :\n    Pipe: \"Pipe\",\n    // |\n    CallOperator: \"CallOperator\",\n    // ()\n    AdditiveBinaryOperator: \"AdditiveBinaryOperator\",\n    // + - ~\n    MultiplicativeBinaryOperator: \"MultiplicativeBinaryOperator\",\n    // * / %\n    ComparisonBinaryOperator: \"ComparisonBinaryOperator\",\n    // < > <= >= == !=\n    UnaryOperator: \"UnaryOperator\",\n    // ! - +\n    Comment: \"Comment\"\n});\nvar Token = class {\n    /**\n   * Constructs a new Token.\n   * @param {string} value The raw value as seen inside the source code.\n   * @param {TokenType} type The type of token.\n   */ constructor(value, type){\n        this.value = value;\n        this.type = type;\n    }\n};\nfunction isWord(char) {\n    return /\\w/.test(char);\n}\nfunction isInteger(char) {\n    return /[0-9]/.test(char);\n}\nvar ORDERED_MAPPING_TABLE = [\n    // Control sequences\n    [\n        \"{%\",\n        TOKEN_TYPES.OpenStatement\n    ],\n    [\n        \"%}\",\n        TOKEN_TYPES.CloseStatement\n    ],\n    [\n        \"{{\",\n        TOKEN_TYPES.OpenExpression\n    ],\n    [\n        \"}}\",\n        TOKEN_TYPES.CloseExpression\n    ],\n    // Single character tokens\n    [\n        \"(\",\n        TOKEN_TYPES.OpenParen\n    ],\n    [\n        \")\",\n        TOKEN_TYPES.CloseParen\n    ],\n    [\n        \"{\",\n        TOKEN_TYPES.OpenCurlyBracket\n    ],\n    [\n        \"}\",\n        TOKEN_TYPES.CloseCurlyBracket\n    ],\n    [\n        \"[\",\n        TOKEN_TYPES.OpenSquareBracket\n    ],\n    [\n        \"]\",\n        TOKEN_TYPES.CloseSquareBracket\n    ],\n    [\n        \",\",\n        TOKEN_TYPES.Comma\n    ],\n    [\n        \".\",\n        TOKEN_TYPES.Dot\n    ],\n    [\n        \":\",\n        TOKEN_TYPES.Colon\n    ],\n    [\n        \"|\",\n        TOKEN_TYPES.Pipe\n    ],\n    // Comparison operators\n    [\n        \"<=\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    [\n        \">=\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    [\n        \"==\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    [\n        \"!=\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    [\n        \"<\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    [\n        \">\",\n        TOKEN_TYPES.ComparisonBinaryOperator\n    ],\n    // Arithmetic operators\n    [\n        \"+\",\n        TOKEN_TYPES.AdditiveBinaryOperator\n    ],\n    [\n        \"-\",\n        TOKEN_TYPES.AdditiveBinaryOperator\n    ],\n    [\n        \"~\",\n        TOKEN_TYPES.AdditiveBinaryOperator\n    ],\n    [\n        \"*\",\n        TOKEN_TYPES.MultiplicativeBinaryOperator\n    ],\n    [\n        \"/\",\n        TOKEN_TYPES.MultiplicativeBinaryOperator\n    ],\n    [\n        \"%\",\n        TOKEN_TYPES.MultiplicativeBinaryOperator\n    ],\n    // Assignment operator\n    [\n        \"=\",\n        TOKEN_TYPES.Equals\n    ]\n];\nvar ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([\n    [\n        \"n\",\n        \"\\n\"\n    ],\n    // New line\n    [\n        \"t\",\n        \"\t\"\n    ],\n    // Horizontal tab\n    [\n        \"r\",\n        \"\\r\"\n    ],\n    // Carriage return\n    [\n        \"b\",\n        \"\\b\"\n    ],\n    // Backspace\n    [\n        \"f\",\n        \"\\f\"\n    ],\n    // Form feed\n    [\n        \"v\",\n        \"\\v\"\n    ],\n    // Vertical tab\n    [\n        \"'\",\n        \"'\"\n    ],\n    // Single quote\n    [\n        '\"',\n        '\"'\n    ],\n    // Double quote\n    [\n        \"\\\\\",\n        \"\\\\\"\n    ]\n]);\nfunction preprocess(template, options = {}) {\n    if (template.endsWith(\"\\n\")) {\n        template = template.slice(0, -1);\n    }\n    if (options.lstrip_blocks) {\n        template = template.replace(/^[ \\t]*({[#%-])/gm, \"$1\");\n    }\n    if (options.trim_blocks) {\n        template = template.replace(/([#%-]})\\n/g, \"$1\");\n    }\n    return template.replace(/-%}\\s*/g, \"%}\").replace(/\\s*{%-/g, \"{%\").replace(/-}}\\s*/g, \"}}\").replace(/\\s*{{-/g, \"{{\").replace(/-#}\\s*/g, \"#}\").replace(/\\s*{#-/g, \"{#\").replace(/{%\\s*(end)?generation\\s*%}/gs, \"\");\n}\nfunction tokenize(source, options = {}) {\n    const tokens = [];\n    const src = preprocess(source, options);\n    let cursorPosition = 0;\n    let curlyBracketDepth = 0;\n    const consumeWhile = (predicate)=>{\n        let str = \"\";\n        while(predicate(src[cursorPosition])){\n            if (src[cursorPosition] === \"\\\\\") {\n                ++cursorPosition;\n                if (cursorPosition >= src.length) throw new SyntaxError(\"Unexpected end of input\");\n                const escaped = src[cursorPosition++];\n                const unescaped = ESCAPE_CHARACTERS.get(escaped);\n                if (unescaped === void 0) {\n                    throw new SyntaxError(`Unexpected escaped character: ${escaped}`);\n                }\n                str += unescaped;\n                continue;\n            }\n            str += src[cursorPosition++];\n            if (cursorPosition >= src.length) throw new SyntaxError(\"Unexpected end of input\");\n        }\n        return str;\n    };\n    main: while(cursorPosition < src.length){\n        const lastTokenType = tokens.at(-1)?.type;\n        if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression || lastTokenType === TOKEN_TYPES.Comment) {\n            let text = \"\";\n            while(cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression\n            !(src[cursorPosition] === \"{\" && (src[cursorPosition + 1] === \"%\" || src[cursorPosition + 1] === \"{\" || src[cursorPosition + 1] === \"#\"))){\n                text += src[cursorPosition++];\n            }\n            if (text.length > 0) {\n                tokens.push(new Token(text, TOKEN_TYPES.Text));\n                continue;\n            }\n        }\n        if (src[cursorPosition] === \"{\" && src[cursorPosition + 1] === \"#\") {\n            cursorPosition += 2;\n            let comment = \"\";\n            while(src[cursorPosition] !== \"#\" || src[cursorPosition + 1] !== \"}\"){\n                if (cursorPosition + 2 >= src.length) {\n                    throw new SyntaxError(\"Missing end of comment tag\");\n                }\n                comment += src[cursorPosition++];\n            }\n            tokens.push(new Token(comment, TOKEN_TYPES.Comment));\n            cursorPosition += 2;\n            continue;\n        }\n        consumeWhile((char2)=>/\\s/.test(char2));\n        const char = src[cursorPosition];\n        if (char === \"-\" || char === \"+\") {\n            const lastTokenType2 = tokens.at(-1)?.type;\n            if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {\n                throw new SyntaxError(`Unexpected character: ${char}`);\n            }\n            switch(lastTokenType2){\n                case TOKEN_TYPES.Identifier:\n                case TOKEN_TYPES.NumericLiteral:\n                case TOKEN_TYPES.StringLiteral:\n                case TOKEN_TYPES.CloseParen:\n                case TOKEN_TYPES.CloseSquareBracket:\n                    break;\n                default:\n                    {\n                        ++cursorPosition;\n                        const num = consumeWhile(isInteger);\n                        tokens.push(new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator));\n                        continue;\n                    }\n            }\n        }\n        for (const [seq, type] of ORDERED_MAPPING_TABLE){\n            if (seq === \"}}\" && curlyBracketDepth > 0) {\n                continue;\n            }\n            const slice2 = src.slice(cursorPosition, cursorPosition + seq.length);\n            if (slice2 === seq) {\n                tokens.push(new Token(seq, type));\n                if (type === TOKEN_TYPES.OpenExpression) {\n                    curlyBracketDepth = 0;\n                } else if (type === TOKEN_TYPES.OpenCurlyBracket) {\n                    ++curlyBracketDepth;\n                } else if (type === TOKEN_TYPES.CloseCurlyBracket) {\n                    --curlyBracketDepth;\n                }\n                cursorPosition += seq.length;\n                continue main;\n            }\n        }\n        if (char === \"'\" || char === '\"') {\n            ++cursorPosition;\n            const str = consumeWhile((c)=>c !== char);\n            tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));\n            ++cursorPosition;\n            continue;\n        }\n        if (isInteger(char)) {\n            let num = consumeWhile(isInteger);\n            if (src[cursorPosition] === \".\" && isInteger(src[cursorPosition + 1])) {\n                ++cursorPosition;\n                const frac = consumeWhile(isInteger);\n                num = `${num}.${frac}`;\n            }\n            tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));\n            continue;\n        }\n        if (isWord(char)) {\n            const word = consumeWhile(isWord);\n            tokens.push(new Token(word, TOKEN_TYPES.Identifier));\n            continue;\n        }\n        throw new SyntaxError(`Unexpected character: ${char}`);\n    }\n    return tokens;\n}\n// src/ast.ts\nvar Statement = class {\n    constructor(){\n        this.type = \"Statement\";\n    }\n};\nvar Program = class extends Statement {\n    constructor(body){\n        super();\n        this.type = \"Program\";\n        this.body = body;\n    }\n};\nvar If = class extends Statement {\n    constructor(test, body, alternate){\n        super();\n        this.type = \"If\";\n        this.test = test;\n        this.body = body;\n        this.alternate = alternate;\n    }\n};\nvar For = class extends Statement {\n    constructor(loopvar, iterable, body, defaultBlock){\n        super();\n        this.type = \"For\";\n        this.loopvar = loopvar;\n        this.iterable = iterable;\n        this.body = body;\n        this.defaultBlock = defaultBlock;\n    }\n};\nvar Break = class extends Statement {\n    constructor(...args){\n        super(...args);\n        this.type = \"Break\";\n    }\n};\nvar Continue = class extends Statement {\n    constructor(...args){\n        super(...args);\n        this.type = \"Continue\";\n    }\n};\nvar SetStatement = class extends Statement {\n    constructor(assignee, value, body){\n        super();\n        this.type = \"Set\";\n        this.assignee = assignee;\n        this.value = value;\n        this.body = body;\n    }\n};\nvar Macro = class extends Statement {\n    constructor(name, args, body){\n        super();\n        this.type = \"Macro\";\n        this.name = name;\n        this.args = args;\n        this.body = body;\n    }\n};\nvar Comment = class extends Statement {\n    constructor(value){\n        super();\n        this.type = \"Comment\";\n        this.value = value;\n    }\n};\nvar Expression = class extends Statement {\n    constructor(...args){\n        super(...args);\n        this.type = \"Expression\";\n    }\n};\nvar MemberExpression = class extends Expression {\n    constructor(object, property, computed){\n        super();\n        this.type = \"MemberExpression\";\n        this.object = object;\n        this.property = property;\n        this.computed = computed;\n    }\n};\nvar CallExpression = class extends Expression {\n    constructor(callee, args){\n        super();\n        this.type = \"CallExpression\";\n        this.callee = callee;\n        this.args = args;\n    }\n};\nvar Identifier = class extends Expression {\n    /**\n   * @param {string} value The name of the identifier\n   */ constructor(value){\n        super();\n        this.type = \"Identifier\";\n        this.value = value;\n    }\n};\nvar Literal = class extends Expression {\n    constructor(value){\n        super();\n        this.type = \"Literal\";\n        this.value = value;\n    }\n};\nvar IntegerLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"IntegerLiteral\";\n    }\n};\nvar FloatLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"FloatLiteral\";\n    }\n};\nvar StringLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"StringLiteral\";\n    }\n};\nvar ArrayLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"ArrayLiteral\";\n    }\n};\nvar TupleLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"TupleLiteral\";\n    }\n};\nvar ObjectLiteral = class extends Literal {\n    constructor(...args){\n        super(...args);\n        this.type = \"ObjectLiteral\";\n    }\n};\nvar BinaryExpression = class extends Expression {\n    constructor(operator, left, right){\n        super();\n        this.type = \"BinaryExpression\";\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n    }\n};\nvar FilterExpression = class extends Expression {\n    constructor(operand, filter){\n        super();\n        this.type = \"FilterExpression\";\n        this.operand = operand;\n        this.filter = filter;\n    }\n};\nvar FilterStatement = class extends Statement {\n    constructor(filter, body){\n        super();\n        this.type = \"FilterStatement\";\n        this.filter = filter;\n        this.body = body;\n    }\n};\nvar SelectExpression = class extends Expression {\n    constructor(lhs, test){\n        super();\n        this.type = \"SelectExpression\";\n        this.lhs = lhs;\n        this.test = test;\n    }\n};\nvar TestExpression = class extends Expression {\n    constructor(operand, negate, test){\n        super();\n        this.type = \"TestExpression\";\n        this.operand = operand;\n        this.negate = negate;\n        this.test = test;\n    }\n};\nvar UnaryExpression = class extends Expression {\n    constructor(operator, argument){\n        super();\n        this.type = \"UnaryExpression\";\n        this.operator = operator;\n        this.argument = argument;\n    }\n};\nvar SliceExpression = class extends Expression {\n    constructor(start = void 0, stop = void 0, step = void 0){\n        super();\n        this.type = \"SliceExpression\";\n        this.start = start;\n        this.stop = stop;\n        this.step = step;\n    }\n};\nvar KeywordArgumentExpression = class extends Expression {\n    constructor(key, value){\n        super();\n        this.type = \"KeywordArgumentExpression\";\n        this.key = key;\n        this.value = value;\n    }\n};\nvar SpreadExpression = class extends Expression {\n    constructor(argument){\n        super();\n        this.type = \"SpreadExpression\";\n        this.argument = argument;\n    }\n};\nvar CallStatement = class extends Statement {\n    constructor(call, callerArgs, body){\n        super();\n        this.type = \"CallStatement\";\n        this.call = call;\n        this.callerArgs = callerArgs;\n        this.body = body;\n    }\n};\nvar Ternary = class extends Expression {\n    constructor(condition, trueExpr, falseExpr){\n        super();\n        this.type = \"Ternary\";\n        this.condition = condition;\n        this.trueExpr = trueExpr;\n        this.falseExpr = falseExpr;\n    }\n};\n// src/parser.ts\nfunction parse(tokens) {\n    const program = new Program([]);\n    let current = 0;\n    function expect(type, error) {\n        const prev = tokens[current++];\n        if (!prev || prev.type !== type) {\n            throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);\n        }\n        return prev;\n    }\n    function expectIdentifier(name) {\n        if (!isIdentifier(name)) {\n            throw new SyntaxError(`Expected ${name}`);\n        }\n        ++current;\n    }\n    function parseAny() {\n        switch(tokens[current].type){\n            case TOKEN_TYPES.Comment:\n                return new Comment(tokens[current++].value);\n            case TOKEN_TYPES.Text:\n                return parseText();\n            case TOKEN_TYPES.OpenStatement:\n                return parseJinjaStatement();\n            case TOKEN_TYPES.OpenExpression:\n                return parseJinjaExpression();\n            default:\n                throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);\n        }\n    }\n    function is(...types) {\n        return current + types.length <= tokens.length && types.every((type, i)=>type === tokens[current + i].type);\n    }\n    function isStatement(...names) {\n        return tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.Identifier && names.includes(tokens[current + 1]?.value);\n    }\n    function isIdentifier(...names) {\n        return current + names.length <= tokens.length && names.every((name, i)=>tokens[current + i].type === \"Identifier\" && name === tokens[current + i].value);\n    }\n    function parseText() {\n        return new StringLiteral(expect(TOKEN_TYPES.Text, \"Expected text token\").value);\n    }\n    function parseJinjaStatement() {\n        expect(TOKEN_TYPES.OpenStatement, \"Expected opening statement token\");\n        if (tokens[current].type !== TOKEN_TYPES.Identifier) {\n            throw new SyntaxError(`Unknown statement, got ${tokens[current].type}`);\n        }\n        const name = tokens[current].value;\n        let result;\n        switch(name){\n            case \"set\":\n                ++current;\n                result = parseSetStatement();\n                break;\n            case \"if\":\n                ++current;\n                result = parseIfStatement();\n                expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                expectIdentifier(\"endif\");\n                expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                break;\n            case \"macro\":\n                ++current;\n                result = parseMacroStatement();\n                expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                expectIdentifier(\"endmacro\");\n                expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                break;\n            case \"for\":\n                ++current;\n                result = parseForStatement();\n                expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n                expectIdentifier(\"endfor\");\n                expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n                break;\n            case \"call\":\n                {\n                    ++current;\n                    let callerArgs = null;\n                    if (is(TOKEN_TYPES.OpenParen)) {\n                        callerArgs = parseArgs();\n                    }\n                    const callee = parsePrimaryExpression();\n                    if (callee.type !== \"Identifier\") {\n                        throw new SyntaxError(`Expected identifier following call statement`);\n                    }\n                    const callArgs = parseArgs();\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                    const body = [];\n                    while(!isStatement(\"endcall\")){\n                        body.push(parseAny());\n                    }\n                    expect(TOKEN_TYPES.OpenStatement, \"Expected '{%'\");\n                    expectIdentifier(\"endcall\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                    const callExpr = new CallExpression(callee, callArgs);\n                    result = new CallStatement(callExpr, callerArgs, body);\n                    break;\n                }\n            case \"break\":\n                ++current;\n                expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                result = new Break();\n                break;\n            case \"continue\":\n                ++current;\n                expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                result = new Continue();\n                break;\n            case \"filter\":\n                {\n                    ++current;\n                    let filterNode = parsePrimaryExpression();\n                    if (filterNode instanceof Identifier && is(TOKEN_TYPES.OpenParen)) {\n                        filterNode = parseCallExpression(filterNode);\n                    }\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n                    const filterBody = [];\n                    while(!isStatement(\"endfilter\")){\n                        filterBody.push(parseAny());\n                    }\n                    expect(TOKEN_TYPES.OpenStatement, \"Expected '{%'\");\n                    expectIdentifier(\"endfilter\");\n                    expect(TOKEN_TYPES.CloseStatement, \"Expected '%}'\");\n                    result = new FilterStatement(filterNode, filterBody);\n                    break;\n                }\n            default:\n                throw new SyntaxError(`Unknown statement type: ${name}`);\n        }\n        return result;\n    }\n    function parseJinjaExpression() {\n        expect(TOKEN_TYPES.OpenExpression, \"Expected opening expression token\");\n        const result = parseExpression();\n        expect(TOKEN_TYPES.CloseExpression, \"Expected closing expression token\");\n        return result;\n    }\n    function parseSetStatement() {\n        const left = parseExpressionSequence();\n        let value = null;\n        const body = [];\n        if (is(TOKEN_TYPES.Equals)) {\n            ++current;\n            value = parseExpressionSequence();\n        } else {\n            expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n            while(!isStatement(\"endset\")){\n                body.push(parseAny());\n            }\n            expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n            expectIdentifier(\"endset\");\n        }\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        return new SetStatement(left, value, body);\n    }\n    function parseIfStatement() {\n        const test = parseExpression();\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        const body = [];\n        const alternate = [];\n        while(!isStatement(\"elif\", \"else\", \"endif\")){\n            body.push(parseAny());\n        }\n        if (isStatement(\"elif\")) {\n            ++current;\n            ++current;\n            const result = parseIfStatement();\n            alternate.push(result);\n        } else if (isStatement(\"else\")) {\n            ++current;\n            ++current;\n            expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n            while(!isStatement(\"endif\")){\n                alternate.push(parseAny());\n            }\n        }\n        return new If(test, body, alternate);\n    }\n    function parseMacroStatement() {\n        const name = parsePrimaryExpression();\n        if (name.type !== \"Identifier\") {\n            throw new SyntaxError(`Expected identifier following macro statement`);\n        }\n        const args = parseArgs();\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        const body = [];\n        while(!isStatement(\"endmacro\")){\n            body.push(parseAny());\n        }\n        return new Macro(name, args, body);\n    }\n    function parseExpressionSequence(primary = false) {\n        const fn = primary ? parsePrimaryExpression : parseExpression;\n        const expressions = [\n            fn()\n        ];\n        const isTuple = is(TOKEN_TYPES.Comma);\n        while(isTuple){\n            ++current;\n            expressions.push(fn());\n            if (!is(TOKEN_TYPES.Comma)) {\n                break;\n            }\n        }\n        return isTuple ? new TupleLiteral(expressions) : expressions[0];\n    }\n    function parseForStatement() {\n        const loopVariable = parseExpressionSequence(true);\n        if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {\n            throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);\n        }\n        if (!isIdentifier(\"in\")) {\n            throw new SyntaxError(\"Expected `in` keyword following loop variable\");\n        }\n        ++current;\n        const iterable = parseExpression();\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        const body = [];\n        while(!isStatement(\"endfor\", \"else\")){\n            body.push(parseAny());\n        }\n        const alternative = [];\n        if (isStatement(\"else\")) {\n            ++current;\n            ++current;\n            expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n            while(!isStatement(\"endfor\")){\n                alternative.push(parseAny());\n            }\n        }\n        return new For(loopVariable, iterable, body, alternative);\n    }\n    function parseExpression() {\n        return parseIfExpression();\n    }\n    function parseIfExpression() {\n        const a = parseLogicalOrExpression();\n        if (isIdentifier(\"if\")) {\n            ++current;\n            const test = parseLogicalOrExpression();\n            if (isIdentifier(\"else\")) {\n                ++current;\n                const falseExpr = parseIfExpression();\n                return new Ternary(test, a, falseExpr);\n            } else {\n                return new SelectExpression(a, test);\n            }\n        }\n        return a;\n    }\n    function parseLogicalOrExpression() {\n        let left = parseLogicalAndExpression();\n        while(isIdentifier(\"or\")){\n            const operator = tokens[current];\n            ++current;\n            const right = parseLogicalAndExpression();\n            left = new BinaryExpression(operator, left, right);\n        }\n        return left;\n    }\n    function parseLogicalAndExpression() {\n        let left = parseLogicalNegationExpression();\n        while(isIdentifier(\"and\")){\n            const operator = tokens[current];\n            ++current;\n            const right = parseLogicalNegationExpression();\n            left = new BinaryExpression(operator, left, right);\n        }\n        return left;\n    }\n    function parseLogicalNegationExpression() {\n        let right;\n        while(isIdentifier(\"not\")){\n            const operator = tokens[current];\n            ++current;\n            const arg = parseLogicalNegationExpression();\n            right = new UnaryExpression(operator, arg);\n        }\n        return right ?? parseComparisonExpression();\n    }\n    function parseComparisonExpression() {\n        let left = parseAdditiveExpression();\n        while(true){\n            let operator;\n            if (isIdentifier(\"not\", \"in\")) {\n                operator = new Token(\"not in\", TOKEN_TYPES.Identifier);\n                current += 2;\n            } else if (isIdentifier(\"in\")) {\n                operator = tokens[current++];\n            } else if (is(TOKEN_TYPES.ComparisonBinaryOperator)) {\n                operator = tokens[current++];\n            } else {\n                break;\n            }\n            const right = parseAdditiveExpression();\n            left = new BinaryExpression(operator, left, right);\n        }\n        return left;\n    }\n    function parseAdditiveExpression() {\n        let left = parseMultiplicativeExpression();\n        while(is(TOKEN_TYPES.AdditiveBinaryOperator)){\n            const operator = tokens[current];\n            ++current;\n            const right = parseMultiplicativeExpression();\n            left = new BinaryExpression(operator, left, right);\n        }\n        return left;\n    }\n    function parseCallMemberExpression() {\n        const member = parseMemberExpression(parsePrimaryExpression());\n        if (is(TOKEN_TYPES.OpenParen)) {\n            return parseCallExpression(member);\n        }\n        return member;\n    }\n    function parseCallExpression(callee) {\n        let expression = new CallExpression(callee, parseArgs());\n        expression = parseMemberExpression(expression);\n        if (is(TOKEN_TYPES.OpenParen)) {\n            expression = parseCallExpression(expression);\n        }\n        return expression;\n    }\n    function parseArgs() {\n        expect(TOKEN_TYPES.OpenParen, \"Expected opening parenthesis for arguments list\");\n        const args = parseArgumentsList();\n        expect(TOKEN_TYPES.CloseParen, \"Expected closing parenthesis for arguments list\");\n        return args;\n    }\n    function parseArgumentsList() {\n        const args = [];\n        while(!is(TOKEN_TYPES.CloseParen)){\n            let argument;\n            if (tokens[current].type === TOKEN_TYPES.MultiplicativeBinaryOperator && tokens[current].value === \"*\") {\n                ++current;\n                const expr = parseExpression();\n                argument = new SpreadExpression(expr);\n            } else {\n                argument = parseExpression();\n                if (is(TOKEN_TYPES.Equals)) {\n                    ++current;\n                    if (!(argument instanceof Identifier)) {\n                        throw new SyntaxError(`Expected identifier for keyword argument`);\n                    }\n                    const value = parseExpression();\n                    argument = new KeywordArgumentExpression(argument, value);\n                }\n            }\n            args.push(argument);\n            if (is(TOKEN_TYPES.Comma)) {\n                ++current;\n            }\n        }\n        return args;\n    }\n    function parseMemberExpressionArgumentsList() {\n        const slices = [];\n        let isSlice = false;\n        while(!is(TOKEN_TYPES.CloseSquareBracket)){\n            if (is(TOKEN_TYPES.Colon)) {\n                slices.push(void 0);\n                ++current;\n                isSlice = true;\n            } else {\n                slices.push(parseExpression());\n                if (is(TOKEN_TYPES.Colon)) {\n                    ++current;\n                    isSlice = true;\n                }\n            }\n        }\n        if (slices.length === 0) {\n            throw new SyntaxError(`Expected at least one argument for member/slice expression`);\n        }\n        if (isSlice) {\n            if (slices.length > 3) {\n                throw new SyntaxError(`Expected 0-3 arguments for slice expression`);\n            }\n            return new SliceExpression(...slices);\n        }\n        return slices[0];\n    }\n    function parseMemberExpression(object) {\n        while(is(TOKEN_TYPES.Dot) || is(TOKEN_TYPES.OpenSquareBracket)){\n            const operator = tokens[current];\n            ++current;\n            let property;\n            const computed = operator.type === TOKEN_TYPES.OpenSquareBracket;\n            if (computed) {\n                property = parseMemberExpressionArgumentsList();\n                expect(TOKEN_TYPES.CloseSquareBracket, \"Expected closing square bracket\");\n            } else {\n                property = parsePrimaryExpression();\n                if (property.type !== \"Identifier\") {\n                    throw new SyntaxError(`Expected identifier following dot operator`);\n                }\n            }\n            object = new MemberExpression(object, property, computed);\n        }\n        return object;\n    }\n    function parseMultiplicativeExpression() {\n        let left = parseTestExpression();\n        while(is(TOKEN_TYPES.MultiplicativeBinaryOperator)){\n            const operator = tokens[current++];\n            const right = parseTestExpression();\n            left = new BinaryExpression(operator, left, right);\n        }\n        return left;\n    }\n    function parseTestExpression() {\n        let operand = parseFilterExpression();\n        while(isIdentifier(\"is\")){\n            ++current;\n            const negate = isIdentifier(\"not\");\n            if (negate) {\n                ++current;\n            }\n            const filter = parsePrimaryExpression();\n            if (!(filter instanceof Identifier)) {\n                throw new SyntaxError(`Expected identifier for the test`);\n            }\n            operand = new TestExpression(operand, negate, filter);\n        }\n        return operand;\n    }\n    function parseFilterExpression() {\n        let operand = parseCallMemberExpression();\n        while(is(TOKEN_TYPES.Pipe)){\n            ++current;\n            let filter = parsePrimaryExpression();\n            if (!(filter instanceof Identifier)) {\n                throw new SyntaxError(`Expected identifier for the filter`);\n            }\n            if (is(TOKEN_TYPES.OpenParen)) {\n                filter = parseCallExpression(filter);\n            }\n            operand = new FilterExpression(operand, filter);\n        }\n        return operand;\n    }\n    function parsePrimaryExpression() {\n        const token = tokens[current++];\n        switch(token.type){\n            case TOKEN_TYPES.NumericLiteral:\n                {\n                    const num = token.value;\n                    return num.includes(\".\") ? new FloatLiteral(Number(num)) : new IntegerLiteral(Number(num));\n                }\n            case TOKEN_TYPES.StringLiteral:\n                {\n                    let value = token.value;\n                    while(is(TOKEN_TYPES.StringLiteral)){\n                        value += tokens[current++].value;\n                    }\n                    return new StringLiteral(value);\n                }\n            case TOKEN_TYPES.Identifier:\n                return new Identifier(token.value);\n            case TOKEN_TYPES.OpenParen:\n                {\n                    const expression = parseExpressionSequence();\n                    expect(TOKEN_TYPES.CloseParen, \"Expected closing parenthesis, got ${tokens[current].type} instead.\");\n                    return expression;\n                }\n            case TOKEN_TYPES.OpenSquareBracket:\n                {\n                    const values = [];\n                    while(!is(TOKEN_TYPES.CloseSquareBracket)){\n                        values.push(parseExpression());\n                        if (is(TOKEN_TYPES.Comma)) {\n                            ++current;\n                        }\n                    }\n                    ++current;\n                    return new ArrayLiteral(values);\n                }\n            case TOKEN_TYPES.OpenCurlyBracket:\n                {\n                    const values = /* @__PURE__ */ new Map();\n                    while(!is(TOKEN_TYPES.CloseCurlyBracket)){\n                        const key = parseExpression();\n                        expect(TOKEN_TYPES.Colon, \"Expected colon between key and value in object literal\");\n                        const value = parseExpression();\n                        values.set(key, value);\n                        if (is(TOKEN_TYPES.Comma)) {\n                            ++current;\n                        }\n                    }\n                    ++current;\n                    return new ObjectLiteral(values);\n                }\n            default:\n                throw new SyntaxError(`Unexpected token: ${token.type}`);\n        }\n    }\n    while(current < tokens.length){\n        program.body.push(parseAny());\n    }\n    return program;\n}\n// src/utils.ts\nfunction range(start, stop, step = 1) {\n    if (stop === void 0) {\n        stop = start;\n        start = 0;\n    }\n    const result = [];\n    for(let i = start; i < stop; i += step){\n        result.push(i);\n    }\n    return result;\n}\nfunction slice(array, start, stop, step = 1) {\n    const direction = Math.sign(step);\n    if (direction >= 0) {\n        start = (start ??= 0) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);\n        stop = (stop ??= array.length) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);\n    } else {\n        start = (start ??= array.length - 1) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);\n        stop = (stop ??= -1) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);\n    }\n    const result = [];\n    for(let i = start; direction * i < direction * stop; i += step){\n        result.push(array[i]);\n    }\n    return result;\n}\nfunction titleCase(value) {\n    return value.replace(/\\b\\w/g, (c)=>c.toUpperCase());\n}\nfunction strftime_now(format2) {\n    return strftime(/* @__PURE__ */ new Date(), format2);\n}\nfunction strftime(date, format2) {\n    const monthFormatterLong = new Intl.DateTimeFormat(void 0, {\n        month: \"long\"\n    });\n    const monthFormatterShort = new Intl.DateTimeFormat(void 0, {\n        month: \"short\"\n    });\n    const pad2 = (n)=>n < 10 ? \"0\" + n : n.toString();\n    return format2.replace(/%[YmdbBHM%]/g, (token)=>{\n        switch(token){\n            case \"%Y\":\n                return date.getFullYear().toString();\n            case \"%m\":\n                return pad2(date.getMonth() + 1);\n            case \"%d\":\n                return pad2(date.getDate());\n            case \"%b\":\n                return monthFormatterShort.format(date);\n            case \"%B\":\n                return monthFormatterLong.format(date);\n            case \"%H\":\n                return pad2(date.getHours());\n            case \"%M\":\n                return pad2(date.getMinutes());\n            case \"%%\":\n                return \"%\";\n            default:\n                return token;\n        }\n    });\n}\nfunction escapeRegExp(s) {\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replace(str, oldvalue, newvalue, count) {\n    if (count === 0) return str;\n    let remaining = count == null || count < 0 ? Infinity : count;\n    const pattern = oldvalue.length === 0 ? new RegExp(\"(?=)\", \"gu\") : new RegExp(escapeRegExp(oldvalue), \"gu\");\n    return str.replaceAll(pattern, (match)=>{\n        if (remaining > 0) {\n            --remaining;\n            return newvalue;\n        }\n        return match;\n    });\n}\n// src/runtime.ts\nvar BreakControl = class extends Error {\n};\nvar ContinueControl = class extends Error {\n};\nvar RuntimeValue = class {\n    /**\n   * Creates a new RuntimeValue.\n   */ constructor(value = void 0){\n        this.type = \"RuntimeValue\";\n        /**\n   * A collection of built-in functions for this type.\n   */ this.builtins = /* @__PURE__ */ new Map();\n        this.value = value;\n    }\n    /**\n   * Determines truthiness or falsiness of the runtime value.\n   * This function should be overridden by subclasses if it has custom truthiness criteria.\n   * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.\n   */ __bool__() {\n        return new BooleanValue(!!this.value);\n    }\n    toString() {\n        return String(this.value);\n    }\n};\nvar IntegerValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"IntegerValue\";\n    }\n};\nvar FloatValue = class extends RuntimeValue {\n    toString() {\n        return this.value % 1 === 0 ? this.value.toFixed(1) : this.value.toString();\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"FloatValue\";\n    }\n};\nvar StringValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"StringValue\";\n        this.builtins = /* @__PURE__ */ new Map([\n            [\n                \"upper\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.toUpperCase());\n                })\n            ],\n            [\n                \"lower\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.toLowerCase());\n                })\n            ],\n            [\n                \"strip\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.trim());\n                })\n            ],\n            [\n                \"title\",\n                new FunctionValue(()=>{\n                    return new StringValue(titleCase(this.value));\n                })\n            ],\n            [\n                \"capitalize\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.charAt(0).toUpperCase() + this.value.slice(1));\n                })\n            ],\n            [\n                \"length\",\n                new IntegerValue(this.value.length)\n            ],\n            [\n                \"rstrip\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.trimEnd());\n                })\n            ],\n            [\n                \"lstrip\",\n                new FunctionValue(()=>{\n                    return new StringValue(this.value.trimStart());\n                })\n            ],\n            [\n                \"startswith\",\n                new FunctionValue((args)=>{\n                    if (args.length === 0) {\n                        throw new Error(\"startswith() requires at least one argument\");\n                    }\n                    const pattern = args[0];\n                    if (pattern instanceof StringValue) {\n                        return new BooleanValue(this.value.startsWith(pattern.value));\n                    } else if (pattern instanceof ArrayValue) {\n                        for (const item of pattern.value){\n                            if (!(item instanceof StringValue)) {\n                                throw new Error(\"startswith() tuple elements must be strings\");\n                            }\n                            if (this.value.startsWith(item.value)) {\n                                return new BooleanValue(true);\n                            }\n                        }\n                        return new BooleanValue(false);\n                    }\n                    throw new Error(\"startswith() argument must be a string or tuple of strings\");\n                })\n            ],\n            [\n                \"endswith\",\n                new FunctionValue((args)=>{\n                    if (args.length === 0) {\n                        throw new Error(\"endswith() requires at least one argument\");\n                    }\n                    const pattern = args[0];\n                    if (pattern instanceof StringValue) {\n                        return new BooleanValue(this.value.endsWith(pattern.value));\n                    } else if (pattern instanceof ArrayValue) {\n                        for (const item of pattern.value){\n                            if (!(item instanceof StringValue)) {\n                                throw new Error(\"endswith() tuple elements must be strings\");\n                            }\n                            if (this.value.endsWith(item.value)) {\n                                return new BooleanValue(true);\n                            }\n                        }\n                        return new BooleanValue(false);\n                    }\n                    throw new Error(\"endswith() argument must be a string or tuple of strings\");\n                })\n            ],\n            [\n                \"split\",\n                // follows Python's `str.split(sep=None, maxsplit=-1)` function behavior\n                // https://docs.python.org/3.13/library/stdtypes.html#str.split\n                new FunctionValue((args)=>{\n                    const sep = args[0] ?? new NullValue();\n                    if (!(sep instanceof StringValue || sep instanceof NullValue)) {\n                        throw new Error(\"sep argument must be a string or null\");\n                    }\n                    const maxsplit = args[1] ?? new IntegerValue(-1);\n                    if (!(maxsplit instanceof IntegerValue)) {\n                        throw new Error(\"maxsplit argument must be a number\");\n                    }\n                    let result = [];\n                    if (sep instanceof NullValue) {\n                        const text = this.value.trimStart();\n                        for (const { 0: match, index } of text.matchAll(/\\S+/g)){\n                            if (maxsplit.value !== -1 && result.length >= maxsplit.value && index !== void 0) {\n                                result.push(match + text.slice(index + match.length));\n                                break;\n                            }\n                            result.push(match);\n                        }\n                    } else {\n                        if (sep.value === \"\") {\n                            throw new Error(\"empty separator\");\n                        }\n                        result = this.value.split(sep.value);\n                        if (maxsplit.value !== -1 && result.length > maxsplit.value) {\n                            result.push(result.splice(maxsplit.value).join(sep.value));\n                        }\n                    }\n                    return new ArrayValue(result.map((part)=>new StringValue(part)));\n                })\n            ],\n            [\n                \"replace\",\n                new FunctionValue((args)=>{\n                    if (args.length < 2) {\n                        throw new Error(\"replace() requires at least two arguments\");\n                    }\n                    const oldValue = args[0];\n                    const newValue = args[1];\n                    if (!(oldValue instanceof StringValue && newValue instanceof StringValue)) {\n                        throw new Error(\"replace() arguments must be strings\");\n                    }\n                    let count;\n                    if (args.length > 2) {\n                        if (args[2].type === \"KeywordArgumentsValue\") {\n                            count = args[2].value.get(\"count\") ?? new NullValue();\n                        } else {\n                            count = args[2];\n                        }\n                    } else {\n                        count = new NullValue();\n                    }\n                    if (!(count instanceof IntegerValue || count instanceof NullValue)) {\n                        throw new Error(\"replace() count argument must be a number or null\");\n                    }\n                    return new StringValue(replace(this.value, oldValue.value, newValue.value, count.value));\n                })\n            ]\n        ]);\n    }\n};\nvar BooleanValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"BooleanValue\";\n    }\n};\nvar ObjectValue = class extends RuntimeValue {\n    /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  {} && 5 -> 5\n   *  - Python:      {} and 5 -> {}\n   */ __bool__() {\n        return new BooleanValue(this.value.size > 0);\n    }\n    items() {\n        return new ArrayValue(Array.from(this.value.entries()).map(([key, value])=>new ArrayValue([\n                new StringValue(key),\n                value\n            ])));\n    }\n    keys() {\n        return new ArrayValue(Array.from(this.value.keys()).map((key)=>new StringValue(key)));\n    }\n    values() {\n        return new ArrayValue(Array.from(this.value.values()));\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"ObjectValue\";\n        this.builtins = /* @__PURE__ */ new Map([\n            [\n                \"get\",\n                new FunctionValue(([key, defaultValue])=>{\n                    if (!(key instanceof StringValue)) {\n                        throw new Error(`Object key must be a string: got ${key.type}`);\n                    }\n                    return this.value.get(key.value) ?? defaultValue ?? new NullValue();\n                })\n            ],\n            [\n                \"items\",\n                new FunctionValue(()=>this.items())\n            ],\n            [\n                \"keys\",\n                new FunctionValue(()=>this.keys())\n            ],\n            [\n                \"values\",\n                new FunctionValue(()=>this.values())\n            ]\n        ]);\n    }\n};\nvar KeywordArgumentsValue = class extends ObjectValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"KeywordArgumentsValue\";\n    }\n};\nvar ArrayValue = class extends RuntimeValue {\n    /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  [] && 5 -> 5\n   *  - Python:      [] and 5 -> []\n   */ __bool__() {\n        return new BooleanValue(this.value.length > 0);\n    }\n    constructor(...args){\n        super(...args);\n        this.type = \"ArrayValue\";\n        this.builtins = /* @__PURE__ */ new Map([\n            [\n                \"length\",\n                new IntegerValue(this.value.length)\n            ]\n        ]);\n    }\n};\nvar TupleValue = class extends ArrayValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"TupleValue\";\n    }\n};\nvar FunctionValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"FunctionValue\";\n    }\n};\nvar NullValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"NullValue\";\n    }\n};\nvar UndefinedValue = class extends RuntimeValue {\n    constructor(...args){\n        super(...args);\n        this.type = \"UndefinedValue\";\n    }\n};\nvar Environment = class {\n    constructor(parent){\n        /**\n   * The variables declared in this environment.\n   */ this.variables = /* @__PURE__ */ new Map([\n            [\n                \"namespace\",\n                new FunctionValue((args)=>{\n                    if (args.length === 0) {\n                        return new ObjectValue(/* @__PURE__ */ new Map());\n                    }\n                    if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {\n                        throw new Error(\"`namespace` expects either zero arguments or a single object argument\");\n                    }\n                    return args[0];\n                })\n            ]\n        ]);\n        /**\n   * The tests available in this environment.\n   */ this.tests = /* @__PURE__ */ new Map([\n            [\n                \"boolean\",\n                (operand)=>operand.type === \"BooleanValue\"\n            ],\n            [\n                \"callable\",\n                (operand)=>operand instanceof FunctionValue\n            ],\n            [\n                \"odd\",\n                (operand)=>{\n                    if (!(operand instanceof IntegerValue)) {\n                        throw new Error(`cannot odd on ${operand.type}`);\n                    }\n                    return operand.value % 2 !== 0;\n                }\n            ],\n            [\n                \"even\",\n                (operand)=>{\n                    if (!(operand instanceof IntegerValue)) {\n                        throw new Error(`cannot even on ${operand.type}`);\n                    }\n                    return operand.value % 2 === 0;\n                }\n            ],\n            [\n                \"false\",\n                (operand)=>operand.type === \"BooleanValue\" && !operand.value\n            ],\n            [\n                \"true\",\n                (operand)=>operand.type === \"BooleanValue\" && operand.value\n            ],\n            [\n                \"none\",\n                (operand)=>operand.type === \"NullValue\"\n            ],\n            [\n                \"string\",\n                (operand)=>operand.type === \"StringValue\"\n            ],\n            [\n                \"number\",\n                (operand)=>operand instanceof IntegerValue || operand instanceof FloatValue\n            ],\n            [\n                \"integer\",\n                (operand)=>operand instanceof IntegerValue\n            ],\n            [\n                \"iterable\",\n                (operand)=>operand.type === \"ArrayValue\" || operand.type === \"StringValue\"\n            ],\n            [\n                \"mapping\",\n                (operand)=>operand.type === \"ObjectValue\"\n            ],\n            [\n                \"lower\",\n                (operand)=>{\n                    const str = operand.value;\n                    return operand.type === \"StringValue\" && str === str.toLowerCase();\n                }\n            ],\n            [\n                \"upper\",\n                (operand)=>{\n                    const str = operand.value;\n                    return operand.type === \"StringValue\" && str === str.toUpperCase();\n                }\n            ],\n            [\n                \"none\",\n                (operand)=>operand.type === \"NullValue\"\n            ],\n            [\n                \"defined\",\n                (operand)=>operand.type !== \"UndefinedValue\"\n            ],\n            [\n                \"undefined\",\n                (operand)=>operand.type === \"UndefinedValue\"\n            ],\n            [\n                \"equalto\",\n                (a, b)=>a.value === b.value\n            ],\n            [\n                \"eq\",\n                (a, b)=>a.value === b.value\n            ]\n        ]);\n        this.parent = parent;\n    }\n    /**\n   * Set the value of a variable in the current environment.\n   */ set(name, value) {\n        return this.declareVariable(name, convertToRuntimeValues(value));\n    }\n    declareVariable(name, value) {\n        if (this.variables.has(name)) {\n            throw new SyntaxError(`Variable already declared: ${name}`);\n        }\n        this.variables.set(name, value);\n        return value;\n    }\n    // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {\n    // \tconst env = this.resolve(name);\n    // \tenv.variables.set(name, value);\n    // \treturn value;\n    // }\n    /**\n   * Set variable in the current scope.\n   * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.\n   */ setVariable(name, value) {\n        this.variables.set(name, value);\n        return value;\n    }\n    /**\n   * Resolve the environment in which the variable is declared.\n   * @param {string} name The name of the variable.\n   * @returns {Environment} The environment in which the variable is declared.\n   */ resolve(name) {\n        if (this.variables.has(name)) {\n            return this;\n        }\n        if (this.parent) {\n            return this.parent.resolve(name);\n        }\n        throw new Error(`Unknown variable: ${name}`);\n    }\n    lookupVariable(name) {\n        try {\n            return this.resolve(name).variables.get(name) ?? new UndefinedValue();\n        } catch  {\n            return new UndefinedValue();\n        }\n    }\n};\nfunction setupGlobals(env) {\n    env.set(\"false\", false);\n    env.set(\"true\", true);\n    env.set(\"none\", null);\n    env.set(\"raise_exception\", (args)=>{\n        throw new Error(args);\n    });\n    env.set(\"range\", range);\n    env.set(\"strftime_now\", strftime_now);\n    env.set(\"True\", true);\n    env.set(\"False\", false);\n    env.set(\"None\", null);\n}\nvar Interpreter = class {\n    constructor(env){\n        this.global = env ?? new Environment();\n    }\n    /**\n   * Run the program.\n   */ run(program) {\n        return this.evaluate(program, this.global);\n    }\n    /**\n   * Evaluates expressions following the binary operation type.\n   */ evaluateBinaryExpression(node, environment) {\n        const left = this.evaluate(node.left, environment);\n        switch(node.operator.value){\n            case \"and\":\n                return left.__bool__().value ? this.evaluate(node.right, environment) : left;\n            case \"or\":\n                return left.__bool__().value ? left : this.evaluate(node.right, environment);\n        }\n        const right = this.evaluate(node.right, environment);\n        switch(node.operator.value){\n            case \"==\":\n                return new BooleanValue(left.value == right.value);\n            case \"!=\":\n                return new BooleanValue(left.value != right.value);\n        }\n        if (left instanceof UndefinedValue || right instanceof UndefinedValue) {\n            if (right instanceof UndefinedValue && [\n                \"in\",\n                \"not in\"\n            ].includes(node.operator.value)) {\n                return new BooleanValue(node.operator.value === \"not in\");\n            }\n            throw new Error(`Cannot perform operation ${node.operator.value} on undefined values`);\n        } else if (left instanceof NullValue || right instanceof NullValue) {\n            throw new Error(\"Cannot perform operation on null values\");\n        } else if (node.operator.value === \"~\") {\n            return new StringValue(left.value.toString() + right.value.toString());\n        } else if ((left instanceof IntegerValue || left instanceof FloatValue) && (right instanceof IntegerValue || right instanceof FloatValue)) {\n            const a = left.value, b = right.value;\n            switch(node.operator.value){\n                case \"+\":\n                case \"-\":\n                case \"*\":\n                    {\n                        const res = node.operator.value === \"+\" ? a + b : node.operator.value === \"-\" ? a - b : a * b;\n                        const isFloat = left instanceof FloatValue || right instanceof FloatValue;\n                        return isFloat ? new FloatValue(res) : new IntegerValue(res);\n                    }\n                case \"/\":\n                    return new FloatValue(a / b);\n                case \"%\":\n                    {\n                        const rem = a % b;\n                        const isFloat = left instanceof FloatValue || right instanceof FloatValue;\n                        return isFloat ? new FloatValue(rem) : new IntegerValue(rem);\n                    }\n                case \"<\":\n                    return new BooleanValue(a < b);\n                case \">\":\n                    return new BooleanValue(a > b);\n                case \">=\":\n                    return new BooleanValue(a >= b);\n                case \"<=\":\n                    return new BooleanValue(a <= b);\n            }\n        } else if (left instanceof ArrayValue && right instanceof ArrayValue) {\n            switch(node.operator.value){\n                case \"+\":\n                    return new ArrayValue(left.value.concat(right.value));\n            }\n        } else if (right instanceof ArrayValue) {\n            const member = right.value.find((x)=>x.value === left.value) !== void 0;\n            switch(node.operator.value){\n                case \"in\":\n                    return new BooleanValue(member);\n                case \"not in\":\n                    return new BooleanValue(!member);\n            }\n        }\n        if (left instanceof StringValue || right instanceof StringValue) {\n            switch(node.operator.value){\n                case \"+\":\n                    return new StringValue(left.value.toString() + right.value.toString());\n            }\n        }\n        if (left instanceof StringValue && right instanceof StringValue) {\n            switch(node.operator.value){\n                case \"in\":\n                    return new BooleanValue(right.value.includes(left.value));\n                case \"not in\":\n                    return new BooleanValue(!right.value.includes(left.value));\n            }\n        }\n        if (left instanceof StringValue && right instanceof ObjectValue) {\n            switch(node.operator.value){\n                case \"in\":\n                    return new BooleanValue(right.value.has(left.value));\n                case \"not in\":\n                    return new BooleanValue(!right.value.has(left.value));\n            }\n        }\n        throw new SyntaxError(`Unknown operator \"${node.operator.value}\" between ${left.type} and ${right.type}`);\n    }\n    evaluateArguments(args, environment) {\n        const positionalArguments = [];\n        const keywordArguments = /* @__PURE__ */ new Map();\n        for (const argument of args){\n            if (argument.type === \"SpreadExpression\") {\n                const spreadNode = argument;\n                const val = this.evaluate(spreadNode.argument, environment);\n                if (!(val instanceof ArrayValue)) {\n                    throw new Error(`Cannot unpack non-iterable type: ${val.type}`);\n                }\n                for (const item of val.value){\n                    positionalArguments.push(item);\n                }\n            } else if (argument.type === \"KeywordArgumentExpression\") {\n                const kwarg = argument;\n                keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));\n            } else {\n                if (keywordArguments.size > 0) {\n                    throw new Error(\"Positional arguments must come before keyword arguments\");\n                }\n                positionalArguments.push(this.evaluate(argument, environment));\n            }\n        }\n        return [\n            positionalArguments,\n            keywordArguments\n        ];\n    }\n    applyFilter(operand, filterNode, environment) {\n        if (filterNode.type === \"Identifier\") {\n            const filter = filterNode;\n            if (filter.value === \"tojson\") {\n                return new StringValue(toJSON(operand));\n            }\n            if (operand instanceof ArrayValue) {\n                switch(filter.value){\n                    case \"list\":\n                        return operand;\n                    case \"first\":\n                        return operand.value[0];\n                    case \"last\":\n                        return operand.value[operand.value.length - 1];\n                    case \"length\":\n                        return new IntegerValue(operand.value.length);\n                    case \"reverse\":\n                        return new ArrayValue(operand.value.reverse());\n                    case \"sort\":\n                        return new ArrayValue(operand.value.sort((a, b)=>{\n                            if (a.type !== b.type) {\n                                throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);\n                            }\n                            switch(a.type){\n                                case \"IntegerValue\":\n                                case \"FloatValue\":\n                                    return a.value - b.value;\n                                case \"StringValue\":\n                                    return a.value.localeCompare(b.value);\n                                default:\n                                    throw new Error(`Cannot compare type: ${a.type}`);\n                            }\n                        }));\n                    case \"join\":\n                        return new StringValue(operand.value.map((x)=>x.value).join(\"\"));\n                    case \"string\":\n                        return new StringValue(toJSON(operand));\n                    case \"unique\":\n                        {\n                            const seen = /* @__PURE__ */ new Set();\n                            const output = [];\n                            for (const item of operand.value){\n                                if (!seen.has(item.value)) {\n                                    seen.add(item.value);\n                                    output.push(item);\n                                }\n                            }\n                            return new ArrayValue(output);\n                        }\n                    default:\n                        throw new Error(`Unknown ArrayValue filter: ${filter.value}`);\n                }\n            } else if (operand instanceof StringValue) {\n                switch(filter.value){\n                    case \"length\":\n                    case \"upper\":\n                    case \"lower\":\n                    case \"title\":\n                    case \"capitalize\":\n                        {\n                            const builtin = operand.builtins.get(filter.value);\n                            if (builtin instanceof FunctionValue) {\n                                return builtin.value(/* no arguments */ [], environment);\n                            } else if (builtin instanceof IntegerValue) {\n                                return builtin;\n                            } else {\n                                throw new Error(`Unknown StringValue filter: ${filter.value}`);\n                            }\n                        }\n                    case \"trim\":\n                        return new StringValue(operand.value.trim());\n                    case \"indent\":\n                        return new StringValue(operand.value.split(\"\\n\").map((x, i)=>// By default, don't indent the first line or empty lines\n                            i === 0 || x.length === 0 ? x : \"    \" + x).join(\"\\n\"));\n                    case \"join\":\n                    case \"string\":\n                        return operand;\n                    case \"int\":\n                        {\n                            const val = parseInt(operand.value, 10);\n                            return new IntegerValue(isNaN(val) ? 0 : val);\n                        }\n                    case \"float\":\n                        {\n                            const val = parseFloat(operand.value);\n                            return new FloatValue(isNaN(val) ? 0 : val);\n                        }\n                    default:\n                        throw new Error(`Unknown StringValue filter: ${filter.value}`);\n                }\n            } else if (operand instanceof IntegerValue || operand instanceof FloatValue) {\n                switch(filter.value){\n                    case \"abs\":\n                        return operand instanceof IntegerValue ? new IntegerValue(Math.abs(operand.value)) : new FloatValue(Math.abs(operand.value));\n                    case \"int\":\n                        return new IntegerValue(Math.floor(operand.value));\n                    case \"float\":\n                        return new FloatValue(operand.value);\n                    default:\n                        throw new Error(`Unknown NumericValue filter: ${filter.value}`);\n                }\n            } else if (operand instanceof ObjectValue) {\n                switch(filter.value){\n                    case \"items\":\n                        return new ArrayValue(Array.from(operand.value.entries()).map(([key, value])=>new ArrayValue([\n                                new StringValue(key),\n                                value\n                            ])));\n                    case \"length\":\n                        return new IntegerValue(operand.value.size);\n                    default:\n                        throw new Error(`Unknown ObjectValue filter: ${filter.value}`);\n                }\n            } else if (operand instanceof BooleanValue) {\n                switch(filter.value){\n                    case \"bool\":\n                        return new BooleanValue(operand.value);\n                    case \"int\":\n                        return new IntegerValue(operand.value ? 1 : 0);\n                    case \"float\":\n                        return new FloatValue(operand.value ? 1 : 0);\n                    case \"string\":\n                        return new StringValue(operand.value ? \"true\" : \"false\");\n                    default:\n                        throw new Error(`Unknown BooleanValue filter: ${filter.value}`);\n                }\n            }\n            throw new Error(`Cannot apply filter \"${filter.value}\" to type: ${operand.type}`);\n        } else if (filterNode.type === \"CallExpression\") {\n            const filter = filterNode;\n            if (filter.callee.type !== \"Identifier\") {\n                throw new Error(`Unknown filter: ${filter.callee.type}`);\n            }\n            const filterName = filter.callee.value;\n            if (filterName === \"tojson\") {\n                const [, kwargs] = this.evaluateArguments(filter.args, environment);\n                const indent = kwargs.get(\"indent\") ?? new NullValue();\n                if (!(indent instanceof IntegerValue || indent instanceof NullValue)) {\n                    throw new Error(\"If set, indent must be a number\");\n                }\n                return new StringValue(toJSON(operand, indent.value));\n            } else if (filterName === \"join\") {\n                let value;\n                if (operand instanceof StringValue) {\n                    value = Array.from(operand.value);\n                } else if (operand instanceof ArrayValue) {\n                    value = operand.value.map((x)=>x.value);\n                } else {\n                    throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n                }\n                const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                const separator = args.at(0) ?? kwargs.get(\"separator\") ?? new StringValue(\"\");\n                if (!(separator instanceof StringValue)) {\n                    throw new Error(\"separator must be a string\");\n                }\n                return new StringValue(value.join(separator.value));\n            } else if (filterName === \"int\" || filterName === \"float\") {\n                const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                const defaultValue = args.at(0) ?? kwargs.get(\"default\") ?? (filterName === \"int\" ? new IntegerValue(0) : new FloatValue(0));\n                if (operand instanceof StringValue) {\n                    const val = filterName === \"int\" ? parseInt(operand.value, 10) : parseFloat(operand.value);\n                    return isNaN(val) ? defaultValue : filterName === \"int\" ? new IntegerValue(val) : new FloatValue(val);\n                } else if (operand instanceof IntegerValue || operand instanceof FloatValue) {\n                    return operand;\n                } else if (operand instanceof BooleanValue) {\n                    return filterName === \"int\" ? new IntegerValue(operand.value ? 1 : 0) : new FloatValue(operand.value ? 1 : 0);\n                } else {\n                    throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n                }\n            } else if (filterName === \"default\") {\n                const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                const defaultValue = args[0] ?? new StringValue(\"\");\n                const booleanValue = args[1] ?? kwargs.get(\"boolean\") ?? new BooleanValue(false);\n                if (!(booleanValue instanceof BooleanValue)) {\n                    throw new Error(\"`default` filter flag must be a boolean\");\n                }\n                if (operand instanceof UndefinedValue || booleanValue.value && !operand.__bool__().value) {\n                    return defaultValue;\n                }\n                return operand;\n            }\n            if (operand instanceof ArrayValue) {\n                switch(filterName){\n                    case \"selectattr\":\n                    case \"rejectattr\":\n                        {\n                            const select = filterName === \"selectattr\";\n                            if (operand.value.some((x)=>!(x instanceof ObjectValue))) {\n                                throw new Error(`\\`${filterName}\\` can only be applied to array of objects`);\n                            }\n                            if (filter.args.some((x)=>x.type !== \"StringLiteral\")) {\n                                throw new Error(`arguments of \\`${filterName}\\` must be strings`);\n                            }\n                            const [attr, testName, value] = filter.args.map((x)=>this.evaluate(x, environment));\n                            let testFunction;\n                            if (testName) {\n                                const test = environment.tests.get(testName.value);\n                                if (!test) {\n                                    throw new Error(`Unknown test: ${testName.value}`);\n                                }\n                                testFunction = test;\n                            } else {\n                                testFunction = (...x)=>x[0].__bool__().value;\n                            }\n                            const filtered = operand.value.filter((item)=>{\n                                const a = item.value.get(attr.value);\n                                const result = a ? testFunction(a, value) : false;\n                                return select ? result : !result;\n                            });\n                            return new ArrayValue(filtered);\n                        }\n                    case \"map\":\n                        {\n                            const [, kwargs] = this.evaluateArguments(filter.args, environment);\n                            if (kwargs.has(\"attribute\")) {\n                                const attr = kwargs.get(\"attribute\");\n                                if (!(attr instanceof StringValue)) {\n                                    throw new Error(\"attribute must be a string\");\n                                }\n                                const defaultValue = kwargs.get(\"default\");\n                                const mapped = operand.value.map((item)=>{\n                                    if (!(item instanceof ObjectValue)) {\n                                        throw new Error(\"items in map must be an object\");\n                                    }\n                                    return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();\n                                });\n                                return new ArrayValue(mapped);\n                            } else {\n                                throw new Error(\"`map` expressions without `attribute` set are not currently supported.\");\n                            }\n                        }\n                }\n                throw new Error(`Unknown ArrayValue filter: ${filterName}`);\n            } else if (operand instanceof StringValue) {\n                switch(filterName){\n                    case \"indent\":\n                        {\n                            const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                            const width = args.at(0) ?? kwargs.get(\"width\") ?? new IntegerValue(4);\n                            if (!(width instanceof IntegerValue)) {\n                                throw new Error(\"width must be a number\");\n                            }\n                            const first = args.at(1) ?? kwargs.get(\"first\") ?? new BooleanValue(false);\n                            const blank = args.at(2) ?? kwargs.get(\"blank\") ?? new BooleanValue(false);\n                            const lines = operand.value.split(\"\\n\");\n                            const indent = \" \".repeat(width.value);\n                            const indented = lines.map((x, i)=>!first.value && i === 0 || !blank.value && x.length === 0 ? x : indent + x);\n                            return new StringValue(indented.join(\"\\n\"));\n                        }\n                    case \"replace\":\n                        {\n                            const replaceFn = operand.builtins.get(\"replace\");\n                            if (!(replaceFn instanceof FunctionValue)) {\n                                throw new Error(\"replace filter not available\");\n                            }\n                            const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n                            return replaceFn.value([\n                                ...args,\n                                new KeywordArgumentsValue(kwargs)\n                            ], environment);\n                        }\n                }\n                throw new Error(`Unknown StringValue filter: ${filterName}`);\n            } else {\n                throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n            }\n        }\n        throw new Error(`Unknown filter: ${filterNode.type}`);\n    }\n    /**\n   * Evaluates expressions following the filter operation type.\n   */ evaluateFilterExpression(node, environment) {\n        const operand = this.evaluate(node.operand, environment);\n        return this.applyFilter(operand, node.filter, environment);\n    }\n    /**\n   * Evaluates expressions following the test operation type.\n   */ evaluateTestExpression(node, environment) {\n        const operand = this.evaluate(node.operand, environment);\n        const test = environment.tests.get(node.test.value);\n        if (!test) {\n            throw new Error(`Unknown test: ${node.test.value}`);\n        }\n        const result = test(operand);\n        return new BooleanValue(node.negate ? !result : result);\n    }\n    /**\n   * Evaluates expressions following the select operation type.\n   */ evaluateSelectExpression(node, environment) {\n        const predicate = this.evaluate(node.test, environment);\n        if (!predicate.__bool__().value) {\n            return new UndefinedValue();\n        }\n        return this.evaluate(node.lhs, environment);\n    }\n    /**\n   * Evaluates expressions following the unary operation type.\n   */ evaluateUnaryExpression(node, environment) {\n        const argument = this.evaluate(node.argument, environment);\n        switch(node.operator.value){\n            case \"not\":\n                return new BooleanValue(!argument.value);\n            default:\n                throw new SyntaxError(`Unknown operator: ${node.operator.value}`);\n        }\n    }\n    evaluateTernaryExpression(node, environment) {\n        const cond = this.evaluate(node.condition, environment);\n        return cond.__bool__().value ? this.evaluate(node.trueExpr, environment) : this.evaluate(node.falseExpr, environment);\n    }\n    evalProgram(program, environment) {\n        return this.evaluateBlock(program.body, environment);\n    }\n    evaluateBlock(statements, environment) {\n        let result = \"\";\n        for (const statement of statements){\n            const lastEvaluated = this.evaluate(statement, environment);\n            if (lastEvaluated.type !== \"NullValue\" && lastEvaluated.type !== \"UndefinedValue\") {\n                result += lastEvaluated.toString();\n            }\n        }\n        return new StringValue(result);\n    }\n    evaluateIdentifier(node, environment) {\n        return environment.lookupVariable(node.value);\n    }\n    evaluateCallExpression(expr, environment) {\n        const [args, kwargs] = this.evaluateArguments(expr.args, environment);\n        if (kwargs.size > 0) {\n            args.push(new KeywordArgumentsValue(kwargs));\n        }\n        const fn = this.evaluate(expr.callee, environment);\n        if (fn.type !== \"FunctionValue\") {\n            throw new Error(`Cannot call something that is not a function: got ${fn.type}`);\n        }\n        return fn.value(args, environment);\n    }\n    evaluateSliceExpression(object, expr, environment) {\n        if (!(object instanceof ArrayValue || object instanceof StringValue)) {\n            throw new Error(\"Slice object must be an array or string\");\n        }\n        const start = this.evaluate(expr.start, environment);\n        const stop = this.evaluate(expr.stop, environment);\n        const step = this.evaluate(expr.step, environment);\n        if (!(start instanceof IntegerValue || start instanceof UndefinedValue)) {\n            throw new Error(\"Slice start must be numeric or undefined\");\n        }\n        if (!(stop instanceof IntegerValue || stop instanceof UndefinedValue)) {\n            throw new Error(\"Slice stop must be numeric or undefined\");\n        }\n        if (!(step instanceof IntegerValue || step instanceof UndefinedValue)) {\n            throw new Error(\"Slice step must be numeric or undefined\");\n        }\n        if (object instanceof ArrayValue) {\n            return new ArrayValue(slice(object.value, start.value, stop.value, step.value));\n        } else {\n            return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(\"\"));\n        }\n    }\n    evaluateMemberExpression(expr, environment) {\n        const object = this.evaluate(expr.object, environment);\n        let property;\n        if (expr.computed) {\n            if (expr.property.type === \"SliceExpression\") {\n                return this.evaluateSliceExpression(object, expr.property, environment);\n            } else {\n                property = this.evaluate(expr.property, environment);\n            }\n        } else {\n            property = new StringValue(expr.property.value);\n        }\n        let value;\n        if (object instanceof ObjectValue) {\n            if (!(property instanceof StringValue)) {\n                throw new Error(`Cannot access property with non-string: got ${property.type}`);\n            }\n            value = object.value.get(property.value) ?? object.builtins.get(property.value);\n        } else if (object instanceof ArrayValue || object instanceof StringValue) {\n            if (property instanceof IntegerValue) {\n                value = object.value.at(property.value);\n                if (object instanceof StringValue) {\n                    value = new StringValue(object.value.at(property.value));\n                }\n            } else if (property instanceof StringValue) {\n                value = object.builtins.get(property.value);\n            } else {\n                throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);\n            }\n        } else {\n            if (!(property instanceof StringValue)) {\n                throw new Error(`Cannot access property with non-string: got ${property.type}`);\n            }\n            value = object.builtins.get(property.value);\n        }\n        return value instanceof RuntimeValue ? value : new UndefinedValue();\n    }\n    evaluateSet(node, environment) {\n        const rhs = node.value ? this.evaluate(node.value, environment) : this.evaluateBlock(node.body, environment);\n        if (node.assignee.type === \"Identifier\") {\n            const variableName = node.assignee.value;\n            environment.setVariable(variableName, rhs);\n        } else if (node.assignee.type === \"TupleLiteral\") {\n            const tuple = node.assignee;\n            if (!(rhs instanceof ArrayValue)) {\n                throw new Error(`Cannot unpack non-iterable type in set: ${rhs.type}`);\n            }\n            const arr = rhs.value;\n            if (arr.length !== tuple.value.length) {\n                throw new Error(`Too ${tuple.value.length > arr.length ? \"few\" : \"many\"} items to unpack in set`);\n            }\n            for(let i = 0; i < tuple.value.length; ++i){\n                const elem = tuple.value[i];\n                if (elem.type !== \"Identifier\") {\n                    throw new Error(`Cannot unpack to non-identifier in set: ${elem.type}`);\n                }\n                environment.setVariable(elem.value, arr[i]);\n            }\n        } else if (node.assignee.type === \"MemberExpression\") {\n            const member = node.assignee;\n            const object = this.evaluate(member.object, environment);\n            if (!(object instanceof ObjectValue)) {\n                throw new Error(\"Cannot assign to member of non-object\");\n            }\n            if (member.property.type !== \"Identifier\") {\n                throw new Error(\"Cannot assign to member with non-identifier property\");\n            }\n            object.value.set(member.property.value, rhs);\n        } else {\n            throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);\n        }\n        return new NullValue();\n    }\n    evaluateIf(node, environment) {\n        const test = this.evaluate(node.test, environment);\n        return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);\n    }\n    evaluateFor(node, environment) {\n        const scope = new Environment(environment);\n        let test, iterable;\n        if (node.iterable.type === \"SelectExpression\") {\n            const select = node.iterable;\n            iterable = this.evaluate(select.lhs, scope);\n            test = select.test;\n        } else {\n            iterable = this.evaluate(node.iterable, scope);\n        }\n        if (!(iterable instanceof ArrayValue || iterable instanceof ObjectValue)) {\n            throw new Error(`Expected iterable or object type in for loop: got ${iterable.type}`);\n        }\n        if (iterable instanceof ObjectValue) {\n            iterable = iterable.keys();\n        }\n        const items = [];\n        const scopeUpdateFunctions = [];\n        for(let i = 0; i < iterable.value.length; ++i){\n            const loopScope = new Environment(scope);\n            const current = iterable.value[i];\n            let scopeUpdateFunction;\n            if (node.loopvar.type === \"Identifier\") {\n                scopeUpdateFunction = (scope2)=>scope2.setVariable(node.loopvar.value, current);\n            } else if (node.loopvar.type === \"TupleLiteral\") {\n                const loopvar = node.loopvar;\n                if (current.type !== \"ArrayValue\") {\n                    throw new Error(`Cannot unpack non-iterable type: ${current.type}`);\n                }\n                const c = current;\n                if (loopvar.value.length !== c.value.length) {\n                    throw new Error(`Too ${loopvar.value.length > c.value.length ? \"few\" : \"many\"} items to unpack`);\n                }\n                scopeUpdateFunction = (scope2)=>{\n                    for(let j = 0; j < loopvar.value.length; ++j){\n                        if (loopvar.value[j].type !== \"Identifier\") {\n                            throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);\n                        }\n                        scope2.setVariable(loopvar.value[j].value, c.value[j]);\n                    }\n                };\n            } else {\n                throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);\n            }\n            if (test) {\n                scopeUpdateFunction(loopScope);\n                const testValue = this.evaluate(test, loopScope);\n                if (!testValue.__bool__().value) {\n                    continue;\n                }\n            }\n            items.push(current);\n            scopeUpdateFunctions.push(scopeUpdateFunction);\n        }\n        let result = \"\";\n        let noIteration = true;\n        for(let i = 0; i < items.length; ++i){\n            const loop = /* @__PURE__ */ new Map([\n                [\n                    \"index\",\n                    new IntegerValue(i + 1)\n                ],\n                [\n                    \"index0\",\n                    new IntegerValue(i)\n                ],\n                [\n                    \"revindex\",\n                    new IntegerValue(items.length - i)\n                ],\n                [\n                    \"revindex0\",\n                    new IntegerValue(items.length - i - 1)\n                ],\n                [\n                    \"first\",\n                    new BooleanValue(i === 0)\n                ],\n                [\n                    \"last\",\n                    new BooleanValue(i === items.length - 1)\n                ],\n                [\n                    \"length\",\n                    new IntegerValue(items.length)\n                ],\n                [\n                    \"previtem\",\n                    i > 0 ? items[i - 1] : new UndefinedValue()\n                ],\n                [\n                    \"nextitem\",\n                    i < items.length - 1 ? items[i + 1] : new UndefinedValue()\n                ]\n            ]);\n            scope.setVariable(\"loop\", new ObjectValue(loop));\n            scopeUpdateFunctions[i](scope);\n            try {\n                const evaluated = this.evaluateBlock(node.body, scope);\n                result += evaluated.value;\n            } catch (err) {\n                if (err instanceof ContinueControl) {\n                    continue;\n                }\n                if (err instanceof BreakControl) {\n                    break;\n                }\n                throw err;\n            }\n            noIteration = false;\n        }\n        if (noIteration) {\n            const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);\n            result += defaultEvaluated.value;\n        }\n        return new StringValue(result);\n    }\n    /**\n   * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.\n   */ evaluateMacro(node, environment) {\n        environment.setVariable(node.name.value, new FunctionValue((args, scope)=>{\n            const macroScope = new Environment(scope);\n            args = args.slice();\n            let kwargs;\n            if (args.at(-1)?.type === \"KeywordArgumentsValue\") {\n                kwargs = args.pop();\n            }\n            for(let i = 0; i < node.args.length; ++i){\n                const nodeArg = node.args[i];\n                const passedArg = args[i];\n                if (nodeArg.type === \"Identifier\") {\n                    const identifier = nodeArg;\n                    if (!passedArg) {\n                        throw new Error(`Missing positional argument: ${identifier.value}`);\n                    }\n                    macroScope.setVariable(identifier.value, passedArg);\n                } else if (nodeArg.type === \"KeywordArgumentExpression\") {\n                    const kwarg = nodeArg;\n                    const value = passedArg ?? // Try positional arguments first\n                    kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs\n                    this.evaluate(kwarg.value, macroScope);\n                    macroScope.setVariable(kwarg.key.value, value);\n                } else {\n                    throw new Error(`Unknown argument type: ${nodeArg.type}`);\n                }\n            }\n            return this.evaluateBlock(node.body, macroScope);\n        }));\n        return new NullValue();\n    }\n    evaluateCallStatement(node, environment) {\n        const callerFn = new FunctionValue((callerArgs, callerEnv)=>{\n            const callBlockEnv = new Environment(callerEnv);\n            if (node.callerArgs) {\n                for(let i = 0; i < node.callerArgs.length; ++i){\n                    const param = node.callerArgs[i];\n                    if (param.type !== \"Identifier\") {\n                        throw new Error(`Caller parameter must be an identifier, got ${param.type}`);\n                    }\n                    callBlockEnv.setVariable(param.value, callerArgs[i] ?? new UndefinedValue());\n                }\n            }\n            return this.evaluateBlock(node.body, callBlockEnv);\n        });\n        const [macroArgs, macroKwargs] = this.evaluateArguments(node.call.args, environment);\n        macroArgs.push(new KeywordArgumentsValue(macroKwargs));\n        const fn = this.evaluate(node.call.callee, environment);\n        if (fn.type !== \"FunctionValue\") {\n            throw new Error(`Cannot call something that is not a function: got ${fn.type}`);\n        }\n        const newEnv = new Environment(environment);\n        newEnv.setVariable(\"caller\", callerFn);\n        return fn.value(macroArgs, newEnv);\n    }\n    evaluateFilterStatement(node, environment) {\n        const rendered = this.evaluateBlock(node.body, environment);\n        return this.applyFilter(rendered, node.filter, environment);\n    }\n    evaluate(statement, environment) {\n        if (!statement) return new UndefinedValue();\n        switch(statement.type){\n            case \"Program\":\n                return this.evalProgram(statement, environment);\n            case \"Set\":\n                return this.evaluateSet(statement, environment);\n            case \"If\":\n                return this.evaluateIf(statement, environment);\n            case \"For\":\n                return this.evaluateFor(statement, environment);\n            case \"Macro\":\n                return this.evaluateMacro(statement, environment);\n            case \"CallStatement\":\n                return this.evaluateCallStatement(statement, environment);\n            case \"Break\":\n                throw new BreakControl();\n            case \"Continue\":\n                throw new ContinueControl();\n            case \"IntegerLiteral\":\n                return new IntegerValue(statement.value);\n            case \"FloatLiteral\":\n                return new FloatValue(statement.value);\n            case \"StringLiteral\":\n                return new StringValue(statement.value);\n            case \"ArrayLiteral\":\n                return new ArrayValue(statement.value.map((x)=>this.evaluate(x, environment)));\n            case \"TupleLiteral\":\n                return new TupleValue(statement.value.map((x)=>this.evaluate(x, environment)));\n            case \"ObjectLiteral\":\n                {\n                    const mapping = /* @__PURE__ */ new Map();\n                    for (const [key, value] of statement.value){\n                        const evaluatedKey = this.evaluate(key, environment);\n                        if (!(evaluatedKey instanceof StringValue)) {\n                            throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);\n                        }\n                        mapping.set(evaluatedKey.value, this.evaluate(value, environment));\n                    }\n                    return new ObjectValue(mapping);\n                }\n            case \"Identifier\":\n                return this.evaluateIdentifier(statement, environment);\n            case \"CallExpression\":\n                return this.evaluateCallExpression(statement, environment);\n            case \"MemberExpression\":\n                return this.evaluateMemberExpression(statement, environment);\n            case \"UnaryExpression\":\n                return this.evaluateUnaryExpression(statement, environment);\n            case \"BinaryExpression\":\n                return this.evaluateBinaryExpression(statement, environment);\n            case \"FilterExpression\":\n                return this.evaluateFilterExpression(statement, environment);\n            case \"FilterStatement\":\n                return this.evaluateFilterStatement(statement, environment);\n            case \"TestExpression\":\n                return this.evaluateTestExpression(statement, environment);\n            case \"SelectExpression\":\n                return this.evaluateSelectExpression(statement, environment);\n            case \"Ternary\":\n                return this.evaluateTernaryExpression(statement, environment);\n            case \"Comment\":\n                return new NullValue();\n            default:\n                throw new SyntaxError(`Unknown node type: ${statement.type}`);\n        }\n    }\n};\nfunction convertToRuntimeValues(input) {\n    switch(typeof input){\n        case \"number\":\n            return Number.isInteger(input) ? new IntegerValue(input) : new FloatValue(input);\n        case \"string\":\n            return new StringValue(input);\n        case \"boolean\":\n            return new BooleanValue(input);\n        case \"undefined\":\n            return new UndefinedValue();\n        case \"object\":\n            if (input === null) {\n                return new NullValue();\n            } else if (Array.isArray(input)) {\n                return new ArrayValue(input.map(convertToRuntimeValues));\n            } else {\n                return new ObjectValue(new Map(Object.entries(input).map(([key, value])=>[\n                        key,\n                        convertToRuntimeValues(value)\n                    ])));\n            }\n        case \"function\":\n            return new FunctionValue((args, _scope)=>{\n                const result = input(...args.map((x)=>x.value)) ?? null;\n                return convertToRuntimeValues(result);\n            });\n        default:\n            throw new Error(`Cannot convert to runtime value: ${input}`);\n    }\n}\nfunction toJSON(input, indent, depth) {\n    const currentDepth = depth ?? 0;\n    switch(input.type){\n        case \"NullValue\":\n        case \"UndefinedValue\":\n            return \"null\";\n        case \"IntegerValue\":\n        case \"FloatValue\":\n        case \"StringValue\":\n        case \"BooleanValue\":\n            return JSON.stringify(input.value);\n        case \"ArrayValue\":\n        case \"ObjectValue\":\n            {\n                const indentValue = indent ? \" \".repeat(indent) : \"\";\n                const basePadding = \"\\n\" + indentValue.repeat(currentDepth);\n                const childrenPadding = basePadding + indentValue;\n                if (input.type === \"ArrayValue\") {\n                    const core = input.value.map((x)=>toJSON(x, indent, currentDepth + 1));\n                    return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(\", \")}]`;\n                } else {\n                    const core = Array.from(input.value.entries()).map(([key, value])=>{\n                        const v = `\"${key}\": ${toJSON(value, indent, currentDepth + 1)}`;\n                        return indent ? `${childrenPadding}${v}` : v;\n                    });\n                    return indent ? `{${core.join(\",\")}${basePadding}}` : `{${core.join(\", \")}}`;\n                }\n            }\n        default:\n            throw new Error(`Cannot convert to JSON: ${input.type}`);\n    }\n}\n// src/format.ts\nvar NEWLINE = \"\\n\";\nvar OPEN_STATEMENT = \"{%- \";\nvar CLOSE_STATEMENT = \" -%}\";\nfunction getBinaryOperatorPrecedence(expr) {\n    switch(expr.operator.type){\n        case \"MultiplicativeBinaryOperator\":\n            return 4;\n        case \"AdditiveBinaryOperator\":\n            return 3;\n        case \"ComparisonBinaryOperator\":\n            return 2;\n        case \"Identifier\":\n            if (expr.operator.value === \"and\") return 1;\n            if (expr.operator.value === \"in\" || expr.operator.value === \"not in\") return 2;\n            return 0;\n    }\n    return 0;\n}\nfunction format(program, indent = \"\t\") {\n    const indentStr = typeof indent === \"number\" ? \" \".repeat(indent) : indent;\n    const body = formatStatements(program.body, 0, indentStr);\n    return body.replace(/\\n$/, \"\");\n}\nfunction createStatement(...text) {\n    return OPEN_STATEMENT + text.join(\" \") + CLOSE_STATEMENT;\n}\nfunction formatStatements(stmts, depth, indentStr) {\n    return stmts.map((stmt)=>formatStatement(stmt, depth, indentStr)).join(NEWLINE);\n}\nfunction formatStatement(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    switch(node.type){\n        case \"Program\":\n            return formatStatements(node.body, depth, indentStr);\n        case \"If\":\n            return formatIf(node, depth, indentStr);\n        case \"For\":\n            return formatFor(node, depth, indentStr);\n        case \"Set\":\n            return formatSet(node, depth, indentStr);\n        case \"Macro\":\n            return formatMacro(node, depth, indentStr);\n        case \"Break\":\n            return pad + createStatement(\"break\");\n        case \"Continue\":\n            return pad + createStatement(\"continue\");\n        case \"CallStatement\":\n            return formatCallStatement(node, depth, indentStr);\n        case \"FilterStatement\":\n            return formatFilterStatement(node, depth, indentStr);\n        case \"Comment\":\n            return pad + \"{# \" + node.value + \" #}\";\n        default:\n            return pad + \"{{- \" + formatExpression(node) + \" -}}\";\n    }\n}\nfunction formatIf(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    const clauses = [];\n    let current = node;\n    while(current){\n        clauses.push({\n            test: current.test,\n            body: current.body\n        });\n        if (current.alternate.length === 1 && current.alternate[0].type === \"If\") {\n            current = current.alternate[0];\n        } else {\n            break;\n        }\n    }\n    let out = pad + createStatement(\"if\", formatExpression(clauses[0].test)) + NEWLINE + formatStatements(clauses[0].body, depth + 1, indentStr);\n    for(let i = 1; i < clauses.length; ++i){\n        out += NEWLINE + pad + createStatement(\"elif\", formatExpression(clauses[i].test)) + NEWLINE + formatStatements(clauses[i].body, depth + 1, indentStr);\n    }\n    if (current && current.alternate.length > 0) {\n        out += NEWLINE + pad + createStatement(\"else\") + NEWLINE + formatStatements(current.alternate, depth + 1, indentStr);\n    }\n    out += NEWLINE + pad + createStatement(\"endif\");\n    return out;\n}\nfunction formatFor(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    let formattedIterable = \"\";\n    if (node.iterable.type === \"SelectExpression\") {\n        const n = node.iterable;\n        formattedIterable = `${formatExpression(n.lhs)} if ${formatExpression(n.test)}`;\n    } else {\n        formattedIterable = formatExpression(node.iterable);\n    }\n    let out = pad + createStatement(\"for\", formatExpression(node.loopvar), \"in\", formattedIterable) + NEWLINE + formatStatements(node.body, depth + 1, indentStr);\n    if (node.defaultBlock.length > 0) {\n        out += NEWLINE + pad + createStatement(\"else\") + NEWLINE + formatStatements(node.defaultBlock, depth + 1, indentStr);\n    }\n    out += NEWLINE + pad + createStatement(\"endfor\");\n    return out;\n}\nfunction formatSet(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    const left = formatExpression(node.assignee);\n    const right = node.value ? formatExpression(node.value) : \"\";\n    const value = pad + createStatement(\"set\", `${left}${node.value ? \" = \" + right : \"\"}`);\n    if (node.body.length === 0) {\n        return value;\n    }\n    return value + NEWLINE + formatStatements(node.body, depth + 1, indentStr) + NEWLINE + pad + createStatement(\"endset\");\n}\nfunction formatMacro(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    const args = node.args.map(formatExpression).join(\", \");\n    return pad + createStatement(\"macro\", `${node.name.value}(${args})`) + NEWLINE + formatStatements(node.body, depth + 1, indentStr) + NEWLINE + pad + createStatement(\"endmacro\");\n}\nfunction formatCallStatement(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    const params = node.callerArgs && node.callerArgs.length > 0 ? `(${node.callerArgs.map(formatExpression).join(\", \")})` : \"\";\n    const callExpr = formatExpression(node.call);\n    let out = pad + createStatement(`call${params}`, callExpr) + NEWLINE;\n    out += formatStatements(node.body, depth + 1, indentStr) + NEWLINE;\n    out += pad + createStatement(\"endcall\");\n    return out;\n}\nfunction formatFilterStatement(node, depth, indentStr) {\n    const pad = indentStr.repeat(depth);\n    const spec = node.filter.type === \"Identifier\" ? node.filter.value : formatExpression(node.filter);\n    let out = pad + createStatement(\"filter\", spec) + NEWLINE;\n    out += formatStatements(node.body, depth + 1, indentStr) + NEWLINE;\n    out += pad + createStatement(\"endfilter\");\n    return out;\n}\nfunction formatExpression(node, parentPrec = -1) {\n    switch(node.type){\n        case \"SpreadExpression\":\n            {\n                const n = node;\n                return `*${formatExpression(n.argument)}`;\n            }\n        case \"Identifier\":\n            return node.value;\n        case \"IntegerLiteral\":\n            return `${node.value}`;\n        case \"FloatLiteral\":\n            return `${node.value}`;\n        case \"StringLiteral\":\n            return JSON.stringify(node.value);\n        case \"BinaryExpression\":\n            {\n                const n = node;\n                const thisPrecedence = getBinaryOperatorPrecedence(n);\n                const left = formatExpression(n.left, thisPrecedence);\n                const right = formatExpression(n.right, thisPrecedence + 1);\n                const expr = `${left} ${n.operator.value} ${right}`;\n                return thisPrecedence < parentPrec ? `(${expr})` : expr;\n            }\n        case \"UnaryExpression\":\n            {\n                const n = node;\n                const val = n.operator.value + (n.operator.value === \"not\" ? \" \" : \"\") + formatExpression(n.argument, Infinity);\n                return val;\n            }\n        case \"CallExpression\":\n            {\n                const n = node;\n                const args = n.args.map(formatExpression).join(\", \");\n                return `${formatExpression(n.callee)}(${args})`;\n            }\n        case \"MemberExpression\":\n            {\n                const n = node;\n                let obj = formatExpression(n.object);\n                if (![\n                    \"Identifier\",\n                    \"MemberExpression\",\n                    \"CallExpression\",\n                    \"StringLiteral\",\n                    \"IntegerLiteral\",\n                    \"FloatLiteral\",\n                    \"ArrayLiteral\",\n                    \"TupleLiteral\",\n                    \"ObjectLiteral\"\n                ].includes(n.object.type)) {\n                    obj = `(${obj})`;\n                }\n                let prop = formatExpression(n.property);\n                if (!n.computed && n.property.type !== \"Identifier\") {\n                    prop = `(${prop})`;\n                }\n                return n.computed ? `${obj}[${prop}]` : `${obj}.${prop}`;\n            }\n        case \"FilterExpression\":\n            {\n                const n = node;\n                const operand = formatExpression(n.operand, Infinity);\n                if (n.filter.type === \"CallExpression\") {\n                    return `${operand} | ${formatExpression(n.filter)}`;\n                }\n                return `${operand} | ${n.filter.value}`;\n            }\n        case \"SelectExpression\":\n            {\n                const n = node;\n                return `${formatExpression(n.lhs)} if ${formatExpression(n.test)}`;\n            }\n        case \"TestExpression\":\n            {\n                const n = node;\n                return `${formatExpression(n.operand)} is${n.negate ? \" not\" : \"\"} ${n.test.value}`;\n            }\n        case \"ArrayLiteral\":\n        case \"TupleLiteral\":\n            {\n                const elems = node.value.map(formatExpression);\n                const brackets = node.type === \"ArrayLiteral\" ? \"[]\" : \"()\";\n                return `${brackets[0]}${elems.join(\", \")}${brackets[1]}`;\n            }\n        case \"ObjectLiteral\":\n            {\n                const entries = Array.from(node.value.entries()).map(([k, v])=>`${formatExpression(k)}: ${formatExpression(v)}`);\n                return `{${entries.join(\", \")}}`;\n            }\n        case \"SliceExpression\":\n            {\n                const n = node;\n                const s = n.start ? formatExpression(n.start) : \"\";\n                const t = n.stop ? formatExpression(n.stop) : \"\";\n                const st = n.step ? `:${formatExpression(n.step)}` : \"\";\n                return `${s}:${t}${st}`;\n            }\n        case \"KeywordArgumentExpression\":\n            {\n                const n = node;\n                return `${n.key.value}=${formatExpression(n.value)}`;\n            }\n        case \"Ternary\":\n            {\n                const n = node;\n                const expr = `${formatExpression(n.trueExpr)} if ${formatExpression(n.condition, 0)} else ${formatExpression(n.falseExpr)}`;\n                return parentPrec > -1 ? `(${expr})` : expr;\n            }\n        default:\n            throw new Error(`Unknown expression type: ${node.type}`);\n    }\n}\n// src/index.ts\nvar Template = class {\n    /**\n   * @param {string} template The template string\n   */ constructor(template){\n        const tokens = tokenize(template, {\n            lstrip_blocks: true,\n            trim_blocks: true\n        });\n        this.parsed = parse(tokens);\n    }\n    render(items) {\n        const env = new Environment();\n        setupGlobals(env);\n        if (items) {\n            for (const [key, value] of Object.entries(items)){\n                env.set(key, value);\n            }\n        }\n        const interpreter = new Interpreter(env);\n        const result = interpreter.run(this.parsed);\n        return result.value;\n    }\n    format(options) {\n        return format(this.parsed, options?.indent || \"\t\");\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/jinja/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/dataset-libraries.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/dataset-libraries.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATASET_LIBRARIES_UI_ELEMENTS: () => (/* binding */ DATASET_LIBRARIES_UI_ELEMENTS)\n/* harmony export */ });\nconst DATASET_LIBRARIES_UI_ELEMENTS = {\n    mlcroissant: {\n        prettyLabel: \"Croissant\",\n        repoName: \"croissant\",\n        repoUrl: \"https://github.com/mlcommons/croissant/tree/main/python/mlcroissant\",\n        docsUrl: \"https://huggingface.co/docs/dataset-viewer/mlcroissant\"\n    },\n    webdataset: {\n        prettyLabel: \"WebDataset\",\n        repoName: \"webdataset\",\n        repoUrl: \"https://github.com/webdataset/webdataset\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-webdataset\"\n    },\n    datasets: {\n        prettyLabel: \"Datasets\",\n        repoName: \"datasets\",\n        repoUrl: \"https://github.com/huggingface/datasets\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-usage\"\n    },\n    pandas: {\n        prettyLabel: \"pandas\",\n        repoName: \"pandas\",\n        repoUrl: \"https://github.com/pandas-dev/pandas\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-pandas\"\n    },\n    dask: {\n        prettyLabel: \"Dask\",\n        repoName: \"dask\",\n        repoUrl: \"https://github.com/dask/dask\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-dask\"\n    },\n    distilabel: {\n        prettyLabel: \"Distilabel\",\n        repoName: \"distilabel\",\n        repoUrl: \"https://github.com/argilla-io/distilabel\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-distilabel\"\n    },\n    fiftyone: {\n        prettyLabel: \"FiftyOne\",\n        repoName: \"fiftyone\",\n        repoUrl: \"https://github.com/voxel51/fiftyone\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-fiftyone\"\n    },\n    argilla: {\n        prettyLabel: \"Argilla\",\n        repoName: \"argilla\",\n        repoUrl: \"https://github.com/argilla-io/argilla\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-argilla\"\n    },\n    polars: {\n        prettyLabel: \"Polars\",\n        repoName: \"polars\",\n        repoUrl: \"https://github.com/pola-rs/polars\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-polars\"\n    },\n    duckdb: {\n        prettyLabel: \"DuckDB\",\n        repoName: \"duckdb\",\n        repoUrl: \"https://github.com/duckdb/duckdb\",\n        docsUrl: \"https://huggingface.co/docs/hub/datasets-duckdb\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2RhdGFzZXQtbGlicmFyaWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxnQ0FBZ0M7SUFDekNDLGFBQWE7UUFDVEMsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FDLFlBQVk7UUFDUkosYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FFLFVBQVU7UUFDTkwsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FHLFFBQVE7UUFDSk4sYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FJLE1BQU07UUFDRlAsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FLLFlBQVk7UUFDUlIsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FNLFVBQVU7UUFDTlQsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FPLFNBQVM7UUFDTFYsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FRLFFBQVE7UUFDSlgsYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0lBQ0FTLFFBQVE7UUFDSlosYUFBYTtRQUNiQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEMsU0FBUztJQUNiO0FBQ0osRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS9kYXRhc2V0LWxpYnJhcmllcy5qcz8yMGQzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBU0VUX0xJQlJBUklFU19VSV9FTEVNRU5UUyA9IHtcbiAgICBtbGNyb2lzc2FudDoge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJDcm9pc3NhbnRcIixcbiAgICAgICAgcmVwb05hbWU6IFwiY3JvaXNzYW50XCIsXG4gICAgICAgIHJlcG9Vcmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL21sY29tbW9ucy9jcm9pc3NhbnQvdHJlZS9tYWluL3B5dGhvbi9tbGNyb2lzc2FudFwiLFxuICAgICAgICBkb2NzVXJsOiBcImh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZG9jcy9kYXRhc2V0LXZpZXdlci9tbGNyb2lzc2FudFwiLFxuICAgIH0sXG4gICAgd2ViZGF0YXNldDoge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJXZWJEYXRhc2V0XCIsXG4gICAgICAgIHJlcG9OYW1lOiBcIndlYmRhdGFzZXRcIixcbiAgICAgICAgcmVwb1VybDogXCJodHRwczovL2dpdGh1Yi5jb20vd2ViZGF0YXNldC93ZWJkYXRhc2V0XCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy13ZWJkYXRhc2V0XCIsXG4gICAgfSxcbiAgICBkYXRhc2V0czoge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJEYXRhc2V0c1wiLFxuICAgICAgICByZXBvTmFtZTogXCJkYXRhc2V0c1wiLFxuICAgICAgICByZXBvVXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS9kYXRhc2V0c1wiLFxuICAgICAgICBkb2NzVXJsOiBcImh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZG9jcy9odWIvZGF0YXNldHMtdXNhZ2VcIixcbiAgICB9LFxuICAgIHBhbmRhczoge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJwYW5kYXNcIixcbiAgICAgICAgcmVwb05hbWU6IFwicGFuZGFzXCIsXG4gICAgICAgIHJlcG9Vcmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL3BhbmRhcy1kZXYvcGFuZGFzXCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy1wYW5kYXNcIixcbiAgICB9LFxuICAgIGRhc2s6IHtcbiAgICAgICAgcHJldHR5TGFiZWw6IFwiRGFza1wiLFxuICAgICAgICByZXBvTmFtZTogXCJkYXNrXCIsXG4gICAgICAgIHJlcG9Vcmw6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Rhc2svZGFza1wiLFxuICAgICAgICBkb2NzVXJsOiBcImh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZG9jcy9odWIvZGF0YXNldHMtZGFza1wiLFxuICAgIH0sXG4gICAgZGlzdGlsYWJlbDoge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJEaXN0aWxhYmVsXCIsXG4gICAgICAgIHJlcG9OYW1lOiBcImRpc3RpbGFiZWxcIixcbiAgICAgICAgcmVwb1VybDogXCJodHRwczovL2dpdGh1Yi5jb20vYXJnaWxsYS1pby9kaXN0aWxhYmVsXCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy1kaXN0aWxhYmVsXCIsXG4gICAgfSxcbiAgICBmaWZ0eW9uZToge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJGaWZ0eU9uZVwiLFxuICAgICAgICByZXBvTmFtZTogXCJmaWZ0eW9uZVwiLFxuICAgICAgICByZXBvVXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92b3hlbDUxL2ZpZnR5b25lXCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy1maWZ0eW9uZVwiLFxuICAgIH0sXG4gICAgYXJnaWxsYToge1xuICAgICAgICBwcmV0dHlMYWJlbDogXCJBcmdpbGxhXCIsXG4gICAgICAgIHJlcG9OYW1lOiBcImFyZ2lsbGFcIixcbiAgICAgICAgcmVwb1VybDogXCJodHRwczovL2dpdGh1Yi5jb20vYXJnaWxsYS1pby9hcmdpbGxhXCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy1hcmdpbGxhXCIsXG4gICAgfSxcbiAgICBwb2xhcnM6IHtcbiAgICAgICAgcHJldHR5TGFiZWw6IFwiUG9sYXJzXCIsXG4gICAgICAgIHJlcG9OYW1lOiBcInBvbGFyc1wiLFxuICAgICAgICByZXBvVXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9wb2xhLXJzL3BvbGFyc1wiLFxuICAgICAgICBkb2NzVXJsOiBcImh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZG9jcy9odWIvZGF0YXNldHMtcG9sYXJzXCIsXG4gICAgfSxcbiAgICBkdWNrZGI6IHtcbiAgICAgICAgcHJldHR5TGFiZWw6IFwiRHVja0RCXCIsXG4gICAgICAgIHJlcG9OYW1lOiBcImR1Y2tkYlwiLFxuICAgICAgICByZXBvVXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9kdWNrZGIvZHVja2RiXCIsXG4gICAgICAgIGRvY3NVcmw6IFwiaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kb2NzL2h1Yi9kYXRhc2V0cy1kdWNrZGJcIixcbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6WyJEQVRBU0VUX0xJQlJBUklFU19VSV9FTEVNRU5UUyIsIm1sY3JvaXNzYW50IiwicHJldHR5TGFiZWwiLCJyZXBvTmFtZSIsInJlcG9VcmwiLCJkb2NzVXJsIiwid2ViZGF0YXNldCIsImRhdGFzZXRzIiwicGFuZGFzIiwiZGFzayIsImRpc3RpbGFiZWwiLCJmaWZ0eW9uZSIsImFyZ2lsbGEiLCJwb2xhcnMiLCJkdWNrZGIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/dataset-libraries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/default-widget-inputs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/default-widget-inputs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAPPING_DEFAULT_WIDGET: () => (/* binding */ MAPPING_DEFAULT_WIDGET)\n/* harmony export */ });\n/// NOTE TO CONTRIBUTORS:\n///\n/// When adding sample inputs for a new language, you don't\n/// necessarily have to translate the inputs from existing languages.\n/// (which were quite random to begin with)\n///\n/// i.e. Feel free to be creative and provide better samples.\n//\n/// The <mask> placeholder will be replaced by the correct mask token\n/// in the following examples, depending on the model type\n///\n/// see [INTERNAL] github.com/huggingface/moon-landing/blob/c5c3d45fe0ab27347b3ab27bdad646ef20732351/server/lib/App.ts#L254\n//\nconst MAPPING_EN = new Map([\n    [\n        \"text-classification\",\n        [\n            `I like you. I love you`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `My name is Wolfgang and I live in Berlin`,\n            `My name is Sarah and I live in London`,\n            `My name is Clara and I live in Berkeley, California.`\n        ]\n    ],\n    [\n        \"table-question-answering\",\n        [\n            {\n                text: `How many stars does the transformers repository have?`,\n                table: {\n                    Repository: [\n                        \"Transformers\",\n                        \"Datasets\",\n                        \"Tokenizers\"\n                    ],\n                    Stars: [\n                        36542,\n                        4512,\n                        3934\n                    ],\n                    Contributors: [\n                        651,\n                        77,\n                        34\n                    ],\n                    \"Programming language\": [\n                        \"Python\",\n                        \"Python\",\n                        \"Rust, Python and NodeJS\"\n                    ]\n                }\n            }\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Where do I live?`,\n                context: `My name is Wolfgang and I live in Berlin`\n            },\n            {\n                text: `Where do I live?`,\n                context: `My name is Sarah and I live in London`\n            },\n            {\n                text: `What's my name?`,\n                context: `My name is Clara and I live in Berkeley.`\n            },\n            {\n                text: `Which name is also used to describe the Amazon rainforest in English?`,\n                context: `The Amazon rainforest (Portuguese: Floresta Amazônica or Amazônia; Spanish: Selva Amazónica, Amazonía or usually Amazonia; French: Forêt amazonienne; Dutch: Amazoneregenwoud), also known in English as Amazonia or the Amazon Jungle, is a moist broadleaf forest that covers most of the Amazon basin of South America. This basin encompasses 7,000,000 square kilometres (2,700,000 sq mi), of which 5,500,000 square kilometres (2,100,000 sq mi) are covered by the rainforest. This region includes territory belonging to nine nations. The majority of the forest is contained within Brazil, with 60% of the rainforest, followed by Peru with 13%, Colombia with 10%, and with minor amounts in Venezuela, Ecuador, Bolivia, Guyana, Suriname and French Guiana. States or departments in four nations contain \"Amazonas\" in their names. The Amazon represents over half of the planet's remaining rainforests, and comprises the largest and most biodiverse tract of tropical rainforest in the world, with an estimated 390 billion individual trees divided into 16,000 species.`\n            }\n        ]\n    ],\n    [\n        \"zero-shot-classification\",\n        [\n            {\n                text: \"I have a problem with my iphone that needs to be resolved asap!\",\n                candidate_labels: \"urgent, not urgent, phone, tablet, computer\",\n                multi_class: true\n            },\n            {\n                text: \"Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.\",\n                candidate_labels: \"mobile, website, billing, account access\",\n                multi_class: false\n            },\n            {\n                text: \"A new model offers an explanation for how the Galilean satellites formed around the solar system’s largest world. Konstantin Batygin did not set out to solve one of the solar system’s most puzzling mysteries when he went for a run up a hill in Nice, France. Dr. Batygin, a Caltech researcher, best known for his contributions to the search for the solar system’s missing “Planet Nine,” spotted a beer bottle. At a steep, 20 degree grade, he wondered why it wasn’t rolling down the hill. He realized there was a breeze at his back holding the bottle in place. Then he had a thought that would only pop into the mind of a theoretical astrophysicist: “Oh! This is how Europa formed.” Europa is one of Jupiter’s four large Galilean moons. And in a paper published Monday in the Astrophysical Journal, Dr. Batygin and a co-author, Alessandro Morbidelli, a planetary scientist at the C\\xf4te d’Azur Observatory in France, present a theory explaining how some moons form around gas giants like Jupiter and Saturn, suggesting that millimeter-sized grains of hail produced during the solar system’s formation became trapped around these massive worlds, taking shape one at a time into the potentially habitable moons we know today.\",\n                candidate_labels: \"space & cosmos, scientific discovery, microbiology, robots, archeology\",\n                multi_class: true\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `My name is Wolfgang and I live in Berlin`,\n            `My name is Sarah and I live in London`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.`\n        ]\n    ],\n    [\n        \"conversational\",\n        [\n            `Hi, what can you help me with?`,\n            `What is 84 * 3 / 2?`,\n            `Tell me an interesting fact about the universe!`,\n            `Explain quantum computing in simple terms.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `My name is Julien and I like to`,\n            `I like traveling by train because`,\n            `Paris is an amazing place to visit,`,\n            `Once upon a time,`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Paris is the <mask> of France.`,\n            `The goal of life is <mask>.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"That is a happy person\",\n                sentences: [\n                    \"That is a happy dog\",\n                    \"That is a very happy person\",\n                    \"Today is a sunny day\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_ZH = new Map([\n    [\n        \"text-classification\",\n        [\n            `我喜欢你。 我爱你`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `我叫沃尔夫冈，我住在柏林。`,\n            `我叫萨拉，我住在伦敦。`,\n            `我叫克拉拉，我住在加州伯克利。`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `我住在哪里？`,\n                context: `我叫沃尔夫冈，我住在柏林。`\n            },\n            {\n                text: `我住在哪里？`,\n                context: `我叫萨拉，我住在伦敦。`\n            },\n            {\n                text: `我的名字是什么？`,\n                context: `我叫克拉拉，我住在伯克利。`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `我叫沃尔夫冈，我住在柏林。`,\n            `我叫萨拉，我住在伦敦。`\n        ]\n    ],\n    [\n        \"zero-shot-classification\",\n        [\n            {\n                text: \"房间干净明亮，非常不错\",\n                candidate_labels: \"这是一条差评, 这是一条好评\"\n            }\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `该塔高324米（1063英尺），与一幢81层的建筑物一样高，是巴黎最高的建筑物。 它的底座是方形的，每边长125米（410英尺）。 在建造过程中，艾菲尔铁塔超过了华盛顿纪念碑，成为世界上最高的人造结构，它保持了41年的头衔，直到1930年纽约市的克莱斯勒大楼竣工。这是第一个到达300米高度的结构。 由于1957年在塔顶增加了广播天线，因此它现在比克莱斯勒大厦高5.2米（17英尺）。 除发射器外，艾菲尔铁塔是法国第二高的独立式建筑，仅次于米劳高架桥。`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `我叫朱利安，我喜欢`,\n            `我叫托马斯，我的主要`,\n            `我叫玛丽亚，我最喜欢的`,\n            `我叫克拉拉，我是`,\n            `从前，`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `巴黎是<mask>国的首都。`,\n            `生活的真谛是<mask>。`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"那是 個快樂的人\",\n                sentences: [\n                    \"那是 條快樂的狗\",\n                    \"那是 個非常幸福的人\",\n                    \"今天是晴天\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_FR = new Map([\n    [\n        \"text-classification\",\n        [\n            `Je t'apprécie beaucoup. Je t'aime.`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `Mon nom est Wolfgang et je vis à Berlin`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Où est-ce que je vis?`,\n                context: `Mon nom est Wolfgang et je vis à Berlin`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `Mon nom est Wolfgang et je vis à Berlin`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `La tour fait 324 mètres (1,063 pieds) de haut, environ la même hauteur qu'un immeuble de 81 étages, et est la plus haute structure de Paris. Sa base est carrée, mesurant 125 mètres (410 pieds) sur chaque côté. Durant sa construction, la tour Eiffel surpassa le Washington Monument pour devenir la plus haute structure construite par l'homme dans le monde, un titre qu'elle conserva pendant 41 ans jusqu'à l'achèvement du Chrysler Building à New-York City en 1930. Ce fut la première structure à atteindre une hauteur de 300 mètres. Avec l'ajout d'une antenne de radiodiffusion au sommet de la tour Eiffel en 1957, celle-ci redevint plus haute que le Chrysler Building de 5,2 mètres (17 pieds). En excluant les transmetteurs, elle est la seconde plus haute structure autoportante de France après le viaduc de Millau.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `Mon nom est Julien et j'aime`,\n            `Mon nom est Thomas et mon principal`,\n            `Il était une fois`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Paris est la <mask> de la France.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"C'est une personne heureuse\",\n                sentences: [\n                    \"C'est un chien heureux\",\n                    \"C'est une personne tr\\xe8s heureuse\",\n                    \"Aujourd'hui est une journ\\xe9e ensoleill\\xe9e\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_ES = new Map([\n    [\n        \"text-classification\",\n        [\n            `Te quiero. Te amo.`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `Me llamo Wolfgang y vivo en Berlin`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `¿Dónde vivo?`,\n                context: `Me llamo Wolfgang y vivo en Berlin`\n            },\n            {\n                text: `¿Quién inventó el submarino?`,\n                context: `Isaac Peral fue un murciano que inventó el submarino`\n            },\n            {\n                text: `¿Cuántas personas hablan español?`,\n                context: `El español es el segundo idioma más hablado del mundo con más de 442 millones de hablantes`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `Me llamo Wolfgang y vivo en Berlin`,\n            `Los ingredientes de una tortilla de patatas son: huevos, patatas y cebolla`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `La torre tiene 324 metros (1.063 pies) de altura, aproximadamente la misma altura que un edificio de 81 pisos y la estructura más alta de París. Su base es cuadrada, mide 125 metros (410 pies) a cada lado. Durante su construcción, la Torre Eiffel superó al Washington Monument para convertirse en la estructura artificial más alta del mundo, un título que mantuvo durante 41 años hasta que el Chrysler Building en la ciudad de Nueva York se terminó en 1930. Fue la primera estructura en llegar Una altura de 300 metros. Debido a la adición de una antena de transmisión en la parte superior de la torre en 1957, ahora es más alta que el Chrysler Building en 5,2 metros (17 pies). Excluyendo los transmisores, la Torre Eiffel es la segunda estructura independiente más alta de Francia después del Viaducto de Millau.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `Me llamo Julien y me gusta`,\n            `Me llamo Thomas y mi principal`,\n            `Me llamo Manuel y trabajo en`,\n            `Érase una vez,`,\n            `Si tú me dices ven, `\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Mi nombre es <mask> y vivo en Nueva York.`,\n            `El español es un idioma muy <mask> en el mundo.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Esa es una persona feliz\",\n                sentences: [\n                    \"Ese es un perro feliz\",\n                    \"Esa es una persona muy feliz\",\n                    \"Hoy es un d\\xeda soleado\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_RU = new Map([\n    [\n        \"text-classification\",\n        [\n            `Ты мне нравишься. Я тебя люблю`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `Меня зовут Вольфганг и я живу в Берлине`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Где живу?`,\n                context: `Меня зовут Вольфганг и я живу в Берлине`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `Меня зовут Вольфганг и я живу в Берлине`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `Высота башни составляет 324 метра (1063 фута), примерно такая же высота, как у 81-этажного здания, и самое высокое сооружение в Париже. Его основание квадратно, размером 125 метров (410 футов) с любой стороны. Во время строительства Эйфелева башня превзошла монумент Вашингтона, став самым высоким искусственным сооружением в мире, и этот титул она удерживала в течение 41 года до завершения строительство здания Крайслер в Нью-Йорке в 1930 году. Это первое сооружение которое достигло высоты 300 метров. Из-за добавления вещательной антенны на вершине башни в 1957 году она сейчас выше здания Крайслер на 5,2 метра (17 футов). За исключением передатчиков, Эйфелева башня является второй самой высокой отдельно стоящей структурой во Франции после виадука Мийо.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `Меня зовут Жюльен и`,\n            `Меня зовут Томас и мой основной`,\n            `Однажды`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Меня зовут <mask> и я инженер живущий в Нью-Йорке.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Это счастливый человек\",\n                sentences: [\n                    \"Это счастливая собака\",\n                    \"Это очень счастливый человек\",\n                    \"Сегодня солнечный день\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_UK = new Map([\n    [\n        \"translation\",\n        [\n            `Мене звати Вольфґанґ і я живу в Берліні.`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Мене звати <mask>.`\n        ]\n    ]\n]);\nconst MAPPING_IT = new Map([\n    [\n        \"text-classification\",\n        [\n            `Mi piaci. Ti amo`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `Mi chiamo Wolfgang e vivo a Berlino`,\n            `Mi chiamo Sarah e vivo a Londra`,\n            `Mi chiamo Clara e vivo a Berkeley in California.`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Dove vivo?`,\n                context: `Mi chiamo Wolfgang e vivo a Berlino`\n            },\n            {\n                text: `Dove vivo?`,\n                context: `Mi chiamo Sarah e vivo a Londra`\n            },\n            {\n                text: `Come mio chiamo?`,\n                context: `Mi chiamo Clara e vivo a Berkeley.`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `Mi chiamo Wolfgang e vivo a Berlino`,\n            `Mi chiamo Sarah e vivo a Londra`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `La torre degli Asinelli è una delle cosiddette due torri di Bologna, simbolo della città, situate in piazza di porta Ravegnana, all'incrocio tra le antiche strade San Donato (ora via Zamboni), San Vitale, Maggiore e Castiglione. Eretta, secondo la tradizione, fra il 1109 e il 1119 dal nobile Gherardo Asinelli, la torre è alta 97,20 metri, pende verso ovest per 2,23 metri e presenta all'interno una scalinata composta da 498 gradini. Ancora non si può dire con certezza quando e da chi fu costruita la torre degli Asinelli. Si presume che la torre debba il proprio nome a Gherardo Asinelli, il nobile cavaliere di fazione ghibellina al quale se ne attribuisce la costruzione, iniziata secondo una consolidata tradizione l'11 ottobre 1109 e terminata dieci anni dopo, nel 1119.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `Mi chiamo Loreto e mi piace`,\n            `Mi chiamo Thomas e il mio principale`,\n            `Mi chiamo Marianna, la mia cosa preferita`,\n            `Mi chiamo Clara e sono`,\n            `C'era una volta`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Roma è la <mask> d'Italia.`,\n            `Lo scopo della vita è <mask>.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Questa \\xe8 una persona felice\",\n                sentences: [\n                    \"Questo \\xe8 un cane felice\",\n                    \"Questa \\xe8 una persona molto felice\",\n                    \"Oggi \\xe8 una giornata di sole\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_FA = new Map([\n    [\n        \"text-classification\",\n        [\n            `پروژه به موقع تحویل شد و همه چیز خوب بود.`,\n            `سیب‌زمینی بی‌کیفیت بود.`,\n            `قیمت و کیفیت عالی`,\n            `خوب نبود اصلا`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `این سریال به صورت رسمی در تاریخ دهم می ۲۰۱۱ توسط شبکه فاکس برای پخش رزرو شد.`,\n            `دفتر مرکزی شرکت پارس‌مینو در شهر اراک در استان مرکزی قرار دارد.`,\n            `وی در سال ۲۰۱۳ درگذشت و مسئول خاکسپاری و اقوامش برای او مراسم یادبود گرفتند.`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `من کجا زندگی میکنم؟`,\n                context: `نام من پژمان است و در گرگان زندگی میکنم.`\n            },\n            {\n                text: `نامم چیست و کجا زندگی می‌کنم؟`,\n                context: `اسمم سارا است و در آفریقای جنوبی زندگی میکنم.`\n            },\n            {\n                text: `نام من چیست؟`,\n                context: `من مریم هستم و در تبریز زندگی می‌کنم.`\n            },\n            {\n                text: `بیشترین مساحت جنگل آمازون در کدام کشور است؟`,\n                context: [\n                    \"آمازون نام بزرگ‌ترین جنگل بارانی جهان است که در شمال آمریکای جنوبی قرار گرفته و بیشتر آن در خاک برزیل و پرو\",\n                    \"جای دارد. بیش از نیمی از همه جنگل‌های بارانی باقی‌مانده در جهان در آمازون قرار دارد.\",\n                    \"مساحت جنگل‌های آمازون ۵٫۵ میلیون کیلومتر مربع است که بین ۹ کشور تقسیم شده‌است.\"\n                ].join(\"\\n\")\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            \"بیشتر مساحت جنگل‌های آمازون در حوضه آبریز رود آمازون و ۱۱۰۰ شاخه آن واقع شده‌است.\",\n            \"مردمان نَبَطی از هزاره‌های یکم و دوم پیش از میلاد در این منطقه زندگی می‌کردند.\"\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            [\n                \"شاهنامه اثر حکیم ابوالقاسم فردوسی توسی، حماسه‌ای منظوم، بر حسب دست نوشته‌های \",\n                \"موجود دربرگیرنده نزدیک به ۵۰٬۰۰۰ بیت تا نزدیک به ۶۱٬۰۰۰ بیت و یکی از \",\n                \"بزرگ‌ترین و برجسته‌ترین سروده‌های حماسی جهان است که سرایش آن دست‌آوردِ \",\n                \"دست‌کم سی سال کارِ پیوستهٔ این سخن‌سرای نامدار ایرانی است. موضوع این شاهکار ادبی،\",\n                \" افسانه‌ها و تاریخ ایران از آغاز تا حملهٔ عرب‌ها به ایران در سدهٔ هفتم میلادی است\",\n                \"  (شاهنامه از سه بخش اسطوره، پهلوانی و تاریخی تشکیل شده‌است) که در چهار\",\n                \"   دودمان پادشاهیِ پیشدادیان، کیانیان، اشکانیان و ساسانیان گنجانده می‌شود.\",\n                \"    شاهنامه بر وزن \\xabفَعولُن فعولن فعولن فَعَلْ\\xbb، در بحرِ مُتَقارِبِ مثمَّنِ محذوف نگاشته شده‌است.\",\n                \"هنگامی که زبان دانش و ادبیات در ایران زبان عربی بود، فردوسی، با سرودن شاهنامه\",\n                \" با ویژگی‌های هدف‌مندی که داشت، زبان پارسی را زنده و پایدار کرد. یکی از \",\n                \" بن‌مایه‌های مهمی که فردوسی برای سرودن شاهنامه از آن استفاده کرد،\",\n                \"  شاهنامهٔ ابومنصوری بود. شاهنامه نفوذ بسیاری در جهت‌گیری \",\n                \"  فرهنگ فارسی و نیز بازتاب‌های شکوه‌مندی در ادبیات جهان داشته‌است و شاعران \",\n                \"  بزرگی مانند گوته و ویکتور هوگو از آن به نیکی یاد کرده‌اند.\"\n            ].join(\"\\n\")\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            \"اسم من نازنین است و من\",\n            \"روزی روزگاری\"\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `زندگی یک سوال است و این که چگونه <mask> کنیم پاسخ این سوال!`,\n            `زندگی از مرگ پرسید: چرا همه من را <mask> دارند اما از تو متنفرند؟`\n        ]\n    ]\n]);\nconst MAPPING_AR = new Map([\n    [\n        \"text-classification\",\n        [\n            `أحبك. أهواك`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `إسمي محمد وأسكن في برلين`,\n            `إسمي ساره وأسكن في لندن`,\n            `إسمي سامي وأسكن في القدس في فلسطين.`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `أين أسكن؟`,\n                context: `إسمي محمد وأسكن في بيروت`\n            },\n            {\n                text: `أين أسكن؟`,\n                context: `إسمي ساره وأسكن في لندن`\n            },\n            {\n                text: `ما اسمي؟`,\n                context: `اسمي سعيد وأسكن في حيفا.`\n            },\n            {\n                text: `ما لقب خالد بن الوليد بالعربية؟`,\n                context: `خالد بن الوليد من أبطال وقادة الفتح الإسلامي وقد تحدثت عنه اللغات الإنجليزية والفرنسية والإسبانية ولقب بسيف الله المسلول.`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `إسمي محمد وأسكن في برلين`,\n            `إسمي ساره وأسكن في لندن`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `تقع الأهرامات في الجيزة قرب القاهرة في مصر وقد بنيت منذ عدة قرون، وقيل إنها كانت قبورا للفراعنة وتم بناؤها بعملية هندسية رائعة واستقدمت حجارتها من جبل المقطم وتم نقلها بالسفن أو على الرمل، وما تزال شامخة ويقصدها السياح من كافة أرجاء المعمورة.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `إسمي محمد وأحب أن`,\n            `دع المكارم لا ترحل لبغيتها - واقعد فإنك أنت الطاعم الكاسي.`,\n            `لماذا نحن هنا؟`,\n            `القدس مدينة تاريخية، بناها الكنعانيون في`,\n            `كان يا ما كان في قديم الزمان`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `باريس <mask> فرنسا.`,\n            `فلسفة الحياة هي <mask>.`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"هذا شخص سعيد\",\n                sentences: [\n                    \"هذا كلب سعيد\",\n                    \"هذا شخص سعيد جدا\",\n                    \"اليوم هو يوم مشمس\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_BN = new Map([\n    [\n        \"text-classification\",\n        [\n            `বাঙালির ঘরে ঘরে আজ নবান্ন উৎসব।`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `আমার নাম জাহিদ এবং আমি ঢাকায় বাস করি।`,\n            `তিনি গুগলে চাকরী করেন।`,\n            `আমার নাম সুস্মিতা এবং আমি কলকাতায় বাস করি।`\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `আমার নাম জাহিদ, আমি রংপুরে বাস করি।`,\n            `আপনি কী আজকে বাসায় আসবেন?`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `‘ইকোনমিস্ট’ লিখেছে, অ্যান্টিবডির চার মাস স্থায়ী হওয়ার খবরটি দুই কারণে আনন্দের। অ্যান্টিবডি যত দিন পর্যন্ত শরীরে টিকবে, তত দিন সংক্রমণ থেকে সুরক্ষিত থাকা সম্ভব। অর্থাৎ, এমন এক টিকার প্রয়োজন হবে, যা অ্যান্টিবডির উত্পাদনকে প্ররোচিত করতে পারে এবং দীর্ঘস্থায়ী সুরক্ষা দিতে পারে। এগুলো খুঁজে বের করাও সহজ। এটি আভাস দেয়, ব্যাপক হারে অ্যান্টিবডি শনাক্তকরণ ফলাফল মোটামুটি নির্ভুল হওয়া উচিত। দ্বিতীয় আরেকটি গবেষণার নেতৃত্ব দিয়েছেন যুক্তরাজ্যের মেডিকেল রিসার্চ কাউন্সিলের (এমআরসি) ইমিউনোলজিস্ট তাও দং। তিনি টি-সেল শনাক্তকরণে কাজ করেছেন। টি-সেল শনাক্তকরণের প্রক্রিয়া অবশ্য অ্যান্টিবডির মতো এত আলোচিত নয়। তবে সংক্রমণের বিরুদ্ধে লড়াই এবং দীর্ঘমেয়াদি সুরক্ষায় সমান গুরুত্বপূর্ণ ভূমিকা পালন করে। গবেষণাসংক্রান্ত নিবন্ধ প্রকাশিত হয়েছে ‘নেচার ইমিউনোলজি’ সাময়িকীতে। তাঁরা বলছেন, গবেষণার ক্ষেত্রে কোভিড-১৯ মৃদু সংক্রমণের শিকার ২৮ ব্যক্তির রক্তের নমুনা, ১৪ জন গুরুতর অসুস্থ ও ১৬ জন সুস্থ ব্যক্তির রক্তের নমুনা পরীক্ষা করেছেন। গবেষণা নিবন্ধে বলা হয়, সংক্রমিত ব্যক্তিদের ক্ষেত্রে টি-সেলের তীব্র প্রতিক্রিয়া তাঁরা দেখেছেন। এ ক্ষেত্রে মৃদু ও গুরুতর অসুস্থ ব্যক্তিদের ক্ষেত্রে প্রতিক্রিয়ার ভিন্নতা পাওয়া গেছে।`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `আমি রতন এবং আমি`,\n            `তুমি যদি চাও তবে`,\n            `মিথিলা আজকে বড্ড`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `আমি বাংলায় <mask> গাই।`,\n            `আমি <mask> খুব ভালোবাসি। `\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `প্রথম এশিয়া কাপ ক্রিকেট টুর্নামেন্ট কোথায় অনুষ্ঠিত হয় ?`,\n                context: `প্রথম টুর্নামেন্ট অনুষ্ঠিত হয় ১৯৮৪ সালে সংযুক্ত আরব আমিরাত এর শারজাহ তে যেখানে কাউন্সিলের মূল অফিস ছিল (১৯৯৫ পর্যন্ত)। ভারত শ্রীলঙ্কার সাথে আন্তরিকতাহীন ক্রিকেট সম্পর্কের কারণে ১৯৮৬ সালের টুর্নামেন্ট বর্জন করে। ১৯৯৩ সালে ভারত ও পাকিস্তান এর মধ্যে রাজনৈতিক অস্থিরতার কারণে এটি বাতিল হয়ে যায়। শ্রীলঙ্কা এশিয়া কাপ শুরু থেকে অংশ গ্রহণ করে আসছে। আন্তর্জাতিক ক্রিকেট কাউন্সিল নিয়ম করে দিয়েছে যে এশিয়া কাপের সকল খেলা অনুষ্ঠিত হবে অফিসিয়াল একদিনের আন্তর্জাতিক ক্রিকেট হিসেবে। এসিসি ঘোষনা অনুযায়ী প্রতি দুই বছর পর পর টুর্নামেন্ট অনুষ্ঠিত হয় ২০০৮ সাল থেকে।`\n            },\n            {\n                text: `ভারতীয় বাঙালি কথাসাহিত্যিক মহাশ্বেতা দেবীর মৃত্যু কবে হয় ?`,\n                context: `২০১৬ সালের ২৩ জুলাই হৃদরোগে আক্রান্ত হয়ে মহাশ্বেতা দেবী কলকাতার বেল ভিউ ক্লিনিকে ভর্তি হন। সেই বছরই ২৮ জুলাই একাধিক অঙ্গ বিকল হয়ে তাঁর মৃত্যু ঘটে। তিনি মধুমেহ, সেপ্টিসেমিয়া ও মূত্র সংক্রমণ রোগেও ভুগছিলেন।`\n            },\n            {\n                text: `মাস্টারদা সূর্যকুমার সেনের বাবার নাম কী ছিল ?`,\n                context: `সূর্য সেন ১৮৯৪ সালের ২২ মার্চ চট্টগ্রামের রাউজান থানার নোয়াপাড়ায় অর্থনৈতিক ভাবে অস্বচ্ছল পরিবারে জন্মগ্রহণ করেন। তাঁর পিতার নাম রাজমনি সেন এবং মাতার নাম শশী বালা সেন। রাজমনি সেনের দুই ছেলে আর চার মেয়ে। সূর্য সেন তাঁদের পরিবারের চতুর্থ সন্তান। দুই ছেলের নাম সূর্য ও কমল। চার মেয়ের নাম বরদাসুন্দরী, সাবিত্রী, ভানুমতী ও প্রমিলা। শৈশবে পিতা মাতাকে হারানো সূর্য সেন কাকা গৌরমনি সেনের কাছে মানুষ হয়েছেন। সূর্য সেন ছেলেবেলা থেকেই খুব মনোযোগী ভাল ছাত্র ছিলেন এবং ধর্মভাবাপন্ন গম্ভীর প্রকৃতির ছিলেন।`\n            }\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"সে একজন সুখী ব্যক্তি\",\n                sentences: [\n                    \"সে হ্যাপি কুকুর\",\n                    \"সে খুব সুখী মানুষ\",\n                    \"আজ একটি রৌদ্রোজ্জ্বল দিন\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_MN = new Map([\n    [\n        \"text-classification\",\n        [\n            `Би чамд хайртай`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`,\n            `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`,\n            `Манай улс таван хошуу малтай.`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Та хаана амьдардаг вэ?`,\n                context: `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`\n            },\n            {\n                text: `Таныг хэн гэдэг вэ?`,\n                context: `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`\n            },\n            {\n                text: `Миний нэрийг хэн гэдэг вэ?`,\n                context: `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`,\n            `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `Монгол Улс (1992 оноос хойш) — дорно болон төв Азид оршдог бүрэн эрхт улс. Хойд талаараа Орос, бусад талаараа Хятад улстай хиллэдэг далайд гарцгүй орон. Нийслэл — Улаанбаатар хот. Алтайн нуруунаас Хянган, Соёноос Говь хүрсэн 1 сая 566 мянган км2 уудам нутагтай, дэлхийд нутаг дэвсгэрийн хэмжээгээр 19-рт жагсдаг. 2015 оны эхэнд Монгол Улсын хүн ам 3 сая хүрсэн (135-р олон). Үндсэндээ монгол үндэстэн (95 хувь), мөн хасаг, тува хүн байна. 16-р зуунаас хойш буддын шашин, 20-р зуунаас шашингүй байдал дэлгэрсэн ба албан хэрэгт монгол хэлээр харилцана.`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `Намайг Дорж гэдэг. Би`,\n            `Хамгийн сайн дуучин бол`,\n            `Миний дуртай хамтлаг бол`,\n            `Эрт урьдын цагт`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `Монгол улсын <mask> Улаанбаатар хотоос ярьж байна.`,\n            `Миний амьдралын зорилго бол <mask>.`\n        ]\n    ],\n    [\n        \"automatic-speech-recognition\",\n        [\n            {\n                label: `Common Voice Train Example`,\n                src: `https://cdn-media.huggingface.co/common_voice/train/common_voice_mn_18577472.wav`\n            },\n            {\n                label: `Common Voice Test Example`,\n                src: `https://cdn-media.huggingface.co/common_voice/test/common_voice_mn_18577346.wav`\n            }\n        ]\n    ],\n    [\n        \"text-to-speech\",\n        [\n            `Би Монгол улсын иргэн.`,\n            `Энэхүү жишээ нь цаанаа ямар ч утга агуулаагүй болно`,\n            `Сар шинэдээ сайхан шинэлэж байна уу?`\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Энэ бол аз жаргалтай хүн юм\",\n                sentences: [\n                    \"Энэ бол аз жаргалтай нохой юм\",\n                    \"Энэ бол маш их аз жаргалтай хүн юм\",\n                    \"Өнөөдөр нарлаг өдөр байна\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_SI = new Map([\n    [\n        \"translation\",\n        [\n            `සිංහල ඉතා අලංකාර භාෂාවකි.`,\n            `මෙම තාක්ෂණය භාවිතා කරන ඔබට ස්තූතියි.`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `මම ගෙදර <mask>.`,\n            `<mask> ඉගෙනීමට ගියාය.`\n        ]\n    ]\n]);\nconst MAPPING_DE = new Map([\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Wo wohne ich?`,\n                context: `Mein Name ist Wolfgang und ich lebe in Berlin`\n            },\n            {\n                text: `Welcher Name wird auch verwendet, um den Amazonas-Regenwald auf Englisch zu beschreiben?`,\n                context: `Der Amazonas-Regenwald, auf Englisch auch als Amazonien oder Amazonas-Dschungel bekannt, ist ein feuchter Laubwald, der den größten Teil des Amazonas-Beckens Südamerikas bedeckt. Dieses Becken umfasst 7.000.000 Quadratkilometer (2.700.000 Quadratmeilen), von denen 5.500.000 Quadratkilometer (2.100.000 Quadratmeilen) vom Regenwald bedeckt sind. Diese Region umfasst Gebiete von neun Nationen. Der größte Teil des Waldes befindet sich in Brasilien mit 60% des Regenwaldes, gefolgt von Peru mit 13%, Kolumbien mit 10% und geringen Mengen in Venezuela, Ecuador, Bolivien, Guyana, Suriname und Französisch-Guayana. Staaten oder Abteilungen in vier Nationen enthalten \"Amazonas\" in ihren Namen. Der Amazonas repräsentiert mehr als die Hälfte der verbleibenden Regenwälder des Planeten und umfasst den größten und artenreichsten tropischen Regenwald der Welt mit geschätzten 390 Milliarden Einzelbäumen, die in 16.000 Arten unterteilt sind.`\n            }\n        ]\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Das ist eine gl\\xfcckliche Person\",\n                sentences: [\n                    \"Das ist ein gl\\xfccklicher Hund\",\n                    \"Das ist eine sehr gl\\xfcckliche Person\",\n                    \"Heute ist ein sonniger Tag\"\n                ]\n            }\n        ]\n    ]\n]);\nconst MAPPING_DV = new Map([\n    [\n        \"text-classification\",\n        [\n            `އަހަރެން ގަޔާވޭ. އަހަރެން ލޯބިވޭ`\n        ]\n    ],\n    [\n        \"token-classification\",\n        [\n            `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`,\n            `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`,\n            `އަހަރެންގެ ނަމަކީ އައިޝާ އަދި އަހަރެން ދިރިއުޅެނީ ފޭދޫ، އައްޑޫގަ`\n        ]\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `އަހަރެން ދިރިއުޅެނީ ކޮންތާކު؟`,\n                context: `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`\n            },\n            {\n                text: `އަހަރެން ދިރިއުޅެނީ ކޮންތާކު؟`,\n                context: `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`\n            },\n            {\n                text: `އަހަރެންގެ ނަމަކީ ކޮބާ؟`,\n                context: `އަހަރެންގެ ނަމަކީ އައިޝާ އަދި އަހަރެން ދިރިއުޅެނީ ފޭދޫގަ`\n            },\n            {\n                text: `އެމޭޒަން ރެއިންފޮރެސްޓް ސިފަކޮށްދިނުމަށް އިނގިރޭސި ބަހުން ބޭނުންކުރާނީ ކޮންނަމެއް؟`,\n                context: `އެމޭޒަން ރެއިންފޮރެސްޓް (ޕޯޗުޖީޒް: ފްލޮރެސްޓާ އެމަސޮނިކާ ނުވަތަ އެމަސޮނިއާ؛ ސްޕެނިޝް: ސެލްވާ އެމަސޮނިކާ, އެމަސޮނިއާ ނޫނީ އާންމުކޮށް އެމަޒޯނިއާ؛ ފްރެންޗް: ފޮރޭ އެމެޒޮނިއެން؛ ޑަޗް: އެމެޒޯންރޭގެވައުޑް)، އިގިރޭސި ބަހުން ބުނާ އެމެޒޯނިއާ ނުވަތަ ދަ އެމޭޒަން ޖަންގަލް އަކީ, ސައުތު އެމެރިކާގެ އެމޭޒަން ބޭސިން ސަރަހައްދުގެ ބޮޑުބައެއްގައި ހިމެނޭ މޮއިސްޓް ބޮރޯޑްލީފް ފޮރެސްޓެއެކެވެ. އެމޭޒަން ބޭސިން ސަރަހައްދުގެ ބޮޑު މިނަކީ 7 މިލިއަން އަކަ ކިލޯމީޓަރ (2.7 މިލިއަން އަކަ މައިލް(. މީގެ ތެރެއިން 5.5 މިލިއަން އަކަ ކިލޯމީޓަރ (2.1 މިލިއަން އަކަ މައިލް) އަކީ މި ފޮރެސްޓެވެ. މި ސަރަހައްދުގައި 9 ގައުމަކަށް ނިސްބަތްވާ ޓެރިޓަރީ ހިމެނެއެވެ.  60% އާއިއެކެ އެންމެ ބޮޑު ބައެއް ނިސްބަތްވަނީ ބްރެޒިލްއަށެވެ. އޭގެ ފަހުތުން 13% އާއެކު ޕެރޫ އާއި 10% އާއެކު ކޮލަމްބިއާ އަދި ކުޑަ ބައެއް ހިމެނޭ ގޮތުން ވެނެޒުއެލާ, އެކްއަޑޯ, ބޮލިވިއާ, ގުޔާނާ, ސުރިނާމް އަދި ފްރެންޗް ގްއާނާ އަށް ވެސް ނިސްބަތްވެއެވެ. މީގެ ތެރެއިން 4 ގައުމެއްގައި \"އެމެޒޮނާސް\" ހިމަނައިގެން ސްޓޭޓް ނުވަތަ ޑިޕާޓްމަންޓް އަކަށް ނަންދީފައިވެއެވެ. މުޅި ދުނިޔޭގައި ބާކީ ހުރި ރެއިންފޮރެސްޓްގެ ތެރެއިން ދެބައިކުޅަ އެއްބަޔަށްވުރެބޮޑުވަރެއް އެމޭޒޮން ރެއިންފޮރެސްޓް ހިއްސާކުރެއެވެ. މިއީ މުޅި ދުނިޔެއިން އެންމޮ ބޮޑު އަދި އެންމެ ބައޮޑައިވަރސް ރެއިންފޮރެސްޓް ޓްރެކްޓެވެ. ލަފާކުރެވޭ ގޮތުން 16 ހާސް ސްޕީޝީސްއަށް ބެހިގެންވާ 390 މިލިއަން ވައްތަރުގެ ގަސް މިތާގައި ހިމެނެއެވެ`\n            }\n        ]\n    ],\n    [\n        \"translation\",\n        [\n            `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`,\n            `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`\n        ]\n    ],\n    [\n        \"summarization\",\n        [\n            `ޓަވަރުގެ އުސްމިނަކީ 324 މީޓަރު، އެއީ ގާތްގަނޑަކަށް 81 ބުރީގެ އިމާރާތަކާއި އެއްވަރެވެ. އެއީ ޕެރިސްގައި ހުރި އެންމެ އުސް އިމާރާތެވެ. އޭގެ ހަތަރެސްކަނަށް ހުރި ބުޑުގެ ދިގުމިނަކީ ކޮންމެ ފަރާތަކުން 125 މީޓަރެވެ. (410 ފޫޓު) އައިފިލް ޓަވަރު ބިނާކުރި އިރު، ވޮޝިންގްޓަން މޮނިއުމެންޓްގެ އުސްމިން ފަހަނައަޅާ ގޮސް، ދުނިޔޭގައި މީހުން އުފެއްދި ތަންތަނުގެ ތެރެއިން އެންމެ އުސް ތަނުގެ ލަގަބު ލިބުނެވެ. އަދި 1930 ގައި ނިއު ޔޯކްގެ ކްރައިސްލަރ ބިލްޑިންގް ބިނާކުރުމާއި ހަމައަށް 41 އަހަރު ވަންދެން މިލަގަބު ހިފެހެއްޓިއެވެ. މިއީ 300 މީޓަރަށް ވުރެ އުސްކޮށް އިމާރާތްކުރެވުނު ފުރަތަމަ ތަނެވެ. 1957 ގައި ޓަވަރުގެ އެންމެ މަތީގައި ހަރުކުރެވުނު ބްރޯޑްކާސްޓިންގ އޭރިއަލްގެ ސަބަބުން މިހާރު މި ޓަވަރު ކްރައިސްލަރ ބިލްޑިންގއަށް ވުރެ 5.2 މީޓަރ (17 ފޫޓު) އުހެވެ. މި ޓްރާންސްމިޓަރު ނުލާ، އައިފިލް ޓަވަރަކީ، މިލާއު ވިއާޑަކްޓަށް ފަހު ފްރާންސްގައި ހުރި 2 ވަނައަށް އެންމެ އުސް ފްރީސްޓޭންޑިންގ އިމާރާތެވެ`\n        ]\n    ],\n    [\n        \"text-generation\",\n        [\n            `އަހަރެންގެ ނަމަކީ ޔޫސުފް އަދި އަހަރެންގެ މައިގަނޑު`,\n            `އަހަރެންގެ ނަމަކީ މަރިއަމް، އަހަރެން އެންމެ ގަޔާވާ`,\n            `އަހަރެންގެ ނަމަކީ ފާތުމަތު އަދި އަހަރެން`,\n            `،އެއް ޒަމާނެއްގައި`\n        ]\n    ],\n    [\n        \"fill-mask\",\n        [\n            `.<mask> މާލެ އަކީ ދިވެހިރާއްޖޭގެ`,\n            `ގަރުދިޔައަކީ ދިވެހިންގެ މެދުގައި <mask> ކެއުމެއް.`\n        ]\n    ]\n]);\nconst MAPPING_DEFAULT_WIDGET = new Map([\n    [\n        \"en\",\n        MAPPING_EN\n    ],\n    [\n        \"zh\",\n        MAPPING_ZH\n    ],\n    [\n        \"fr\",\n        MAPPING_FR\n    ],\n    [\n        \"es\",\n        MAPPING_ES\n    ],\n    [\n        \"ru\",\n        MAPPING_RU\n    ],\n    [\n        \"uk\",\n        MAPPING_UK\n    ],\n    [\n        \"it\",\n        MAPPING_IT\n    ],\n    [\n        \"fa\",\n        MAPPING_FA\n    ],\n    [\n        \"ar\",\n        MAPPING_AR\n    ],\n    [\n        \"bn\",\n        MAPPING_BN\n    ],\n    [\n        \"mn\",\n        MAPPING_MN\n    ],\n    [\n        \"si\",\n        MAPPING_SI\n    ],\n    [\n        \"de\",\n        MAPPING_DE\n    ],\n    [\n        \"dv\",\n        MAPPING_DV\n    ]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/default-widget-inputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/gguf.js":
/*!**********************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/gguf.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GGMLFileQuantizationType: () => (/* binding */ GGMLFileQuantizationType),\n/* harmony export */   GGMLQuantizationType: () => (/* binding */ GGMLQuantizationType),\n/* harmony export */   GGUF_QUANT_ORDER: () => (/* binding */ GGUF_QUANT_ORDER),\n/* harmony export */   GGUF_QUANT_RE: () => (/* binding */ GGUF_QUANT_RE),\n/* harmony export */   GGUF_QUANT_RE_GLOBAL: () => (/* binding */ GGUF_QUANT_RE_GLOBAL),\n/* harmony export */   findNearestQuantType: () => (/* binding */ findNearestQuantType),\n/* harmony export */   parseGGUFQuantLabel: () => (/* binding */ parseGGUFQuantLabel)\n/* harmony export */ });\n// This list is copied from gguf/types.ts, but will all types available (for backward compatibility)\n// NOT to be confused with GGMLQuantizationType, a FileQuantization can contain multiple GGMLQuantizationType\n// For example, Q4_K_M model can contains Q4_K and Q6_K tensors\nvar GGMLFileQuantizationType;\n(function(GGMLFileQuantizationType) {\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"F32\"] = 0] = \"F32\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"F16\"] = 1] = \"F16\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_0\"] = 2] = \"Q4_0\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_1\"] = 3] = \"Q4_1\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_1_SOME_F16\"] = 4] = \"Q4_1_SOME_F16\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_2\"] = 5] = \"Q4_2\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_3\"] = 6] = \"Q4_3\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q8_0\"] = 7] = \"Q8_0\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q5_0\"] = 8] = \"Q5_0\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q5_1\"] = 9] = \"Q5_1\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q2_K\"] = 10] = \"Q2_K\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q3_K_S\"] = 11] = \"Q3_K_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q3_K_M\"] = 12] = \"Q3_K_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q3_K_L\"] = 13] = \"Q3_K_L\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_K_S\"] = 14] = \"Q4_K_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_K_M\"] = 15] = \"Q4_K_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q5_K_S\"] = 16] = \"Q5_K_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q5_K_M\"] = 17] = \"Q5_K_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q6_K\"] = 18] = \"Q6_K\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ2_XXS\"] = 19] = \"IQ2_XXS\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ2_XS\"] = 20] = \"IQ2_XS\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q2_K_S\"] = 21] = \"Q2_K_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ3_XS\"] = 22] = \"IQ3_XS\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ3_XXS\"] = 23] = \"IQ3_XXS\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ1_S\"] = 24] = \"IQ1_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ4_NL\"] = 25] = \"IQ4_NL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ3_S\"] = 26] = \"IQ3_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ3_M\"] = 27] = \"IQ3_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ2_S\"] = 28] = \"IQ2_S\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ2_M\"] = 29] = \"IQ2_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ4_XS\"] = 30] = \"IQ4_XS\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"IQ1_M\"] = 31] = \"IQ1_M\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"BF16\"] = 32] = \"BF16\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_0_4_4\"] = 33] = \"Q4_0_4_4\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_0_4_8\"] = 34] = \"Q4_0_4_8\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_0_8_8\"] = 35] = \"Q4_0_8_8\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"TQ1_0\"] = 36] = \"TQ1_0\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"TQ2_0\"] = 37] = \"TQ2_0\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"MXFP4_MOE\"] = 38] = \"MXFP4_MOE\";\n    // custom quants used by unsloth\n    // they are not officially a scheme enum value in GGUF, but only here for naming\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q2_K_XL\"] = 1000] = \"Q2_K_XL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q3_K_XL\"] = 1001] = \"Q3_K_XL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q4_K_XL\"] = 1002] = \"Q4_K_XL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q5_K_XL\"] = 1003] = \"Q5_K_XL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q6_K_XL\"] = 1004] = \"Q6_K_XL\";\n    GGMLFileQuantizationType[GGMLFileQuantizationType[\"Q8_K_XL\"] = 1005] = \"Q8_K_XL\";\n})(GGMLFileQuantizationType || (GGMLFileQuantizationType = {}));\nconst ggufQuants = Object.values(GGMLFileQuantizationType).filter((v)=>typeof v === \"string\");\nconst GGUF_QUANT_RE = new RegExp(`(?<quant>${ggufQuants.join(\"|\")})` + \"(_(?<sizeVariation>[A-Z]+))?\");\nconst GGUF_QUANT_RE_GLOBAL = new RegExp(GGUF_QUANT_RE, \"g\");\nfunction parseGGUFQuantLabel(fname) {\n    const quantLabel = fname.toUpperCase().match(GGUF_QUANT_RE_GLOBAL)?.at(-1); // if there is multiple quant substrings in a name, we prefer the last one\n    return quantLabel;\n}\n// order of quantization, from biggest to smallest\n// this list must be in sync with the order in GGMLFileQuantizationType\n// the gguf.spec.ts tests are using verify if the order is correct\nconst GGUF_QUANT_ORDER = [\n    GGMLFileQuantizationType.F32,\n    GGMLFileQuantizationType.BF16,\n    GGMLFileQuantizationType.F16,\n    GGMLFileQuantizationType.Q8_K_XL,\n    GGMLFileQuantizationType.Q8_0,\n    // 6-bit quantizations\n    GGMLFileQuantizationType.Q6_K_XL,\n    GGMLFileQuantizationType.Q6_K,\n    // 5-bit quantizations\n    GGMLFileQuantizationType.Q5_K_XL,\n    GGMLFileQuantizationType.Q5_K_M,\n    GGMLFileQuantizationType.Q5_K_S,\n    GGMLFileQuantizationType.Q5_0,\n    GGMLFileQuantizationType.Q5_1,\n    // 4-bit quantizations\n    GGMLFileQuantizationType.Q4_K_XL,\n    GGMLFileQuantizationType.Q4_K_M,\n    GGMLFileQuantizationType.Q4_K_S,\n    GGMLFileQuantizationType.IQ4_NL,\n    GGMLFileQuantizationType.IQ4_XS,\n    GGMLFileQuantizationType.Q4_0_4_4,\n    GGMLFileQuantizationType.Q4_0_4_8,\n    GGMLFileQuantizationType.Q4_0_8_8,\n    GGMLFileQuantizationType.Q4_1_SOME_F16,\n    GGMLFileQuantizationType.Q4_0,\n    GGMLFileQuantizationType.Q4_1,\n    GGMLFileQuantizationType.Q4_2,\n    GGMLFileQuantizationType.Q4_3,\n    GGMLFileQuantizationType.MXFP4_MOE,\n    // 3-bit quantizations\n    GGMLFileQuantizationType.Q3_K_XL,\n    GGMLFileQuantizationType.Q3_K_L,\n    GGMLFileQuantizationType.Q3_K_M,\n    GGMLFileQuantizationType.Q3_K_S,\n    GGMLFileQuantizationType.IQ3_M,\n    GGMLFileQuantizationType.IQ3_S,\n    GGMLFileQuantizationType.IQ3_XS,\n    GGMLFileQuantizationType.IQ3_XXS,\n    // 2-bit quantizations\n    GGMLFileQuantizationType.Q2_K_XL,\n    GGMLFileQuantizationType.Q2_K,\n    GGMLFileQuantizationType.Q2_K_S,\n    GGMLFileQuantizationType.IQ2_M,\n    GGMLFileQuantizationType.IQ2_S,\n    GGMLFileQuantizationType.IQ2_XS,\n    GGMLFileQuantizationType.IQ2_XXS,\n    // 1-bit quantizations\n    GGMLFileQuantizationType.IQ1_S,\n    GGMLFileQuantizationType.IQ1_M,\n    GGMLFileQuantizationType.TQ1_0,\n    GGMLFileQuantizationType.TQ2_0\n];\n// This function finds the nearest quantization type that is less than or equal to the given quantization type.\n// It returns undefined if no such quantization type is found.\nfunction findNearestQuantType(quant, availableQuants) {\n    // Create a map for quick index lookup from the defined order\n    const orderMap = new Map();\n    GGUF_QUANT_ORDER.forEach((q, index)=>{\n        orderMap.set(q, index);\n    });\n    const targetIndex = orderMap.get(quant) ?? 0; // the 0 case should never happen\n    // Filter the available quantizations to include only those defined in the order map,\n    // then sort them according to the GGUF_QUANT_ORDER (from largest/index 0 to smallest/highest index).\n    const sortedAvailable = availableQuants.filter((q)=>orderMap.has(q)).sort((a, b)=>(orderMap.get(a) ?? Infinity) - (orderMap.get(b) ?? Infinity));\n    // If no valid quantizations are available after filtering\n    if (sortedAvailable.length === 0) {\n        return undefined;\n    }\n    // Iterate through the sorted available quantizations (largest to smallest).\n    // Find the first one whose order index is >= the target index.\n    // This means finding the largest quantization that is smaller than or equal to the target.\n    for (const availableQuant of sortedAvailable){\n        // We know the key exists due to the filter above.\n        const availableIndex = orderMap.get(availableQuant) ?? 0;\n        if (availableIndex >= targetIndex) {\n            return availableQuant;\n        }\n    }\n    // If the loop completes, it means all available quantizations are larger (have a smaller index)\n    // than the target quantization. In this case, return the \"smallest\" available quantization,\n    // which is the last element in the sorted list (highest index among available).\n    return sortedAvailable[sortedAvailable.length - 1];\n}\n// This list is only used to calculate the size of the model, NOT to be confused with the quantization FILE type\nvar GGMLQuantizationType;\n(function(GGMLQuantizationType) {\n    GGMLQuantizationType[GGMLQuantizationType[\"F32\"] = 0] = \"F32\";\n    GGMLQuantizationType[GGMLQuantizationType[\"F16\"] = 1] = \"F16\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_0\"] = 2] = \"Q4_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_1\"] = 3] = \"Q4_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_0\"] = 6] = \"Q5_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_1\"] = 7] = \"Q5_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_0\"] = 8] = \"Q8_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_1\"] = 9] = \"Q8_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q2_K\"] = 10] = \"Q2_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q3_K\"] = 11] = \"Q3_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_K\"] = 12] = \"Q4_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_K\"] = 13] = \"Q5_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q6_K\"] = 14] = \"Q6_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_K\"] = 15] = \"Q8_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_XXS\"] = 16] = \"IQ2_XXS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_XS\"] = 17] = \"IQ2_XS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ3_XXS\"] = 18] = \"IQ3_XXS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ1_S\"] = 19] = \"IQ1_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ4_NL\"] = 20] = \"IQ4_NL\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ3_S\"] = 21] = \"IQ3_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_S\"] = 22] = \"IQ2_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ4_XS\"] = 23] = \"IQ4_XS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I8\"] = 24] = \"I8\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I16\"] = 25] = \"I16\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I32\"] = 26] = \"I32\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I64\"] = 27] = \"I64\";\n    GGMLQuantizationType[GGMLQuantizationType[\"F64\"] = 28] = \"F64\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ1_M\"] = 29] = \"IQ1_M\";\n    GGMLQuantizationType[GGMLQuantizationType[\"BF16\"] = 30] = \"BF16\";\n    GGMLQuantizationType[GGMLQuantizationType[\"TQ1_0\"] = 34] = \"TQ1_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"TQ2_0\"] = 35] = \"TQ2_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"MXFP4\"] = 39] = \"MXFP4\";\n})(GGMLQuantizationType || (GGMLQuantizationType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/gguf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/hardware.js":
/*!**************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/hardware.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MEMORY_OPTIONS: () => (/* binding */ DEFAULT_MEMORY_OPTIONS),\n/* harmony export */   SKUS: () => (/* binding */ SKUS),\n/* harmony export */   TFLOPS_THRESHOLD_EU_AI_ACT_MODEL_TRAINING_TOTAL: () => (/* binding */ TFLOPS_THRESHOLD_EU_AI_ACT_MODEL_TRAINING_TOTAL),\n/* harmony export */   TFLOPS_THRESHOLD_WHITE_HOUSE_CLUSTER: () => (/* binding */ TFLOPS_THRESHOLD_WHITE_HOUSE_CLUSTER),\n/* harmony export */   TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL: () => (/* binding */ TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL),\n/* harmony export */   TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL_BIOLOGY: () => (/* binding */ TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL_BIOLOGY)\n/* harmony export */ });\n/**\n * Biden AI Executive Order (since revoked by President Trump):\n * https://web.archive.org/web/20250105222429/https://www.whitehouse.gov/briefing-room/presidential-actions/2023/10/30/executive-order-on-the-safe-secure-and-trustworthy-development-and-use-of-artificial-intelligence/\n */ const TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL = 10 ** 14;\nconst TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL_BIOLOGY = 10 ** 11;\nconst TFLOPS_THRESHOLD_WHITE_HOUSE_CLUSTER = 10 ** 8;\n/**\n * EU AI Act\n * https://ec.europa.eu/commission/presscorner/detail/en/qanda_21_1683\n */ const TFLOPS_THRESHOLD_EU_AI_ACT_MODEL_TRAINING_TOTAL = 10 ** 13;\nconst DEFAULT_MEMORY_OPTIONS = [\n    8,\n    16,\n    24,\n    32,\n    40,\n    48,\n    64,\n    80,\n    96,\n    128,\n    192,\n    256,\n    384,\n    512,\n    768,\n    1024,\n    1536,\n    2048\n];\nconst SKUS = {\n    GPU: {\n        NVIDIA: {\n            B200: {\n                tflops: 496.6,\n                memory: [\n                    192\n                ]\n            },\n            H200: {\n                tflops: 241.3,\n                memory: [\n                    141\n                ]\n            },\n            H100: {\n                tflops: 267.6,\n                memory: [\n                    80\n                ]\n            },\n            L40s: {\n                tflops: 91.61,\n                memory: [\n                    48\n                ]\n            },\n            L40: {\n                tflops: 90.52,\n                memory: [\n                    48\n                ]\n            },\n            L20: {\n                tflops: 59.35,\n                memory: [\n                    48\n                ]\n            },\n            L4: {\n                tflops: 30.29,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX PRO 6000 WS\": {\n                tflops: 126,\n                memory: [\n                    96\n                ]\n            },\n            \"RTX PRO 6000 Max-Q\": {\n                tflops: 116,\n                memory: [\n                    96\n                ]\n            },\n            \"RTX 6000 Ada\": {\n                tflops: 91.1,\n                memory: [\n                    48\n                ]\n            },\n            \"RTX 5880 Ada\": {\n                tflops: 69.3,\n                memory: [\n                    48\n                ]\n            },\n            \"RTX 5000 Ada\": {\n                tflops: 65.3,\n                memory: [\n                    32\n                ]\n            },\n            \"RTX 4500 Ada\": {\n                tflops: 39.6,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX 4000 Ada\": {\n                tflops: 26.7,\n                memory: [\n                    20\n                ]\n            },\n            \"RTX 4000 SFF Ada\": {\n                tflops: 19.2,\n                memory: [\n                    20\n                ]\n            },\n            \"RTX 2000 Ada\": {\n                tflops: 12.0,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX A6000\": {\n                tflops: 38.7,\n                memory: [\n                    48\n                ]\n            },\n            \"RTX A5000\": {\n                tflops: 34.1,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX A4000\": {\n                tflops: 19.2,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX A2000\": {\n                tflops: 7.987,\n                memory: [\n                    8,\n                    12\n                ]\n            },\n            A100: {\n                tflops: 77.97,\n                memory: [\n                    80,\n                    40\n                ]\n            },\n            A40: {\n                tflops: 37.42,\n                memory: [\n                    48\n                ]\n            },\n            A10: {\n                tflops: 31.24,\n                memory: [\n                    24\n                ]\n            },\n            A2: {\n                tflops: 4.531,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 5090\": {\n                tflops: 104.8,\n                memory: [\n                    32\n                ]\n            },\n            \"RTX 5090 D\": {\n                tflops: 104.8,\n                memory: [\n                    32\n                ]\n            },\n            \"RTX 5080\": {\n                tflops: 56.28,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 5080 Mobile\": {\n                tflops: 24.58,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 5070\": {\n                tflops: 30.84,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 5070 Mobile\": {\n                tflops: 23.22,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 5070 Ti\": {\n                tflops: 43.94,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 5060 Ti\": {\n                tflops: 23.7,\n                memory: [\n                    16,\n                    8\n                ]\n            },\n            \"RTX 5060\": {\n                tflops: 19.18,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 4090\": {\n                tflops: 82.58,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX 4090D\": {\n                tflops: 79.49,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX 4090 Mobile\": {\n                tflops: 32.98,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 4080 SUPER\": {\n                tflops: 52.2,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 4080\": {\n                tflops: 48.7,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 4080 Mobile\": {\n                tflops: 24.72,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 4070\": {\n                tflops: 29.15,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 4070 Mobile\": {\n                tflops: 15.62,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 4070 Ti\": {\n                tflops: 40.09,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 4070 Super\": {\n                tflops: 35.48,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 4070 Ti Super\": {\n                tflops: 44.1,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 4060\": {\n                tflops: 15.11,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 4060 Ti\": {\n                tflops: 22.06,\n                memory: [\n                    8,\n                    16\n                ]\n            },\n            \"RTX 4090 Laptop\": {\n                tflops: 32.98,\n                memory: [\n                    16\n                ]\n            },\n            \"RTX 4080 Laptop\": {\n                tflops: 24.72,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 4070 Laptop\": {\n                tflops: 15.62,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 4060 Laptop\": {\n                tflops: 11.61,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 4050 Laptop\": {\n                tflops: 8.9,\n                memory: [\n                    6\n                ]\n            },\n            \"RTX 3090\": {\n                tflops: 35.58,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX 3090 Ti\": {\n                tflops: 40,\n                memory: [\n                    24\n                ]\n            },\n            \"RTX 3080\": {\n                tflops: 30.6,\n                memory: [\n                    12,\n                    10\n                ]\n            },\n            \"RTX 3080 Ti\": {\n                tflops: 34.1,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 3080 Mobile\": {\n                tflops: 18.98,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3070\": {\n                tflops: 20.31,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3070 Ti\": {\n                tflops: 21.75,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3070 Ti Mobile\": {\n                tflops: 16.6,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3060 Ti\": {\n                tflops: 16.2,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3060\": {\n                tflops: 12.74,\n                memory: [\n                    12,\n                    8\n                ]\n            },\n            \"RTX 2080 Ti\": {\n                tflops: 26.9,\n                memory: [\n                    11,\n                    22\n                ]\n            },\n            \"RTX 2080\": {\n                tflops: 20.14,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 2070\": {\n                tflops: 14.93,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 2070 SUPER Mobile\": {\n                tflops: 14.13,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 2070 SUPER\": {\n                tflops: 18.12,\n                memory: [\n                    8\n                ]\n            },\n            \"RTX 3060 Mobile\": {\n                tflops: 10.94,\n                memory: [\n                    6\n                ]\n            },\n            \"RTX 3050 Mobile\": {\n                tflops: 7.639,\n                memory: [\n                    6\n                ]\n            },\n            \"RTX 2060\": {\n                tflops: 12.9,\n                memory: [\n                    6\n                ]\n            },\n            \"RTX 2060 12GB\": {\n                tflops: 14.36,\n                memory: [\n                    12\n                ]\n            },\n            \"RTX 2060 Mobile\": {\n                tflops: 9.22,\n                memory: [\n                    6\n                ]\n            },\n            \"GTX 1080 Ti\": {\n                tflops: 11.34,\n                memory: [\n                    11\n                ]\n            },\n            \"GTX 1070 Ti\": {\n                tflops: 8.2,\n                memory: [\n                    8\n                ]\n            },\n            \"GTX 1060\": {\n                tflops: 3.9,\n                memory: [\n                    3,\n                    6\n                ]\n            },\n            \"GTX 1050 Ti\": {\n                tflops: 2.1,\n                memory: [\n                    4\n                ]\n            },\n            \"RTX Titan\": {\n                tflops: 32.62,\n                memory: [\n                    24\n                ]\n            },\n            \"GTX 1660\": {\n                tflops: 10.05,\n                memory: [\n                    6\n                ]\n            },\n            \"GTX 1650 Mobile\": {\n                tflops: 6.39,\n                memory: [\n                    4\n                ]\n            },\n            T4: {\n                tflops: 65.13,\n                memory: [\n                    16\n                ]\n            },\n            T10: {\n                tflops: 20.0,\n                memory: [\n                    16\n                ]\n            },\n            V100: {\n                tflops: 28.26,\n                memory: [\n                    32,\n                    16\n                ]\n            },\n            \"Quadro P6000\": {\n                tflops: 12.63,\n                memory: [\n                    24\n                ]\n            },\n            P40: {\n                tflops: 11.76,\n                memory: [\n                    24\n                ]\n            },\n            P100: {\n                tflops: 19.05,\n                memory: [\n                    16\n                ]\n            },\n            \"Jetson AGX Orin 64GB\": {\n                tflops: 10.65,\n                memory: [\n                    64\n                ]\n            },\n            \"Jetson AGX Orin 32GB\": {\n                tflops: 6.66,\n                memory: [\n                    32\n                ]\n            },\n            \"Jetson Orin NX 16GB\": {\n                tflops: 3.76,\n                memory: [\n                    16\n                ]\n            },\n            \"Jetson Orin NX 8GB\": {\n                tflops: 3.13,\n                memory: [\n                    8\n                ]\n            },\n            \"Jetson Orin Nano 8GB\": {\n                tflops: 2.56,\n                memory: [\n                    8\n                ]\n            },\n            \"Jetson Orin Nano 4GB\": {\n                tflops: 1.28,\n                memory: [\n                    4\n                ]\n            },\n            \"Jetson AGX Xavier\": {\n                tflops: 2.82,\n                memory: [\n                    32,\n                    64\n                ]\n            },\n            \"Jetson Xavier NX\": {\n                tflops: 1.69,\n                memory: [\n                    8,\n                    16\n                ]\n            },\n            \"Jetson TX2\": {\n                tflops: 1.33,\n                memory: [\n                    4,\n                    8\n                ]\n            },\n            \"Jetson Nano\": {\n                tflops: 0.47,\n                memory: [\n                    4\n                ]\n            }\n        },\n        AMD: {\n            MI300: {\n                tflops: 383.0,\n                memory: [\n                    192\n                ]\n            },\n            MI250: {\n                tflops: 362.1,\n                memory: [\n                    128\n                ]\n            },\n            MI210: {\n                tflops: 181.0,\n                memory: [\n                    64\n                ]\n            },\n            MI100: {\n                tflops: 184.6,\n                memory: [\n                    32\n                ]\n            },\n            MI60: {\n                tflops: 29.5,\n                memory: [\n                    32\n                ]\n            },\n            MI50: {\n                tflops: 26.5,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 9070 XT\": {\n                tflops: 97.32,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 9070\": {\n                tflops: 72.25,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 7900 XTX\": {\n                tflops: 122.8,\n                memory: [\n                    24\n                ]\n            },\n            \"RX 7900 XT\": {\n                tflops: 103.0,\n                memory: [\n                    20\n                ]\n            },\n            \"RX 7900 GRE\": {\n                tflops: 91.96,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 7800 XT\": {\n                tflops: 74.65,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 7700 XT\": {\n                tflops: 70.34,\n                memory: [\n                    12\n                ]\n            },\n            \"RX 7600 XT\": {\n                tflops: 45.14,\n                memory: [\n                    16,\n                    8\n                ]\n            },\n            \"RX 6950 XT\": {\n                tflops: 47.31,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 6800\": {\n                tflops: 32.33,\n                memory: [\n                    16\n                ]\n            },\n            \"RX 6700 XT\": {\n                tflops: 26.43,\n                memory: [\n                    12\n                ]\n            },\n            \"RX 6700\": {\n                tflops: 22.58,\n                memory: [\n                    10\n                ]\n            },\n            \"RX 6650 XT\": {\n                tflops: 21.59,\n                memory: [\n                    8\n                ]\n            },\n            \"RX 6600 XT\": {\n                tflops: 21.21,\n                memory: [\n                    8\n                ]\n            },\n            \"RX 6600\": {\n                tflops: 17.86,\n                memory: [\n                    8\n                ]\n            },\n            \"Radeon Pro VII\": {\n                tflops: 26.11,\n                memory: [\n                    16\n                ]\n            }\n        },\n        INTEL: {\n            \"Arc A750\": {\n                tflops: 34.41,\n                memory: [\n                    8\n                ]\n            },\n            \"Arc A770\": {\n                tflops: 39.32,\n                memory: [\n                    8,\n                    16\n                ]\n            },\n            \"Arc B570\": {\n                tflops: 23.04,\n                memory: [\n                    10\n                ]\n            },\n            \"Arc B580\": {\n                tflops: 27.34,\n                memory: [\n                    12\n                ]\n            }\n        },\n        QUALCOMM: {\n            \"Snapdragon X Elite X1E-00-1DE\": {\n                tflops: 4.6\n            },\n            \"Snapdragon X Elite X1E-84-100\": {\n                tflops: 4.6\n            },\n            \"Snapdragon X Elite X1E-80-100\": {\n                tflops: 3.8\n            },\n            \"Snapdragon X Elite X1E-78-100\": {\n                tflops: 3.8\n            },\n            \"Snapdragon X Plus X1P-64-100\": {\n                tflops: 3.8\n            }\n        }\n    },\n    CPU: {\n        Intel: {\n            \"Xeon 4th Generation (Sapphire Rapids)\": {\n                tflops: 1.3\n            },\n            \"Xeon 3th Generation (Ice Lake)\": {\n                tflops: 0.8\n            },\n            \"Xeon 2th Generation (Cascade Lake)\": {\n                tflops: 0.55\n            },\n            \"Xeon E5v4 (Broadwell)\": {\n                tflops: 0.25\n            },\n            \"Xeon E5v3 (Haswell)\": {\n                tflops: 0.2\n            },\n            \"Xeon E5v2 (Ivy Bridge)\": {\n                tflops: 0.15\n            },\n            \"Intel Core Ultra 7 265KF\": {\n                tflops: 1.53\n            },\n            \"Intel Core 14th Generation (i7)\": {\n                tflops: 0.8\n            },\n            \"Intel Core 13th Generation (i9)\": {\n                tflops: 0.85\n            },\n            \"Intel Core 13th Generation (i7)\": {\n                tflops: 0.82\n            },\n            \"Intel Core 13th Generation (i5)\": {\n                tflops: 0.68\n            },\n            \"Intel Core 13th Generation (i3)\": {\n                tflops: 0.57\n            },\n            \"Intel Core 12th Generation (i9)\": {\n                tflops: 0.79\n            },\n            \"Intel Core 12th Generation (i7)\": {\n                tflops: 0.77\n            },\n            \"Intel Core 12th Generation (i5)\": {\n                tflops: 0.65\n            },\n            \"Intel Core 12th Generation (i3)\": {\n                tflops: 0.53\n            },\n            \"Intel Core 11th Generation (i9)\": {\n                tflops: 0.7\n            },\n            \"Intel Core 11th Generation (i7)\": {\n                tflops: 0.6\n            },\n            \"Intel Core 11th Generation (i5)\": {\n                tflops: 0.5\n            },\n            \"Intel Core 11th Generation (i3)\": {\n                tflops: 0.35\n            },\n            \"Intel Core 10th Generation (i9)\": {\n                tflops: 0.46\n            },\n            \"Intel Core 10th Generation (i7)\": {\n                tflops: 0.46\n            },\n            \"Intel Core 10th Generation (i5)\": {\n                tflops: 0.46\n            },\n            \"Intel Core 10th Generation (i3)\": {\n                tflops: 0.44\n            }\n        },\n        AMD: {\n            \"EPYC 4th Generation (Genoa)\": {\n                tflops: 5\n            },\n            \"EPYC 3th Generation (Milan)\": {\n                tflops: 2.4\n            },\n            \"EPYC 2th Generation (Rome)\": {\n                tflops: 0.6\n            },\n            \"EPYC 1st Generation (Naples)\": {\n                tflops: 0.6\n            },\n            \"Ryzen Zen 4 7000 (Threadripper)\": {\n                tflops: 10.0\n            },\n            \"Ryzen Zen5 9000 (Ryzen 9)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen5 9000 (Ryzen 7)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen5 9000 (Ryzen 5)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen4 7000 (Ryzen 9)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen4 7000 (Ryzen 7)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen4 7000 (Ryzen 5)\": {\n                tflops: 0.56\n            },\n            \"Ryzen Zen3 5000 (Ryzen 9)\": {\n                tflops: 1.33\n            },\n            \"Ryzen Zen3 5000 (Ryzen 7)\": {\n                tflops: 1.33\n            },\n            \"Ryzen Zen3 5000 (Ryzen 5)\": {\n                tflops: 0.72\n            },\n            \"Ryzen Zen 2  3000 (Threadripper)\": {\n                tflops: 0.72\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 9)\": {\n                tflops: 0.72\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 7)\": {\n                tflops: 0.72\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 5)\": {\n                tflops: 0.72\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 3)\": {\n                tflops: 0.72\n            }\n        }\n    },\n    \"Apple Silicon\": {\n        \"-\": {\n            \"Apple M1\": {\n                tflops: 2.6,\n                memory: [\n                    8,\n                    16\n                ]\n            },\n            \"Apple M1 Pro\": {\n                tflops: 5.2,\n                memory: [\n                    16,\n                    24,\n                    32\n                ]\n            },\n            \"Apple M1 Max\": {\n                tflops: 10.4,\n                memory: [\n                    16,\n                    24,\n                    32,\n                    64\n                ]\n            },\n            \"Apple M1 Ultra\": {\n                tflops: 21,\n                memory: [\n                    16,\n                    24,\n                    32,\n                    64,\n                    96,\n                    128\n                ]\n            },\n            \"Apple M2\": {\n                tflops: 3.6,\n                memory: [\n                    8,\n                    16,\n                    24\n                ]\n            },\n            \"Apple M2 Pro\": {\n                tflops: 6.8,\n                memory: [\n                    16,\n                    24,\n                    32\n                ]\n            },\n            \"Apple M2 Max\": {\n                tflops: 13.49,\n                memory: [\n                    32,\n                    64,\n                    96\n                ]\n            },\n            \"Apple M2 Ultra\": {\n                tflops: 27.2,\n                memory: [\n                    64,\n                    96,\n                    128,\n                    192\n                ]\n            },\n            \"Apple M3\": {\n                tflops: 4.1,\n                memory: [\n                    8,\n                    16,\n                    24\n                ]\n            },\n            \"Apple M3 Pro\": {\n                tflops: 7.4,\n                memory: [\n                    18,\n                    36\n                ]\n            },\n            \"Apple M3 Max\": {\n                tflops: 14.2,\n                memory: [\n                    36,\n                    48,\n                    64,\n                    96,\n                    128\n                ]\n            },\n            \"Apple M3 Ultra\": {\n                tflops: 28.4,\n                memory: [\n                    96,\n                    256,\n                    512\n                ]\n            },\n            \"Apple M4\": {\n                tflops: 4.6,\n                memory: [\n                    16,\n                    24,\n                    32\n                ]\n            },\n            \"Apple M4 Pro\": {\n                tflops: 9.2,\n                memory: [\n                    24,\n                    48,\n                    64\n                ]\n            },\n            \"Apple M4 Max\": {\n                tflops: 18.4,\n                memory: [\n                    36,\n                    48,\n                    64,\n                    96,\n                    128,\n                    256,\n                    512\n                ]\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/hardware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_DISPLAY_MODEL_LIBRARY_KEYS: () => (/* reexport safe */ _model_libraries_js__WEBPACK_IMPORTED_MODULE_4__.ALL_DISPLAY_MODEL_LIBRARY_KEYS),\n/* harmony export */   ALL_MODEL_LIBRARY_KEYS: () => (/* reexport safe */ _model_libraries_js__WEBPACK_IMPORTED_MODULE_4__.ALL_MODEL_LIBRARY_KEYS),\n/* harmony export */   DATASET_LIBRARIES_UI_ELEMENTS: () => (/* reexport safe */ _dataset_libraries_js__WEBPACK_IMPORTED_MODULE_10__.DATASET_LIBRARIES_UI_ELEMENTS),\n/* harmony export */   DEFAULT_MEMORY_OPTIONS: () => (/* reexport safe */ _hardware_js__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MEMORY_OPTIONS),\n/* harmony export */   GGMLFileQuantizationType: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.GGMLFileQuantizationType),\n/* harmony export */   GGMLQuantizationType: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.GGMLQuantizationType),\n/* harmony export */   GGUF_QUANT_ORDER: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.GGUF_QUANT_ORDER),\n/* harmony export */   GGUF_QUANT_RE: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.GGUF_QUANT_RE),\n/* harmony export */   GGUF_QUANT_RE_GLOBAL: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.GGUF_QUANT_RE_GLOBAL),\n/* harmony export */   HF_HUB_INFERENCE_PROXY_TEMPLATE: () => (/* reexport safe */ _inference_providers_js__WEBPACK_IMPORTED_MODULE_11__.HF_HUB_INFERENCE_PROXY_TEMPLATE),\n/* harmony export */   LIBRARY_TASK_MAPPING: () => (/* reexport safe */ _library_to_tasks_js__WEBPACK_IMPORTED_MODULE_0__.LIBRARY_TASK_MAPPING),\n/* harmony export */   LOCAL_APPS: () => (/* reexport safe */ _local_apps_js__WEBPACK_IMPORTED_MODULE_9__.LOCAL_APPS),\n/* harmony export */   MAPPING_DEFAULT_WIDGET: () => (/* reexport safe */ _default_widget_inputs_js__WEBPACK_IMPORTED_MODULE_1__.MAPPING_DEFAULT_WIDGET),\n/* harmony export */   MODALITIES: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.MODALITIES),\n/* harmony export */   MODALITY_LABELS: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.MODALITY_LABELS),\n/* harmony export */   MODEL_LIBRARIES_UI_ELEMENTS: () => (/* reexport safe */ _model_libraries_js__WEBPACK_IMPORTED_MODULE_4__.MODEL_LIBRARIES_UI_ELEMENTS),\n/* harmony export */   PIPELINE_DATA: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.PIPELINE_DATA),\n/* harmony export */   PIPELINE_TYPES: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.PIPELINE_TYPES),\n/* harmony export */   PIPELINE_TYPES_SET: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.PIPELINE_TYPES_SET),\n/* harmony export */   SKUS: () => (/* reexport safe */ _hardware_js__WEBPACK_IMPORTED_MODULE_8__.SKUS),\n/* harmony export */   SPECIAL_TOKENS_ATTRIBUTES: () => (/* reexport safe */ _tokenizer_data_js__WEBPACK_IMPORTED_MODULE_5__.SPECIAL_TOKENS_ATTRIBUTES),\n/* harmony export */   SUBTASK_TYPES: () => (/* reexport safe */ _pipelines_js__WEBPACK_IMPORTED_MODULE_3__.SUBTASK_TYPES),\n/* harmony export */   TASKS_DATA: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_2__.TASKS_DATA),\n/* harmony export */   TASKS_MODEL_LIBRARIES: () => (/* reexport safe */ _tasks_index_js__WEBPACK_IMPORTED_MODULE_2__.TASKS_MODEL_LIBRARIES),\n/* harmony export */   findNearestQuantType: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.findNearestQuantType),\n/* harmony export */   getModelInputSnippet: () => (/* reexport safe */ _snippets_index_js__WEBPACK_IMPORTED_MODULE_7__.getModelInputSnippet),\n/* harmony export */   inferenceSnippetLanguages: () => (/* reexport safe */ _snippets_index_js__WEBPACK_IMPORTED_MODULE_7__.inferenceSnippetLanguages),\n/* harmony export */   openAIbaseUrl: () => (/* reexport safe */ _inference_providers_js__WEBPACK_IMPORTED_MODULE_11__.openAIbaseUrl),\n/* harmony export */   parseGGUFQuantLabel: () => (/* reexport safe */ _gguf_js__WEBPACK_IMPORTED_MODULE_6__.parseGGUFQuantLabel),\n/* harmony export */   stringifyGenerationConfig: () => (/* reexport safe */ _snippets_index_js__WEBPACK_IMPORTED_MODULE_7__.stringifyGenerationConfig),\n/* harmony export */   stringifyMessages: () => (/* reexport safe */ _snippets_index_js__WEBPACK_IMPORTED_MODULE_7__.stringifyMessages)\n/* harmony export */ });\n/* harmony import */ var _library_to_tasks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./library-to-tasks.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/library-to-tasks.js\");\n/* harmony import */ var _default_widget_inputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default-widget-inputs.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/default-widget-inputs.js\");\n/* harmony import */ var _tasks_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tasks/index.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/index.js\");\n/* harmony import */ var _pipelines_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pipelines.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/pipelines.js\");\n/* harmony import */ var _model_libraries_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model-libraries.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries.js\");\n/* harmony import */ var _tokenizer_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tokenizer-data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tokenizer-data.js\");\n/* harmony import */ var _gguf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gguf.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/gguf.js\");\n/* harmony import */ var _snippets_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./snippets/index.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/index.js\");\n/* harmony import */ var _hardware_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hardware.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/hardware.js\");\n/* harmony import */ var _local_apps_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./local-apps.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/local-apps.js\");\n/* harmony import */ var _dataset_libraries_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dataset-libraries.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/dataset-libraries.js\");\n/* harmony import */ var _inference_providers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inference-providers.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/inference-providers.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkQ7QUFDTztBQUNuQztBQUMrRjtBQUNKO0FBQzVEO0FBQ3RDO0FBQzJHO0FBQ3hFO0FBQ2hCO0FBQzBCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2luZGV4LmpzP2QyODEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgTElCUkFSWV9UQVNLX01BUFBJTkcgfSBmcm9tIFwiLi9saWJyYXJ5LXRvLXRhc2tzLmpzXCI7XG5leHBvcnQgeyBNQVBQSU5HX0RFRkFVTFRfV0lER0VUIH0gZnJvbSBcIi4vZGVmYXVsdC13aWRnZXQtaW5wdXRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90YXNrcy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgUElQRUxJTkVfREFUQSwgUElQRUxJTkVfVFlQRVMsIE1PREFMSVRJRVMsIE1PREFMSVRZX0xBQkVMUywgU1VCVEFTS19UWVBFUywgUElQRUxJTkVfVFlQRVNfU0VULCB9IGZyb20gXCIuL3BpcGVsaW5lcy5qc1wiO1xuZXhwb3J0IHsgQUxMX0RJU1BMQVlfTU9ERUxfTElCUkFSWV9LRVlTLCBBTExfTU9ERUxfTElCUkFSWV9LRVlTLCBNT0RFTF9MSUJSQVJJRVNfVUlfRUxFTUVOVFMsIH0gZnJvbSBcIi4vbW9kZWwtbGlicmFyaWVzLmpzXCI7XG5leHBvcnQgeyBTUEVDSUFMX1RPS0VOU19BVFRSSUJVVEVTIH0gZnJvbSBcIi4vdG9rZW5pemVyLWRhdGEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dndWYuanNcIjtcbmV4cG9ydCB7IGluZmVyZW5jZVNuaXBwZXRMYW5ndWFnZXMsIHN0cmluZ2lmeUdlbmVyYXRpb25Db25maWcsIHN0cmluZ2lmeU1lc3NhZ2VzLCBnZXRNb2RlbElucHV0U25pcHBldCwgfSBmcm9tIFwiLi9zbmlwcGV0cy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgU0tVUywgREVGQVVMVF9NRU1PUllfT1BUSU9OUyB9IGZyb20gXCIuL2hhcmR3YXJlLmpzXCI7XG5leHBvcnQgeyBMT0NBTF9BUFBTIH0gZnJvbSBcIi4vbG9jYWwtYXBwcy5qc1wiO1xuZXhwb3J0IHsgREFUQVNFVF9MSUJSQVJJRVNfVUlfRUxFTUVOVFMgfSBmcm9tIFwiLi9kYXRhc2V0LWxpYnJhcmllcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5mZXJlbmNlLXByb3ZpZGVycy5qc1wiO1xuIl0sIm5hbWVzIjpbIkxJQlJBUllfVEFTS19NQVBQSU5HIiwiTUFQUElOR19ERUZBVUxUX1dJREdFVCIsIlBJUEVMSU5FX0RBVEEiLCJQSVBFTElORV9UWVBFUyIsIk1PREFMSVRJRVMiLCJNT0RBTElUWV9MQUJFTFMiLCJTVUJUQVNLX1RZUEVTIiwiUElQRUxJTkVfVFlQRVNfU0VUIiwiQUxMX0RJU1BMQVlfTU9ERUxfTElCUkFSWV9LRVlTIiwiQUxMX01PREVMX0xJQlJBUllfS0VZUyIsIk1PREVMX0xJQlJBUklFU19VSV9FTEVNRU5UUyIsIlNQRUNJQUxfVE9LRU5TX0FUVFJJQlVURVMiLCJpbmZlcmVuY2VTbmlwcGV0TGFuZ3VhZ2VzIiwic3RyaW5naWZ5R2VuZXJhdGlvbkNvbmZpZyIsInN0cmluZ2lmeU1lc3NhZ2VzIiwiZ2V0TW9kZWxJbnB1dFNuaXBwZXQiLCJTS1VTIiwiREVGQVVMVF9NRU1PUllfT1BUSU9OUyIsIkxPQ0FMX0FQUFMiLCJEQVRBU0VUX0xJQlJBUklFU19VSV9FTEVNRU5UUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/inference-providers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/inference-providers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HF_HUB_INFERENCE_PROXY_TEMPLATE: () => (/* binding */ HF_HUB_INFERENCE_PROXY_TEMPLATE),\n/* harmony export */   openAIbaseUrl: () => (/* binding */ openAIbaseUrl)\n/* harmony export */ });\n/// This list is for illustration purposes only.\n/// in the `tasks` sub-package, we do not need actual strong typing of the inference providers.\nconst INFERENCE_PROVIDERS = [\n    \"cerebras\",\n    \"cohere\",\n    \"fal-ai\",\n    \"fireworks-ai\",\n    \"hf-inference\",\n    \"hyperbolic\",\n    \"ovhcloud\",\n    \"replicate\",\n    \"sambanova\",\n    \"together\"\n];\nconst HF_HUB_INFERENCE_PROXY_TEMPLATE = `https://router.huggingface.co/{{PROVIDER}}`;\n/**\n * URL to set as baseUrl in the OpenAI SDK.\n *\n * TODO(Expose this from InferenceClient in the future?)\n */ function openAIbaseUrl(provider) {\n    const url = HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", provider);\n    return provider === \"hf-inference\" ? `${url}/v1` : url;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2luZmVyZW5jZS1wcm92aWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBZ0Q7QUFDaEQsK0ZBQStGO0FBQy9GLE1BQU1BLHNCQUFzQjtJQUN4QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ00sTUFBTUMsa0NBQWtDLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUM1Rjs7OztDQUlDLEdBQ00sU0FBU0MsY0FBY0MsUUFBUTtJQUNsQyxNQUFNQyxNQUFNSCxnQ0FBZ0NJLE9BQU8sQ0FBQyxnQkFBZ0JGO0lBQ3BFLE9BQU9BLGFBQWEsaUJBQWlCLENBQUMsRUFBRUMsSUFBSSxHQUFHLENBQUMsR0FBR0E7QUFDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vaW5mZXJlbmNlLXByb3ZpZGVycy5qcz8yYTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vLyBUaGlzIGxpc3QgaXMgZm9yIGlsbHVzdHJhdGlvbiBwdXJwb3NlcyBvbmx5LlxuLy8vIGluIHRoZSBgdGFza3NgIHN1Yi1wYWNrYWdlLCB3ZSBkbyBub3QgbmVlZCBhY3R1YWwgc3Ryb25nIHR5cGluZyBvZiB0aGUgaW5mZXJlbmNlIHByb3ZpZGVycy5cbmNvbnN0IElORkVSRU5DRV9QUk9WSURFUlMgPSBbXG4gICAgXCJjZXJlYnJhc1wiLFxuICAgIFwiY29oZXJlXCIsXG4gICAgXCJmYWwtYWlcIixcbiAgICBcImZpcmV3b3Jrcy1haVwiLFxuICAgIFwiaGYtaW5mZXJlbmNlXCIsXG4gICAgXCJoeXBlcmJvbGljXCIsXG4gICAgXCJvdmhjbG91ZFwiLFxuICAgIFwicmVwbGljYXRlXCIsXG4gICAgXCJzYW1iYW5vdmFcIixcbiAgICBcInRvZ2V0aGVyXCIsXG5dO1xuZXhwb3J0IGNvbnN0IEhGX0hVQl9JTkZFUkVOQ0VfUFJPWFlfVEVNUExBVEUgPSBgaHR0cHM6Ly9yb3V0ZXIuaHVnZ2luZ2ZhY2UuY28ve3tQUk9WSURFUn19YDtcbi8qKlxuICogVVJMIHRvIHNldCBhcyBiYXNlVXJsIGluIHRoZSBPcGVuQUkgU0RLLlxuICpcbiAqIFRPRE8oRXhwb3NlIHRoaXMgZnJvbSBJbmZlcmVuY2VDbGllbnQgaW4gdGhlIGZ1dHVyZT8pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuQUliYXNlVXJsKHByb3ZpZGVyKSB7XG4gICAgY29uc3QgdXJsID0gSEZfSFVCX0lORkVSRU5DRV9QUk9YWV9URU1QTEFURS5yZXBsYWNlKFwie3tQUk9WSURFUn19XCIsIHByb3ZpZGVyKTtcbiAgICByZXR1cm4gcHJvdmlkZXIgPT09IFwiaGYtaW5mZXJlbmNlXCIgPyBgJHt1cmx9L3YxYCA6IHVybDtcbn1cbiJdLCJuYW1lcyI6WyJJTkZFUkVOQ0VfUFJPVklERVJTIiwiSEZfSFVCX0lORkVSRU5DRV9QUk9YWV9URU1QTEFURSIsIm9wZW5BSWJhc2VVcmwiLCJwcm92aWRlciIsInVybCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/inference-providers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/library-to-tasks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/library-to-tasks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIBRARY_TASK_MAPPING: () => (/* binding */ LIBRARY_TASK_MAPPING)\n/* harmony export */ });\n/**\n * Mapping from library name to its supported tasks.\n * HF-Inference API (serverless) should be disabled for all other (library, task) pairs beyond this mapping.\n * This mapping is partially generated automatically by \"python-api-export-tasks\" action in\n * huggingface/api-inference-community repo upon merge. For transformers, the mapping is manually\n * based on api-inference (hf_types.rs).\n */ const LIBRARY_TASK_MAPPING = {\n    \"adapter-transformers\": [\n        \"question-answering\",\n        \"text-classification\",\n        \"token-classification\"\n    ],\n    allennlp: [\n        \"question-answering\"\n    ],\n    asteroid: [\n        // \"audio-source-separation\",\n        \"audio-to-audio\"\n    ],\n    bertopic: [\n        \"text-classification\"\n    ],\n    diffusers: [\n        \"image-to-image\",\n        \"text-to-image\"\n    ],\n    doctr: [\n        \"object-detection\"\n    ],\n    espnet: [\n        \"text-to-speech\",\n        \"automatic-speech-recognition\"\n    ],\n    fairseq: [\n        \"text-to-speech\",\n        \"audio-to-audio\"\n    ],\n    fastai: [\n        \"image-classification\"\n    ],\n    fasttext: [\n        \"feature-extraction\",\n        \"text-classification\"\n    ],\n    flair: [\n        \"token-classification\"\n    ],\n    k2: [\n        \"automatic-speech-recognition\"\n    ],\n    keras: [\n        \"image-classification\"\n    ],\n    nemo: [\n        \"automatic-speech-recognition\"\n    ],\n    open_clip: [\n        \"zero-shot-classification\",\n        \"zero-shot-image-classification\"\n    ],\n    paddlenlp: [\n        \"fill-mask\",\n        \"summarization\",\n        \"zero-shot-classification\"\n    ],\n    peft: [\n        \"text-generation\"\n    ],\n    \"pyannote-audio\": [\n        \"automatic-speech-recognition\"\n    ],\n    \"sentence-transformers\": [\n        \"feature-extraction\",\n        \"sentence-similarity\"\n    ],\n    setfit: [\n        \"text-classification\"\n    ],\n    sklearn: [\n        \"tabular-classification\",\n        \"tabular-regression\",\n        \"text-classification\"\n    ],\n    spacy: [\n        \"token-classification\",\n        \"text-classification\",\n        \"sentence-similarity\"\n    ],\n    \"span-marker\": [\n        \"token-classification\"\n    ],\n    speechbrain: [\n        \"audio-classification\",\n        \"audio-to-audio\",\n        \"automatic-speech-recognition\",\n        \"text-to-speech\"\n    ],\n    stanza: [\n        \"token-classification\"\n    ],\n    timm: [\n        \"image-classification\",\n        \"image-feature-extraction\"\n    ],\n    transformers: [\n        \"audio-classification\",\n        \"automatic-speech-recognition\",\n        \"depth-estimation\",\n        \"document-question-answering\",\n        \"feature-extraction\",\n        \"fill-mask\",\n        \"image-classification\",\n        \"image-feature-extraction\",\n        \"image-segmentation\",\n        \"image-to-image\",\n        \"image-to-text\",\n        \"image-text-to-text\",\n        \"mask-generation\",\n        \"object-detection\",\n        \"question-answering\",\n        \"summarization\",\n        \"table-question-answering\",\n        \"text-classification\",\n        \"text-generation\",\n        \"text-to-audio\",\n        \"text-to-speech\",\n        \"token-classification\",\n        \"translation\",\n        \"video-classification\",\n        \"visual-question-answering\",\n        \"zero-shot-classification\",\n        \"zero-shot-image-classification\",\n        \"zero-shot-object-detection\"\n    ],\n    mindspore: [\n        \"image-classification\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2xpYnJhcnktdG8tdGFza3MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNNLE1BQU1BLHVCQUF1QjtJQUNoQyx3QkFBd0I7UUFBQztRQUFzQjtRQUF1QjtLQUF1QjtJQUM3RkMsVUFBVTtRQUFDO0tBQXFCO0lBQ2hDQyxVQUFVO1FBQ04sNkJBQTZCO1FBQzdCO0tBQ0g7SUFDREMsVUFBVTtRQUFDO0tBQXNCO0lBQ2pDQyxXQUFXO1FBQUM7UUFBa0I7S0FBZ0I7SUFDOUNDLE9BQU87UUFBQztLQUFtQjtJQUMzQkMsUUFBUTtRQUFDO1FBQWtCO0tBQStCO0lBQzFEQyxTQUFTO1FBQUM7UUFBa0I7S0FBaUI7SUFDN0NDLFFBQVE7UUFBQztLQUF1QjtJQUNoQ0MsVUFBVTtRQUFDO1FBQXNCO0tBQXNCO0lBQ3ZEQyxPQUFPO1FBQUM7S0FBdUI7SUFDL0JDLElBQUk7UUFBQztLQUErQjtJQUNwQ0MsT0FBTztRQUFDO0tBQXVCO0lBQy9CQyxNQUFNO1FBQUM7S0FBK0I7SUFDdENDLFdBQVc7UUFBQztRQUE0QjtLQUFpQztJQUN6RUMsV0FBVztRQUFDO1FBQWE7UUFBaUI7S0FBMkI7SUFDckVDLE1BQU07UUFBQztLQUFrQjtJQUN6QixrQkFBa0I7UUFBQztLQUErQjtJQUNsRCx5QkFBeUI7UUFBQztRQUFzQjtLQUFzQjtJQUN0RUMsUUFBUTtRQUFDO0tBQXNCO0lBQy9CQyxTQUFTO1FBQUM7UUFBMEI7UUFBc0I7S0FBc0I7SUFDaEZDLE9BQU87UUFBQztRQUF3QjtRQUF1QjtLQUFzQjtJQUM3RSxlQUFlO1FBQUM7S0FBdUI7SUFDdkNDLGFBQWE7UUFBQztRQUF3QjtRQUFrQjtRQUFnQztLQUFpQjtJQUN6R0MsUUFBUTtRQUFDO0tBQXVCO0lBQ2hDQyxNQUFNO1FBQUM7UUFBd0I7S0FBMkI7SUFDMURDLGNBQWM7UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNIO0lBQ0RDLFdBQVc7UUFBQztLQUF1QjtBQUN2QyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL2xpYnJhcnktdG8tdGFza3MuanM/MDk0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcHBpbmcgZnJvbSBsaWJyYXJ5IG5hbWUgdG8gaXRzIHN1cHBvcnRlZCB0YXNrcy5cbiAqIEhGLUluZmVyZW5jZSBBUEkgKHNlcnZlcmxlc3MpIHNob3VsZCBiZSBkaXNhYmxlZCBmb3IgYWxsIG90aGVyIChsaWJyYXJ5LCB0YXNrKSBwYWlycyBiZXlvbmQgdGhpcyBtYXBwaW5nLlxuICogVGhpcyBtYXBwaW5nIGlzIHBhcnRpYWxseSBnZW5lcmF0ZWQgYXV0b21hdGljYWxseSBieSBcInB5dGhvbi1hcGktZXhwb3J0LXRhc2tzXCIgYWN0aW9uIGluXG4gKiBodWdnaW5nZmFjZS9hcGktaW5mZXJlbmNlLWNvbW11bml0eSByZXBvIHVwb24gbWVyZ2UuIEZvciB0cmFuc2Zvcm1lcnMsIHRoZSBtYXBwaW5nIGlzIG1hbnVhbGx5XG4gKiBiYXNlZCBvbiBhcGktaW5mZXJlbmNlIChoZl90eXBlcy5ycykuXG4gKi9cbmV4cG9ydCBjb25zdCBMSUJSQVJZX1RBU0tfTUFQUElORyA9IHtcbiAgICBcImFkYXB0ZXItdHJhbnNmb3JtZXJzXCI6IFtcInF1ZXN0aW9uLWFuc3dlcmluZ1wiLCBcInRleHQtY2xhc3NpZmljYXRpb25cIiwgXCJ0b2tlbi1jbGFzc2lmaWNhdGlvblwiXSxcbiAgICBhbGxlbm5scDogW1wicXVlc3Rpb24tYW5zd2VyaW5nXCJdLFxuICAgIGFzdGVyb2lkOiBbXG4gICAgICAgIC8vIFwiYXVkaW8tc291cmNlLXNlcGFyYXRpb25cIixcbiAgICAgICAgXCJhdWRpby10by1hdWRpb1wiLFxuICAgIF0sXG4gICAgYmVydG9waWM6IFtcInRleHQtY2xhc3NpZmljYXRpb25cIl0sXG4gICAgZGlmZnVzZXJzOiBbXCJpbWFnZS10by1pbWFnZVwiLCBcInRleHQtdG8taW1hZ2VcIl0sXG4gICAgZG9jdHI6IFtcIm9iamVjdC1kZXRlY3Rpb25cIl0sXG4gICAgZXNwbmV0OiBbXCJ0ZXh0LXRvLXNwZWVjaFwiLCBcImF1dG9tYXRpYy1zcGVlY2gtcmVjb2duaXRpb25cIl0sXG4gICAgZmFpcnNlcTogW1widGV4dC10by1zcGVlY2hcIiwgXCJhdWRpby10by1hdWRpb1wiXSxcbiAgICBmYXN0YWk6IFtcImltYWdlLWNsYXNzaWZpY2F0aW9uXCJdLFxuICAgIGZhc3R0ZXh0OiBbXCJmZWF0dXJlLWV4dHJhY3Rpb25cIiwgXCJ0ZXh0LWNsYXNzaWZpY2F0aW9uXCJdLFxuICAgIGZsYWlyOiBbXCJ0b2tlbi1jbGFzc2lmaWNhdGlvblwiXSxcbiAgICBrMjogW1wiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiXSxcbiAgICBrZXJhczogW1wiaW1hZ2UtY2xhc3NpZmljYXRpb25cIl0sXG4gICAgbmVtbzogW1wiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiXSxcbiAgICBvcGVuX2NsaXA6IFtcInplcm8tc2hvdC1jbGFzc2lmaWNhdGlvblwiLCBcInplcm8tc2hvdC1pbWFnZS1jbGFzc2lmaWNhdGlvblwiXSxcbiAgICBwYWRkbGVubHA6IFtcImZpbGwtbWFza1wiLCBcInN1bW1hcml6YXRpb25cIiwgXCJ6ZXJvLXNob3QtY2xhc3NpZmljYXRpb25cIl0sXG4gICAgcGVmdDogW1widGV4dC1nZW5lcmF0aW9uXCJdLFxuICAgIFwicHlhbm5vdGUtYXVkaW9cIjogW1wiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiXSxcbiAgICBcInNlbnRlbmNlLXRyYW5zZm9ybWVyc1wiOiBbXCJmZWF0dXJlLWV4dHJhY3Rpb25cIiwgXCJzZW50ZW5jZS1zaW1pbGFyaXR5XCJdLFxuICAgIHNldGZpdDogW1widGV4dC1jbGFzc2lmaWNhdGlvblwiXSxcbiAgICBza2xlYXJuOiBbXCJ0YWJ1bGFyLWNsYXNzaWZpY2F0aW9uXCIsIFwidGFidWxhci1yZWdyZXNzaW9uXCIsIFwidGV4dC1jbGFzc2lmaWNhdGlvblwiXSxcbiAgICBzcGFjeTogW1widG9rZW4tY2xhc3NpZmljYXRpb25cIiwgXCJ0ZXh0LWNsYXNzaWZpY2F0aW9uXCIsIFwic2VudGVuY2Utc2ltaWxhcml0eVwiXSxcbiAgICBcInNwYW4tbWFya2VyXCI6IFtcInRva2VuLWNsYXNzaWZpY2F0aW9uXCJdLFxuICAgIHNwZWVjaGJyYWluOiBbXCJhdWRpby1jbGFzc2lmaWNhdGlvblwiLCBcImF1ZGlvLXRvLWF1ZGlvXCIsIFwiYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvblwiLCBcInRleHQtdG8tc3BlZWNoXCJdLFxuICAgIHN0YW56YTogW1widG9rZW4tY2xhc3NpZmljYXRpb25cIl0sXG4gICAgdGltbTogW1wiaW1hZ2UtY2xhc3NpZmljYXRpb25cIiwgXCJpbWFnZS1mZWF0dXJlLWV4dHJhY3Rpb25cIl0sXG4gICAgdHJhbnNmb3JtZXJzOiBbXG4gICAgICAgIFwiYXVkaW8tY2xhc3NpZmljYXRpb25cIixcbiAgICAgICAgXCJhdXRvbWF0aWMtc3BlZWNoLXJlY29nbml0aW9uXCIsXG4gICAgICAgIFwiZGVwdGgtZXN0aW1hdGlvblwiLFxuICAgICAgICBcImRvY3VtZW50LXF1ZXN0aW9uLWFuc3dlcmluZ1wiLFxuICAgICAgICBcImZlYXR1cmUtZXh0cmFjdGlvblwiLFxuICAgICAgICBcImZpbGwtbWFza1wiLFxuICAgICAgICBcImltYWdlLWNsYXNzaWZpY2F0aW9uXCIsXG4gICAgICAgIFwiaW1hZ2UtZmVhdHVyZS1leHRyYWN0aW9uXCIsXG4gICAgICAgIFwiaW1hZ2Utc2VnbWVudGF0aW9uXCIsXG4gICAgICAgIFwiaW1hZ2UtdG8taW1hZ2VcIixcbiAgICAgICAgXCJpbWFnZS10by10ZXh0XCIsXG4gICAgICAgIFwiaW1hZ2UtdGV4dC10by10ZXh0XCIsXG4gICAgICAgIFwibWFzay1nZW5lcmF0aW9uXCIsXG4gICAgICAgIFwib2JqZWN0LWRldGVjdGlvblwiLFxuICAgICAgICBcInF1ZXN0aW9uLWFuc3dlcmluZ1wiLFxuICAgICAgICBcInN1bW1hcml6YXRpb25cIixcbiAgICAgICAgXCJ0YWJsZS1xdWVzdGlvbi1hbnN3ZXJpbmdcIixcbiAgICAgICAgXCJ0ZXh0LWNsYXNzaWZpY2F0aW9uXCIsXG4gICAgICAgIFwidGV4dC1nZW5lcmF0aW9uXCIsXG4gICAgICAgIFwidGV4dC10by1hdWRpb1wiLFxuICAgICAgICBcInRleHQtdG8tc3BlZWNoXCIsXG4gICAgICAgIFwidG9rZW4tY2xhc3NpZmljYXRpb25cIixcbiAgICAgICAgXCJ0cmFuc2xhdGlvblwiLFxuICAgICAgICBcInZpZGVvLWNsYXNzaWZpY2F0aW9uXCIsXG4gICAgICAgIFwidmlzdWFsLXF1ZXN0aW9uLWFuc3dlcmluZ1wiLFxuICAgICAgICBcInplcm8tc2hvdC1jbGFzc2lmaWNhdGlvblwiLFxuICAgICAgICBcInplcm8tc2hvdC1pbWFnZS1jbGFzc2lmaWNhdGlvblwiLFxuICAgICAgICBcInplcm8tc2hvdC1vYmplY3QtZGV0ZWN0aW9uXCIsXG4gICAgXSxcbiAgICBtaW5kc3BvcmU6IFtcImltYWdlLWNsYXNzaWZpY2F0aW9uXCJdLFxufTtcbiJdLCJuYW1lcyI6WyJMSUJSQVJZX1RBU0tfTUFQUElORyIsImFsbGVubmxwIiwiYXN0ZXJvaWQiLCJiZXJ0b3BpYyIsImRpZmZ1c2VycyIsImRvY3RyIiwiZXNwbmV0IiwiZmFpcnNlcSIsImZhc3RhaSIsImZhc3R0ZXh0IiwiZmxhaXIiLCJrMiIsImtlcmFzIiwibmVtbyIsIm9wZW5fY2xpcCIsInBhZGRsZW5scCIsInBlZnQiLCJzZXRmaXQiLCJza2xlYXJuIiwic3BhY3kiLCJzcGVlY2hicmFpbiIsInN0YW56YSIsInRpbW0iLCJ0cmFuc2Zvcm1lcnMiLCJtaW5kc3BvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/library-to-tasks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/local-apps.js":
/*!****************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/local-apps.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LOCAL_APPS: () => (/* binding */ LOCAL_APPS)\n/* harmony export */ });\n/* harmony import */ var _gguf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gguf.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/gguf.js\");\n/* harmony import */ var _snippets_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./snippets/common.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/common.js\");\n/* harmony import */ var _snippets_inputs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snippets/inputs.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js\");\n\n\n\nfunction isAwqModel(model) {\n    return model.config?.quantization_config?.quant_method === \"awq\";\n}\nfunction isGptqModel(model) {\n    return model.config?.quantization_config?.quant_method === \"gptq\";\n}\nfunction isAqlmModel(model) {\n    return model.config?.quantization_config?.quant_method === \"aqlm\";\n}\nfunction isMarlinModel(model) {\n    return model.config?.quantization_config?.quant_method === \"marlin\";\n}\nfunction isTransformersModel(model) {\n    return model.tags.includes(\"transformers\");\n}\nfunction isTgiModel(model) {\n    return model.tags.includes(\"text-generation-inference\");\n}\nfunction isLlamaCppGgufModel(model) {\n    return !!model.gguf?.context_length;\n}\nfunction isMlxModel(model) {\n    return model.tags.includes(\"mlx\");\n}\nfunction getQuantTag(filepath) {\n    const defaultTag = \":{{QUANT_TAG}}\";\n    if (!filepath) {\n        return defaultTag;\n    }\n    const quantLabel = (0,_gguf_js__WEBPACK_IMPORTED_MODULE_0__.parseGGUFQuantLabel)(filepath);\n    return quantLabel ? `:${quantLabel}` : defaultTag;\n}\nconst snippetLlamacpp = (model, filepath)=>{\n    const command = (binary)=>{\n        const snippet = [\n            \"# Load and run the model:\",\n            `${binary} -hf ${model.id}${getQuantTag(filepath)}`\n        ];\n        return snippet.join(\"\\n\");\n    };\n    return [\n        {\n            title: \"Install from brew\",\n            setup: \"brew install llama.cpp\",\n            content: command(\"llama-server\")\n        },\n        {\n            title: \"Install from WinGet (Windows)\",\n            setup: \"winget install llama.cpp\",\n            content: command(\"llama-server\")\n        },\n        {\n            title: \"Use pre-built binary\",\n            setup: [\n                // prettier-ignore\n                \"# Download pre-built binary from:\",\n                \"# https://github.com/ggerganov/llama.cpp/releases\"\n            ].join(\"\\n\"),\n            content: command(\"./llama-server\")\n        },\n        {\n            title: \"Build from source code\",\n            setup: [\n                \"git clone https://github.com/ggerganov/llama.cpp.git\",\n                \"cd llama.cpp\",\n                \"cmake -B build\",\n                \"cmake --build build -j --target llama-server\"\n            ].join(\"\\n\"),\n            content: command(\"./build/bin/llama-server\")\n        }\n    ];\n};\nconst snippetNodeLlamaCppCli = (model, filepath)=>{\n    const tagName = getQuantTag(filepath);\n    return [\n        {\n            title: \"Chat with the model\",\n            content: `npx -y node-llama-cpp chat hf:${model.id}${tagName}`\n        },\n        {\n            title: \"Estimate the model compatibility with your hardware\",\n            content: `npx -y node-llama-cpp inspect estimate hf:${model.id}${tagName}`\n        }\n    ];\n};\nconst snippetOllama = (model, filepath)=>{\n    return `ollama run hf.co/${model.id}${getQuantTag(filepath)}`;\n};\nconst snippetLocalAI = (model, filepath)=>{\n    const command = (binary)=>[\n            \"# Load and run the model:\",\n            `${binary} huggingface://${model.id}/${filepath ?? \"{{GGUF_FILE}}\"}`\n        ].join(\"\\n\");\n    return [\n        {\n            title: \"Install from binary\",\n            setup: \"curl https://localai.io/install.sh | sh\",\n            content: command(\"local-ai run\")\n        },\n        {\n            title: \"Use Docker images\",\n            setup: [\n                // prettier-ignore\n                \"# Pull the image:\",\n                \"docker pull localai/localai:latest-cpu\"\n            ].join(\"\\n\"),\n            content: command(\"docker run -p 8080:8080 --name localai -v $PWD/models:/build/models localai/localai:latest-cpu\")\n        }\n    ];\n};\nconst snippetVllm = (model)=>{\n    const messages = (0,_snippets_inputs_js__WEBPACK_IMPORTED_MODULE_2__.getModelInputSnippet)(model);\n    const runCommandInstruct = `# Call the server using curl:\ncurl -X POST \"http://localhost:8000/v1/chat/completions\" \\\\\n\t-H \"Content-Type: application/json\" \\\\\n\t--data '{\n\t\t\"model\": \"${model.id}\",\n\t\t\"messages\": ${(0,_snippets_common_js__WEBPACK_IMPORTED_MODULE_1__.stringifyMessages)(messages, {\n        indent: \"\t\t\",\n        attributeKeyQuotes: true,\n        customContentEscaper: (str)=>str.replace(/'/g, \"'\\\\''\")\n    })}\n\t}'`;\n    const runCommandNonInstruct = `# Call the server using curl:\ncurl -X POST \"http://localhost:8000/v1/completions\" \\\\\n\t-H \"Content-Type: application/json\" \\\\\n\t--data '{\n\t\t\"model\": \"${model.id}\",\n\t\t\"prompt\": \"Once upon a time,\",\n\t\t\"max_tokens\": 512,\n\t\t\"temperature\": 0.5\n\t}'`;\n    const runCommand = model.tags.includes(\"conversational\") ? runCommandInstruct : runCommandNonInstruct;\n    let setup;\n    let dockerCommand;\n    if (model.tags.includes(\"mistral-common\")) {\n        setup = [\n            \"# Install vLLM from pip:\",\n            \"pip install vllm\",\n            \"# Make sure you have the latest version of mistral-common installed:\",\n            \"pip install --upgrade mistral-common\"\n        ].join(\"\\n\");\n        dockerCommand = `# Load and run the model:\\ndocker exec -it my_vllm_container bash -c \"vllm serve ${model.id} --tokenizer_mode mistral --config_format mistral --load_format mistral --tool-call-parser mistral --enable-auto-tool-choice\"`;\n    } else {\n        setup = [\n            \"# Install vLLM from pip:\",\n            \"pip install vllm\"\n        ].join(\"\\n\");\n        dockerCommand = `# Load and run the model:\\ndocker exec -it my_vllm_container bash -c \"vllm serve ${model.id}\"`;\n    }\n    return [\n        {\n            title: \"Install from pip\",\n            setup: setup,\n            content: [\n                `# Load and run the model:\\nvllm serve \"${model.id}\"`,\n                runCommand\n            ]\n        },\n        {\n            title: \"Use Docker images\",\n            setup: [\n                \"# Deploy with docker on Linux:\",\n                `docker run --runtime nvidia --gpus all \\\\`,\n                `\t--name my_vllm_container \\\\`,\n                `\t-v ~/.cache/huggingface:/root/.cache/huggingface \\\\`,\n                ` \t--env \"HUGGING_FACE_HUB_TOKEN=<secret>\" \\\\`,\n                `\t-p 8000:8000 \\\\`,\n                `\t--ipc=host \\\\`,\n                `\tvllm/vllm-openai:latest \\\\`,\n                `\t--model ${model.id}`\n            ].join(\"\\n\"),\n            content: [\n                dockerCommand,\n                runCommand\n            ]\n        }\n    ];\n};\nconst snippetTgi = (model)=>{\n    const runCommand = [\n        \"# Call the server using curl:\",\n        `curl -X POST \"http://localhost:8000/v1/chat/completions\" \\\\`,\n        `\t-H \"Content-Type: application/json\" \\\\`,\n        `\t--data '{`,\n        `\t\t\"model\": \"${model.id}\",`,\n        `\t\t\"messages\": [`,\n        `\t\t\t{\"role\": \"user\", \"content\": \"What is the capital of France?\"}`,\n        `\t\t]`,\n        `\t}'`\n    ];\n    return [\n        {\n            title: \"Use Docker images\",\n            setup: [\n                \"# Deploy with docker on Linux:\",\n                `docker run --gpus all \\\\`,\n                `\t-v ~/.cache/huggingface:/root/.cache/huggingface \\\\`,\n                ` \t-e HF_TOKEN=\"<secret>\" \\\\`,\n                `\t-p 8000:80 \\\\`,\n                `\tghcr.io/huggingface/text-generation-inference:latest \\\\`,\n                `\t--model-id ${model.id}`\n            ].join(\"\\n\"),\n            content: [\n                runCommand.join(\"\\n\")\n            ]\n        }\n    ];\n};\nconst snippetMlxLm = (model)=>{\n    const openaiCurl = [\n        \"# Calling the OpenAI-compatible server with curl\",\n        `curl -X POST \"http://localhost:8000/v1/chat/completions\" \\\\`,\n        `   -H \"Content-Type: application/json\" \\\\`,\n        `   --data '{`,\n        `     \"model\": \"${model.id}\",`,\n        `     \"messages\": [`,\n        `       {\"role\": \"user\", \"content\": \"Hello\"}`,\n        `     ]`,\n        `   }'`\n    ];\n    return [\n        {\n            title: \"Generate or start a chat session\",\n            setup: [\n                \"# Install MLX LM\",\n                \"uv tool install mlx-lm\"\n            ].join(\"\\n\"),\n            content: [\n                ...model.tags.includes(\"conversational\") ? [\n                    \"# Interactive chat REPL\",\n                    `mlx_lm.chat --model \"${model.id}\"`\n                ] : [\n                    \"# Generate some text\",\n                    `mlx_lm.generate --model \"${model.id}\" --prompt \"Once upon a time\"`\n                ]\n            ].join(\"\\n\")\n        },\n        ...model.tags.includes(\"conversational\") ? [\n            {\n                title: \"Run an OpenAI-compatible server\",\n                setup: [\n                    \"# Install MLX LM\",\n                    \"uv tool install mlx-lm\"\n                ].join(\"\\n\"),\n                content: [\n                    \"# Start the server\",\n                    `mlx_lm.server --model \"${model.id}\"`,\n                    ...openaiCurl\n                ].join(\"\\n\")\n            }\n        ] : []\n    ];\n};\nconst snippetDockerModelRunner = (model, filepath)=>{\n    return `docker model run hf.co/${model.id}${getQuantTag(filepath)}`;\n};\nconst snippetLemonade = (model, filepath)=>{\n    const tagName = getQuantTag(filepath);\n    const modelName = model.id.split(\"/\")[1];\n    return [\n        {\n            title: \"Pull the model\",\n            setup: \"# Download Lemonade from https://lemonade-server.ai/\",\n            content: [\n                `lemonade-server pull user.${modelName} \\\\\n\t--checkpoint ${model.id}${tagName} \\\\\n\t--recipe llamacpp`,\n                \"# Note: If you installed from source, use the lemonade-server-dev command instead.\"\n            ].join(\"\\n\")\n        },\n        {\n            title: \"Run and chat with the model\",\n            content: `lemonade-server run user.${modelName}`\n        },\n        {\n            title: \"List all available models\",\n            content: \"lemonade-server list\"\n        }\n    ];\n};\n/**\n * Add your new local app here.\n *\n * This is open to new suggestions and awesome upcoming apps.\n *\n * /!\\ IMPORTANT\n *\n * If possible, you need to support deeplinks and be as cross-platform as possible.\n *\n * Ping the HF team if we can help with anything!\n */ const LOCAL_APPS = {\n    \"llama.cpp\": {\n        prettyLabel: \"llama.cpp\",\n        docsUrl: \"https://github.com/ggerganov/llama.cpp\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetLlamacpp\n    },\n    \"node-llama-cpp\": {\n        prettyLabel: \"node-llama-cpp\",\n        docsUrl: \"https://node-llama-cpp.withcat.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetNodeLlamaCppCli\n    },\n    vllm: {\n        prettyLabel: \"vLLM\",\n        docsUrl: \"https://docs.vllm.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: (model)=>(isAwqModel(model) || isGptqModel(model) || isAqlmModel(model) || isMarlinModel(model) || isLlamaCppGgufModel(model) || isTransformersModel(model)) && (model.pipeline_tag === \"text-generation\" || model.pipeline_tag === \"image-text-to-text\"),\n        snippet: snippetVllm\n    },\n    \"mlx-lm\": {\n        prettyLabel: \"MLX LM\",\n        docsUrl: \"https://github.com/ml-explore/mlx-lm\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: (model)=>model.pipeline_tag === \"text-generation\" && isMlxModel(model),\n        snippet: snippetMlxLm\n    },\n    tgi: {\n        prettyLabel: \"TGI\",\n        docsUrl: \"https://huggingface.co/docs/text-generation-inference/\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isTgiModel,\n        snippet: snippetTgi\n    },\n    lmstudio: {\n        prettyLabel: \"LM Studio\",\n        docsUrl: \"https://lmstudio.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: (model)=>isLlamaCppGgufModel(model) || isMlxModel(model),\n        deeplink: (model, filepath)=>new URL(`lmstudio://open_from_hf?model=${model.id}${filepath ? `&file=${filepath}` : \"\"}`)\n    },\n    localai: {\n        prettyLabel: \"LocalAI\",\n        docsUrl: \"https://github.com/mudler/LocalAI\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetLocalAI\n    },\n    jan: {\n        prettyLabel: \"Jan\",\n        docsUrl: \"https://jan.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        deeplink: (model)=>new URL(`jan://models/huggingface/${model.id}`)\n    },\n    backyard: {\n        prettyLabel: \"Backyard AI\",\n        docsUrl: \"https://backyard.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        deeplink: (model)=>new URL(`https://backyard.ai/hf/model/${model.id}`)\n    },\n    sanctum: {\n        prettyLabel: \"Sanctum\",\n        docsUrl: \"https://sanctum.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        deeplink: (model)=>new URL(`sanctum://open_from_hf?model=${model.id}`)\n    },\n    jellybox: {\n        prettyLabel: \"Jellybox\",\n        docsUrl: \"https://jellybox.com\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: (model)=>isLlamaCppGgufModel(model) || model.library_name === \"diffusers\" && model.tags.includes(\"safetensors\") && (model.pipeline_tag === \"text-to-image\" || model.tags.includes(\"lora\")),\n        deeplink: (model)=>{\n            if (isLlamaCppGgufModel(model)) {\n                return new URL(`jellybox://llm/models/huggingface/LLM/${model.id}`);\n            } else if (model.tags.includes(\"lora\")) {\n                return new URL(`jellybox://image/models/huggingface/ImageLora/${model.id}`);\n            } else {\n                return new URL(`jellybox://image/models/huggingface/Image/${model.id}`);\n            }\n        }\n    },\n    msty: {\n        prettyLabel: \"Msty\",\n        docsUrl: \"https://msty.app\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        deeplink: (model)=>new URL(`msty://models/search/hf/${model.id}`)\n    },\n    recursechat: {\n        prettyLabel: \"RecurseChat\",\n        docsUrl: \"https://recurse.chat\",\n        mainTask: \"text-generation\",\n        macOSOnly: true,\n        displayOnModelPage: isLlamaCppGgufModel,\n        deeplink: (model)=>new URL(`recursechat://new-hf-gguf-model?hf-model-id=${model.id}`)\n    },\n    drawthings: {\n        prettyLabel: \"Draw Things\",\n        docsUrl: \"https://drawthings.ai\",\n        mainTask: \"text-to-image\",\n        macOSOnly: true,\n        displayOnModelPage: (model)=>model.library_name === \"diffusers\" && (model.pipeline_tag === \"text-to-image\" || model.tags.includes(\"lora\")),\n        deeplink: (model)=>{\n            if (model.tags.includes(\"lora\")) {\n                return new URL(`https://drawthings.ai/import/diffusers/pipeline.load_lora_weights?repo_id=${model.id}`);\n            } else {\n                return new URL(`https://drawthings.ai/import/diffusers/pipeline.from_pretrained?repo_id=${model.id}`);\n            }\n        }\n    },\n    diffusionbee: {\n        prettyLabel: \"DiffusionBee\",\n        docsUrl: \"https://diffusionbee.com\",\n        mainTask: \"text-to-image\",\n        macOSOnly: true,\n        displayOnModelPage: (model)=>model.library_name === \"diffusers\" && model.pipeline_tag === \"text-to-image\",\n        deeplink: (model)=>new URL(`https://diffusionbee.com/huggingface_import?model_id=${model.id}`)\n    },\n    joyfusion: {\n        prettyLabel: \"JoyFusion\",\n        docsUrl: \"https://joyfusion.app\",\n        mainTask: \"text-to-image\",\n        macOSOnly: true,\n        displayOnModelPage: (model)=>model.tags.includes(\"coreml\") && model.tags.includes(\"joyfusion\") && model.pipeline_tag === \"text-to-image\",\n        deeplink: (model)=>new URL(`https://joyfusion.app/import_from_hf?repo_id=${model.id}`)\n    },\n    invoke: {\n        prettyLabel: \"Invoke\",\n        docsUrl: \"https://github.com/invoke-ai/InvokeAI\",\n        mainTask: \"text-to-image\",\n        displayOnModelPage: (model)=>model.library_name === \"diffusers\" && model.pipeline_tag === \"text-to-image\",\n        deeplink: (model)=>new URL(`https://models.invoke.ai/huggingface/${model.id}`)\n    },\n    ollama: {\n        prettyLabel: \"Ollama\",\n        docsUrl: \"https://ollama.com\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetOllama\n    },\n    \"docker-model-runner\": {\n        prettyLabel: \"Docker Model Runner\",\n        docsUrl: \"https://docs.docker.com/ai/model-runner/\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetDockerModelRunner\n    },\n    lemonade: {\n        prettyLabel: \"Lemonade\",\n        docsUrl: \"https://lemonade-server.ai\",\n        mainTask: \"text-generation\",\n        displayOnModelPage: isLlamaCppGgufModel,\n        snippet: snippetLemonade\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/local-apps.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries-snippets.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/model-libraries-snippets.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapters: () => (/* binding */ adapters),\n/* harmony export */   allennlp: () => (/* binding */ allennlp),\n/* harmony export */   anemoi: () => (/* binding */ anemoi),\n/* harmony export */   araclip: () => (/* binding */ araclip),\n/* harmony export */   asteroid: () => (/* binding */ asteroid),\n/* harmony export */   audiocraft: () => (/* binding */ audiocraft),\n/* harmony export */   audioseal: () => (/* binding */ audioseal),\n/* harmony export */   ben2: () => (/* binding */ ben2),\n/* harmony export */   bertopic: () => (/* binding */ bertopic),\n/* harmony export */   birefnet: () => (/* binding */ birefnet),\n/* harmony export */   bm25s: () => (/* binding */ bm25s),\n/* harmony export */   cartesia_mlx: () => (/* binding */ cartesia_mlx),\n/* harmony export */   cartesia_pytorch: () => (/* binding */ cartesia_pytorch),\n/* harmony export */   chatterbox: () => (/* binding */ chatterbox),\n/* harmony export */   chattts: () => (/* binding */ chattts),\n/* harmony export */   contexttab: () => (/* binding */ contexttab),\n/* harmony export */   cxr_foundation: () => (/* binding */ cxr_foundation),\n/* harmony export */   depth_anything_v2: () => (/* binding */ depth_anything_v2),\n/* harmony export */   depth_pro: () => (/* binding */ depth_pro),\n/* harmony export */   derm_foundation: () => (/* binding */ derm_foundation),\n/* harmony export */   describe_anything: () => (/* binding */ describe_anything),\n/* harmony export */   dia: () => (/* binding */ dia),\n/* harmony export */   diffusers: () => (/* binding */ diffusers),\n/* harmony export */   diffusionkit: () => (/* binding */ diffusionkit),\n/* harmony export */   edsnlp: () => (/* binding */ edsnlp),\n/* harmony export */   espnet: () => (/* binding */ espnet),\n/* harmony export */   espnetASR: () => (/* binding */ espnetASR),\n/* harmony export */   espnetTTS: () => (/* binding */ espnetTTS),\n/* harmony export */   fairseq: () => (/* binding */ fairseq),\n/* harmony export */   fastai: () => (/* binding */ fastai),\n/* harmony export */   fasttext: () => (/* binding */ fasttext),\n/* harmony export */   flair: () => (/* binding */ flair),\n/* harmony export */   gliner: () => (/* binding */ gliner),\n/* harmony export */   hezar: () => (/* binding */ hezar),\n/* harmony export */   htrflow: () => (/* binding */ htrflow),\n/* harmony export */   indextts: () => (/* binding */ indextts),\n/* harmony export */   keras: () => (/* binding */ keras),\n/* harmony export */   keras_hub: () => (/* binding */ keras_hub),\n/* harmony export */   kimi_audio: () => (/* binding */ kimi_audio),\n/* harmony export */   lerobot: () => (/* binding */ lerobot),\n/* harmony export */   lightning_ir: () => (/* binding */ lightning_ir),\n/* harmony export */   llama_cpp_python: () => (/* binding */ llama_cpp_python),\n/* harmony export */   lvface: () => (/* binding */ lvface),\n/* harmony export */   mamba_ssm: () => (/* binding */ mamba_ssm),\n/* harmony export */   mars5_tts: () => (/* binding */ mars5_tts),\n/* harmony export */   matanyone: () => (/* binding */ matanyone),\n/* harmony export */   mesh_anything: () => (/* binding */ mesh_anything),\n/* harmony export */   mlAgents: () => (/* binding */ mlAgents),\n/* harmony export */   mlx: () => (/* binding */ mlx),\n/* harmony export */   mlxim: () => (/* binding */ mlxim),\n/* harmony export */   model2vec: () => (/* binding */ model2vec),\n/* harmony export */   nemo: () => (/* binding */ nemo),\n/* harmony export */   open_clip: () => (/* binding */ open_clip),\n/* harmony export */   outetts: () => (/* binding */ outetts),\n/* harmony export */   paddlenlp: () => (/* binding */ paddlenlp),\n/* harmony export */   paddleocr: () => (/* binding */ paddleocr),\n/* harmony export */   peft: () => (/* binding */ peft),\n/* harmony export */   perception_encoder: () => (/* binding */ perception_encoder),\n/* harmony export */   phantom_wan: () => (/* binding */ phantom_wan),\n/* harmony export */   pxia: () => (/* binding */ pxia),\n/* harmony export */   pyannote_audio: () => (/* binding */ pyannote_audio),\n/* harmony export */   pyannote_audio_pipeline: () => (/* binding */ pyannote_audio_pipeline),\n/* harmony export */   pythae: () => (/* binding */ pythae),\n/* harmony export */   relik: () => (/* binding */ relik),\n/* harmony export */   renderformer: () => (/* binding */ renderformer),\n/* harmony export */   saelens: () => (/* binding */ saelens),\n/* harmony export */   sam2: () => (/* binding */ sam2),\n/* harmony export */   sampleFactory: () => (/* binding */ sampleFactory),\n/* harmony export */   sana: () => (/* binding */ sana),\n/* harmony export */   seed_story: () => (/* binding */ seed_story),\n/* harmony export */   sentenceTransformers: () => (/* binding */ sentenceTransformers),\n/* harmony export */   sentis: () => (/* binding */ sentis),\n/* harmony export */   setfit: () => (/* binding */ setfit),\n/* harmony export */   sklearn: () => (/* binding */ sklearn),\n/* harmony export */   spacy: () => (/* binding */ spacy),\n/* harmony export */   span_marker: () => (/* binding */ span_marker),\n/* harmony export */   speechbrain: () => (/* binding */ speechbrain),\n/* harmony export */   stableBaselines3: () => (/* binding */ stableBaselines3),\n/* harmony export */   stable_audio_tools: () => (/* binding */ stable_audio_tools),\n/* harmony export */   stanza: () => (/* binding */ stanza),\n/* harmony export */   swarmformer: () => (/* binding */ swarmformer),\n/* harmony export */   tensorflowtts: () => (/* binding */ tensorflowtts),\n/* harmony export */   terratorch: () => (/* binding */ terratorch),\n/* harmony export */   tf_keras: () => (/* binding */ tf_keras),\n/* harmony export */   threedtopia_xl: () => (/* binding */ threedtopia_xl),\n/* harmony export */   timm: () => (/* binding */ timm),\n/* harmony export */   transformers: () => (/* binding */ transformers),\n/* harmony export */   transformersJS: () => (/* binding */ transformersJS),\n/* harmony export */   ultralytics: () => (/* binding */ ultralytics),\n/* harmony export */   univa: () => (/* binding */ univa),\n/* harmony export */   vfimamba: () => (/* binding */ vfimamba),\n/* harmony export */   videoprism: () => (/* binding */ videoprism),\n/* harmony export */   voicecraft: () => (/* binding */ voicecraft),\n/* harmony export */   vui: () => (/* binding */ vui),\n/* harmony export */   whisperkit: () => (/* binding */ whisperkit),\n/* harmony export */   zonos: () => (/* binding */ zonos)\n/* harmony export */ });\n/* harmony import */ var _library_to_tasks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./library-to-tasks.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/library-to-tasks.js\");\n/* harmony import */ var _snippets_inputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./snippets/inputs.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js\");\n/* harmony import */ var _snippets_common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snippets/common.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/common.js\");\n\n\n\nconst TAG_CUSTOM_CODE = \"custom_code\";\nfunction nameWithoutNamespace(modelId) {\n    const splitted = modelId.split(\"/\");\n    return splitted.length === 1 ? splitted[0] : splitted[1];\n}\nconst escapeStringForJson = (str)=>JSON.stringify(str).slice(1, -1); // slice is needed to remove surrounding quotes added by JSON.stringify\n//#region snippets\nconst adapters = (model)=>[\n        `from adapters import AutoAdapterModel\n\nmodel = AutoAdapterModel.from_pretrained(\"${model.config?.adapter_transformers?.model_name}\")\nmodel.load_adapter(\"${model.id}\", set_active=True)`\n    ];\nconst allennlpUnknown = (model)=>[\n        `import allennlp_models\nfrom allennlp.predictors.predictor import Predictor\n\npredictor = Predictor.from_path(\"hf://${model.id}\")`\n    ];\nconst allennlpQuestionAnswering = (model)=>[\n        `import allennlp_models\nfrom allennlp.predictors.predictor import Predictor\n\npredictor = Predictor.from_path(\"hf://${model.id}\")\npredictor_input = {\"passage\": \"My name is Wolfgang and I live in Berlin\", \"question\": \"Where do I live?\"}\npredictions = predictor.predict_json(predictor_input)`\n    ];\nconst allennlp = (model)=>{\n    if (model.tags.includes(\"question-answering\")) {\n        return allennlpQuestionAnswering(model);\n    }\n    return allennlpUnknown(model);\n};\nconst araclip = (model)=>[\n        `from araclip import AraClip\n\nmodel = AraClip.from_pretrained(\"${model.id}\")`\n    ];\nconst asteroid = (model)=>[\n        `from asteroid.models import BaseModel\n\nmodel = BaseModel.from_pretrained(\"${model.id}\")`\n    ];\nconst audioseal = (model)=>{\n    const watermarkSnippet = `# Watermark Generator\nfrom audioseal import AudioSeal\n\nmodel = AudioSeal.load_generator(\"${model.id}\")\n# pass a tensor (tensor_wav) of shape (batch, channels, samples) and a sample rate\nwav, sr = tensor_wav, 16000\n\t\nwatermark = model.get_watermark(wav, sr)\nwatermarked_audio = wav + watermark`;\n    const detectorSnippet = `# Watermark Detector\nfrom audioseal import AudioSeal\n\ndetector = AudioSeal.load_detector(\"${model.id}\")\n\t\nresult, message = detector.detect_watermark(watermarked_audio, sr)`;\n    return [\n        watermarkSnippet,\n        detectorSnippet\n    ];\n};\nfunction get_base_diffusers_model(model) {\n    return model.cardData?.base_model?.toString() ?? \"fill-in-base-model\";\n}\nfunction get_prompt_from_diffusers_model(model) {\n    const prompt = model.widgetData?.[0]?.text ?? model.cardData?.instance_prompt;\n    if (prompt) {\n        return escapeStringForJson(prompt);\n    }\n}\nconst ben2 = (model)=>[\n        `import requests\nfrom PIL import Image\nfrom ben2 import AutoModel\n\nurl = \"https://huggingface.co/datasets/mishig/sample_images/resolve/main/teapot.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\nmodel = AutoModel.from_pretrained(\"${model.id}\")\nmodel.to(\"cuda\").eval()\nforeground = model.inference(image)\n`\n    ];\nconst bertopic = (model)=>[\n        `from bertopic import BERTopic\n\nmodel = BERTopic.load(\"${model.id}\")`\n    ];\nconst bm25s = (model)=>[\n        `from bm25s.hf import BM25HF\n\nretriever = BM25HF.load_from_hub(\"${model.id}\")`\n    ];\nconst chatterbox = ()=>[\n        `# pip install chatterbox-tts\nimport torchaudio as ta\nfrom chatterbox.tts import ChatterboxTTS\n\nmodel = ChatterboxTTS.from_pretrained(device=\"cuda\")\n\ntext = \"Ezreal and Jinx teamed up with Ahri, Yasuo, and Teemo to take down the enemy's Nexus in an epic late-game pentakill.\"\nwav = model.generate(text)\nta.save(\"test-1.wav\", wav, model.sr)\n\n# If you want to synthesize with a different voice, specify the audio prompt\nAUDIO_PROMPT_PATH=\"YOUR_FILE.wav\"\nwav = model.generate(text, audio_prompt_path=AUDIO_PROMPT_PATH)\nta.save(\"test-2.wav\", wav, model.sr)`\n    ];\nconst contexttab = ()=>{\n    const installSnippet = `pip install git+https://github.com/SAP-samples/contexttab`;\n    const classificationSnippet = `# Run a classification task\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nfrom contexttab import ConTextTabClassifier\n\n# Load sample data\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Initialize a classifier\n# You can omit checkpoint and checkpoint_revision to use the default model\nclf = ConTextTabClassifier(checkpoint=\"l2/base.pt\", checkpoint_revision=\"v1.0.0\", bagging=1, max_context_size=2048)\n\nclf.fit(X_train, y_train)\n\n# Predict probabilities\nprediction_probabilities = clf.predict_proba(X_test)\n# Predict labels\npredictions = clf.predict(X_test)\nprint(\"Accuracy\", accuracy_score(y_test, predictions))`;\n    const regressionsSnippet = `# Run a regression task\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\n\nfrom contexttab import ConTextTabRegressor\n\n\n# Load sample data\ndf = fetch_openml(data_id=531, as_frame=True)\nX = df.data\ny = df.target.astype(float)\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\n# Initialize the regressor\n# You can omit checkpoint and checkpoint_revision to use the default model\nregressor = ConTextTabRegressor(checkpoint=\"l2/base.pt\", checkpoint_revision=\"v1.0.0\", bagging=1, max_context_size=2048)\n\nregressor.fit(X_train, y_train)\n\n# Predict on the test set\npredictions = regressor.predict(X_test)\n\nr2 = r2_score(y_test, predictions)\nprint(\"R² Score:\", r2)`;\n    return [\n        installSnippet,\n        classificationSnippet,\n        regressionsSnippet\n    ];\n};\nconst cxr_foundation = ()=>[\n        `# pip install git+https://github.com/Google-Health/cxr-foundation.git#subdirectory=python\n\n# Load image as grayscale (Stillwaterising, CC0, via Wikimedia Commons)\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimage_url = \"https://upload.wikimedia.org/wikipedia/commons/c/c8/Chest_Xray_PA_3-8-2010.png\"\nimg = Image.open(requests.get(image_url, headers={'User-Agent': 'Demo'}, stream=True).raw).convert('L')\n\n# Run inference\nfrom clientside.clients import make_hugging_face_client\ncxr_client = make_hugging_face_client('cxr_model')\nprint(cxr_client.get_image_embeddings_from_images([img]))`\n    ];\nconst depth_anything_v2 = (model)=>{\n    let encoder;\n    let features;\n    let out_channels;\n    encoder = \"<ENCODER>\";\n    features = \"<NUMBER_OF_FEATURES>\";\n    out_channels = \"<OUT_CHANNELS>\";\n    if (model.id === \"depth-anything/Depth-Anything-V2-Small\") {\n        encoder = \"vits\";\n        features = \"64\";\n        out_channels = \"[48, 96, 192, 384]\";\n    } else if (model.id === \"depth-anything/Depth-Anything-V2-Base\") {\n        encoder = \"vitb\";\n        features = \"128\";\n        out_channels = \"[96, 192, 384, 768]\";\n    } else if (model.id === \"depth-anything/Depth-Anything-V2-Large\") {\n        encoder = \"vitl\";\n        features = \"256\";\n        out_channels = \"[256, 512, 1024, 1024\";\n    }\n    return [\n        `\n# Install from https://github.com/DepthAnything/Depth-Anything-V2\n\n# Load the model and infer depth from an image\nimport cv2\nimport torch\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\n# instantiate the model\nmodel = DepthAnythingV2(encoder=\"${encoder}\", features=${features}, out_channels=${out_channels})\n\n# load the weights\nfilepath = hf_hub_download(repo_id=\"${model.id}\", filename=\"depth_anything_v2_${encoder}.pth\", repo_type=\"model\")\nstate_dict = torch.load(filepath, map_location=\"cpu\")\nmodel.load_state_dict(state_dict).eval()\n\nraw_img = cv2.imread(\"your/image/path\")\ndepth = model.infer_image(raw_img) # HxW raw depth map in numpy\n    `\n    ];\n};\nconst depth_pro = (model)=>{\n    const installSnippet = `# Download checkpoint\npip install huggingface-hub\nhuggingface-cli download --local-dir checkpoints ${model.id}`;\n    const inferenceSnippet = `import depth_pro\n\n# Load model and preprocessing transform\nmodel, transform = depth_pro.create_model_and_transforms()\nmodel.eval()\n\n# Load and preprocess an image.\nimage, _, f_px = depth_pro.load_rgb(\"example.png\")\nimage = transform(image)\n\n# Run inference.\nprediction = model.infer(image, f_px=f_px)\n\n# Results: 1. Depth in meters\ndepth = prediction[\"depth\"]\n# Results: 2. Focal length in pixels\nfocallength_px = prediction[\"focallength_px\"]`;\n    return [\n        installSnippet,\n        inferenceSnippet\n    ];\n};\nconst derm_foundation = ()=>[\n        `from huggingface_hub import from_pretrained_keras\nimport tensorflow as tf, requests\n\n# Load and format input\nIMAGE_URL = \"https://storage.googleapis.com/dx-scin-public-data/dataset/images/3445096909671059178.png\"\ninput_tensor = tf.train.Example(\n    features=tf.train.Features(\n        feature={\n            \"image/encoded\": tf.train.Feature(\n                bytes_list=tf.train.BytesList(value=[requests.get(IMAGE_URL, stream=True).content])\n            )\n        }\n    )\n).SerializeToString()\n\n# Load model and run inference\nloaded_model = from_pretrained_keras(\"google/derm-foundation\")\ninfer = loaded_model.signatures[\"serving_default\"]\nprint(infer(inputs=tf.constant([input_tensor])))`\n    ];\nconst dia = (model)=>[\n        `import soundfile as sf\nfrom dia.model import Dia\n\nmodel = Dia.from_pretrained(\"${model.id}\")\ntext = \"[S1] Dia is an open weights text to dialogue model. [S2] You get full control over scripts and voices. [S1] Wow. Amazing. (laughs) [S2] Try it now on Git hub or Hugging Face.\"\noutput = model.generate(text)\n\nsf.write(\"simple.mp3\", output, 44100)`\n    ];\nconst describe_anything = (model)=>[\n        `# pip install git+https://github.com/NVlabs/describe-anything\nfrom huggingface_hub import snapshot_download\nfrom dam import DescribeAnythingModel\n\nsnapshot_download(${model.id}, local_dir=\"checkpoints\")\n\ndam = DescribeAnythingModel(\n\tmodel_path=\"checkpoints\",\n\tconv_mode=\"v1\",\n\tprompt_mode=\"focal_prompt\",\n)`\n    ];\nconst diffusersDefaultPrompt = \"Astronaut in a jungle, cold color palette, muted colors, detailed, 8k\";\nconst diffusersImg2ImgDefaultPrompt = \"Turn this cat into a dog\";\nconst diffusersVideoDefaultPrompt = \"A man with short gray hair plays a red electric guitar.\";\nconst diffusers_default = (model)=>[\n        `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersDefaultPrompt}\"\nimage = pipe(prompt).images[0]`\n    ];\nconst diffusers_image_to_image = (model)=>[\n        `from diffusers import DiffusionPipeline\nfrom diffusers.utils import load_image\n\npipe = DiffusionPipeline.from_pretrained(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersImg2ImgDefaultPrompt}\"\ninput_image = load_image(\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/cat.png\")\n\nimage = pipe(image=input_image, prompt=prompt).images[0]`\n    ];\nconst diffusers_image_to_video = (model)=>[\n        `import torch\nfrom diffusers import DiffusionPipeline\nfrom diffusers.utils import load_image, export_to_video\n\npipe = DiffusionPipeline.from_pretrained(\"${model.id}\", torch_dtype=torch.float16)\npipe.to(\"cuda\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersVideoDefaultPrompt}\"\nimage = load_image(\n    \"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/guitar-man.png\"\n)\n\noutput = pipe(image=image, prompt=prompt).frames[0]\nexport_to_video(output, \"output.mp4\")`\n    ];\nconst diffusers_controlnet = (model)=>[\n        `from diffusers import ControlNetModel, StableDiffusionControlNetPipeline\n\ncontrolnet = ControlNetModel.from_pretrained(\"${model.id}\")\npipe = StableDiffusionControlNetPipeline.from_pretrained(\n\t\"${get_base_diffusers_model(model)}\", controlnet=controlnet\n)`\n    ];\nconst diffusers_lora = (model)=>[\n        `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_lora_weights(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersDefaultPrompt}\"\nimage = pipe(prompt).images[0]`\n    ];\nconst diffusers_lora_image_to_image = (model)=>[\n        `from diffusers import DiffusionPipeline\nfrom diffusers.utils import load_image\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_lora_weights(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersImg2ImgDefaultPrompt}\"\ninput_image = load_image(\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/cat.png\")\n\nimage = pipe(image=input_image, prompt=prompt).images[0]`\n    ];\nconst diffusers_lora_text_to_video = (model)=>[\n        `from diffusers import DiffusionPipeline\nfrom diffusers.utils import export_to_video\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_lora_weights(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersVideoDefaultPrompt}\"\n\noutput = pipe(prompt=prompt).frames[0]\nexport_to_video(output, \"output.mp4\")`\n    ];\nconst diffusers_lora_image_to_video = (model)=>[\n        `from diffusers import DiffusionPipeline\nfrom diffusers.utils import load_image, export_to_video\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_lora_weights(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersVideoDefaultPrompt}\"\ninput_image = load_image(\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/guitar-man.png\")\n\nimage = pipe(image=input_image, prompt=prompt).frames[0]\nexport_to_video(output, \"output.mp4\")`\n    ];\nconst diffusers_textual_inversion = (model)=>[\n        `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_textual_inversion(\"${model.id}\")`\n    ];\nconst diffusers_flux_fill = (model)=>[\n        `import torch\nfrom diffusers import FluxFillPipeline\nfrom diffusers.utils import load_image\n\nimage = load_image(\"https://huggingface.co/datasets/diffusers/diffusers-images-docs/resolve/main/cup.png\")\nmask = load_image(\"https://huggingface.co/datasets/diffusers/diffusers-images-docs/resolve/main/cup_mask.png\")\n\npipe = FluxFillPipeline.from_pretrained(\"${model.id}\", torch_dtype=torch.bfloat16).to(\"cuda\")\nimage = pipe(\n    prompt=\"a white paper cup\",\n    image=image,\n    mask_image=mask,\n    height=1632,\n    width=1232,\n    guidance_scale=30,\n    num_inference_steps=50,\n    max_sequence_length=512,\n    generator=torch.Generator(\"cpu\").manual_seed(0)\n).images[0]\nimage.save(f\"flux-fill-dev.png\")`\n    ];\nconst diffusers_inpainting = (model)=>[\n        `import torch\nfrom diffusers import AutoPipelineForInpainting\nfrom diffusers.utils import load_image\n\npipe = AutoPipelineForInpainting.from_pretrained(\"${model.id}\", torch_dtype=torch.float16, variant=\"fp16\").to(\"cuda\")\n\nimg_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png\"\nmask_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png\"\n\nimage = load_image(img_url).resize((1024, 1024))\nmask_image = load_image(mask_url).resize((1024, 1024))\n\nprompt = \"a tiger sitting on a park bench\"\ngenerator = torch.Generator(device=\"cuda\").manual_seed(0)\n\nimage = pipe(\n  prompt=prompt,\n  image=image,\n  mask_image=mask_image,\n  guidance_scale=8.0,\n  num_inference_steps=20,  # steps between 15 and 30 work well for us\n  strength=0.99,  # make sure to use \\`strength\\` below 1.0\n  generator=generator,\n).images[0]`\n    ];\nconst diffusers = (model)=>{\n    if (model.tags.includes(\"StableDiffusionInpaintPipeline\") || model.tags.includes(\"StableDiffusionXLInpaintPipeline\")) {\n        return diffusers_inpainting(model);\n    } else if (model.tags.includes(\"controlnet\")) {\n        return diffusers_controlnet(model);\n    } else if (model.tags.includes(\"lora\")) {\n        if (model.pipeline_tag === \"image-to-image\") {\n            return diffusers_lora_image_to_image(model);\n        } else if (model.pipeline_tag === \"image-to-video\") {\n            return diffusers_lora_image_to_video(model);\n        } else if (model.pipeline_tag === \"text-to-video\") {\n            return diffusers_lora_text_to_video(model);\n        } else {\n            return diffusers_lora(model);\n        }\n    } else if (model.tags.includes(\"textual_inversion\")) {\n        return diffusers_textual_inversion(model);\n    } else if (model.tags.includes(\"FluxFillPipeline\")) {\n        return diffusers_flux_fill(model);\n    } else if (model.pipeline_tag === \"image-to-video\") {\n        return diffusers_image_to_video(model);\n    } else if (model.pipeline_tag === \"image-to-image\") {\n        return diffusers_image_to_image(model);\n    } else {\n        return diffusers_default(model);\n    }\n};\nconst diffusionkit = (model)=>{\n    const sd3Snippet = `# Pipeline for Stable Diffusion 3\nfrom diffusionkit.mlx import DiffusionPipeline\n\npipeline = DiffusionPipeline(\n\tshift=3.0,\n\tuse_t5=False,\n\tmodel_version=${model.id},\n\tlow_memory_mode=True,\n\ta16=True,\n\tw16=True,\n)`;\n    const fluxSnippet = `# Pipeline for Flux\nfrom diffusionkit.mlx import FluxPipeline\n\npipeline = FluxPipeline(\n  shift=1.0,\n  model_version=${model.id},\n  low_memory_mode=True,\n  a16=True,\n  w16=True,\n)`;\n    const generateSnippet = `# Image Generation\nHEIGHT = 512\nWIDTH = 512\nNUM_STEPS = ${model.tags.includes(\"flux\") ? 4 : 50}\nCFG_WEIGHT = ${model.tags.includes(\"flux\") ? 0 : 5}\n\nimage, _ = pipeline.generate_image(\n  \"a photo of a cat\",\n  cfg_weight=CFG_WEIGHT,\n  num_steps=NUM_STEPS,\n  latent_size=(HEIGHT // 8, WIDTH // 8),\n)`;\n    const pipelineSnippet = model.tags.includes(\"flux\") ? fluxSnippet : sd3Snippet;\n    return [\n        pipelineSnippet,\n        generateSnippet\n    ];\n};\nconst cartesia_pytorch = (model)=>[\n        `# pip install --no-binary :all: cartesia-pytorch\nfrom cartesia_pytorch import ReneLMHeadModel\nfrom transformers import AutoTokenizer\n\nmodel = ReneLMHeadModel.from_pretrained(\"${model.id}\")\ntokenizer = AutoTokenizer.from_pretrained(\"allenai/OLMo-1B-hf\")\n\nin_message = [\"Rene Descartes was\"]\ninputs = tokenizer(in_message, return_tensors=\"pt\")\n\noutputs = model.generate(inputs.input_ids, max_length=50, top_k=100, top_p=0.99)\nout_message = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]\n\nprint(out_message)\n)`\n    ];\nconst cartesia_mlx = (model)=>[\n        `import mlx.core as mx\nimport cartesia_mlx as cmx\n\nmodel = cmx.from_pretrained(\"${model.id}\")\nmodel.set_dtype(mx.float32)   \n\nprompt = \"Rene Descartes was\"\n\nfor text in model.generate(\n    prompt,\n    max_tokens=500,\n    eval_every_n=5,\n    verbose=True,\n    top_p=0.99,\n    temperature=0.85,\n):\n    print(text, end=\"\", flush=True)\n`\n    ];\nconst edsnlp = (model)=>{\n    const packageName = nameWithoutNamespace(model.id).replaceAll(\"-\", \"_\");\n    return [\n        `# Load it from the Hub directly\nimport edsnlp\nnlp = edsnlp.load(\"${model.id}\")\n`,\n        `# Or install it as a package\n!pip install git+https://huggingface.co/${model.id}\n\n# and import it as a module\nimport ${packageName}\n\nnlp = ${packageName}.load()  # or edsnlp.load(\"${packageName}\")\n`\n    ];\n};\nconst espnetTTS = (model)=>[\n        `from espnet2.bin.tts_inference import Text2Speech\n\nmodel = Text2Speech.from_pretrained(\"${model.id}\")\n\nspeech, *_ = model(\"text to generate speech from\")`\n    ];\nconst espnetASR = (model)=>[\n        `from espnet2.bin.asr_inference import Speech2Text\n\nmodel = Speech2Text.from_pretrained(\n  \"${model.id}\"\n)\n\nspeech, rate = soundfile.read(\"speech.wav\")\ntext, *_ = model(speech)[0]`\n    ];\nconst espnetUnknown = ()=>[\n        `unknown model type (must be text-to-speech or automatic-speech-recognition)`\n    ];\nconst espnet = (model)=>{\n    if (model.tags.includes(\"text-to-speech\")) {\n        return espnetTTS(model);\n    } else if (model.tags.includes(\"automatic-speech-recognition\")) {\n        return espnetASR(model);\n    }\n    return espnetUnknown();\n};\nconst fairseq = (model)=>[\n        `from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\n\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\n    \"${model.id}\"\n)`\n    ];\nconst flair = (model)=>[\n        `from flair.models import SequenceTagger\n\ntagger = SequenceTagger.load(\"${model.id}\")`\n    ];\nconst gliner = (model)=>[\n        `from gliner import GLiNER\n\nmodel = GLiNER.from_pretrained(\"${model.id}\")`\n    ];\nconst indextts = (model)=>[\n        `# Download model\nfrom huggingface_hub import snapshot_download\n\nsnapshot_download(${model.id}, local_dir=\"checkpoints\")\n\nfrom indextts.infer import IndexTTS\n\n# Ensure config.yaml is present in the checkpoints directory\ntts = IndexTTS(model_dir=\"checkpoints\", cfg_path=\"checkpoints/config.yaml\")\n\nvoice = \"path/to/your/reference_voice.wav\"  # Path to the voice reference audio file\ntext = \"Hello, how are you?\"\noutput_path = \"output_index.wav\"\n\ntts.infer(voice, text, output_path)`\n    ];\nconst htrflow = (model)=>[\n        `# CLI usage\n# see docs: https://ai-riksarkivet.github.io/htrflow/latest/getting_started/quick_start.html\nhtrflow pipeline <path/to/pipeline.yaml> <path/to/image>`,\n        `# Python usage\nfrom htrflow.pipeline.pipeline import Pipeline\nfrom htrflow.pipeline.steps import Task\nfrom htrflow.models.framework.model import ModelClass\n\npipeline = Pipeline(\n    [\n        Task(\n            ModelClass, {\"model\": \"${model.id}\"}, {}\n        ),\n    ])`\n    ];\nconst keras = (model)=>[\n        `# Available backend options are: \"jax\", \"torch\", \"tensorflow\".\nimport os\nos.environ[\"KERAS_BACKEND\"] = \"jax\"\n\t\nimport keras\n\nmodel = keras.saving.load_model(\"hf://${model.id}\")\n`\n    ];\nconst _keras_hub_causal_lm = (modelId)=>`\nimport keras_hub\n\n# Load CausalLM model (optional: use half precision for inference)\ncausal_lm = keras_hub.models.CausalLM.from_preset(\"hf://${modelId}\", dtype=\"bfloat16\")\ncausal_lm.compile(sampler=\"greedy\")  # (optional) specify a sampler\n\n# Generate text\ncausal_lm.generate(\"Keras: deep learning for\", max_length=64)\n`;\nconst _keras_hub_text_to_image = (modelId)=>`\nimport keras_hub\n\n# Load TextToImage model (optional: use half precision for inference)\ntext_to_image = keras_hub.models.TextToImage.from_preset(\"hf://${modelId}\", dtype=\"bfloat16\")\n\n# Generate images with a TextToImage model.\ntext_to_image.generate(\"Astronaut in a jungle\")\n`;\nconst _keras_hub_text_classifier = (modelId)=>`\nimport keras_hub\n\n# Load TextClassifier model\ntext_classifier = keras_hub.models.TextClassifier.from_preset(\n    \"hf://${modelId}\",\n    num_classes=2,\n)\n# Fine-tune\ntext_classifier.fit(x=[\"Thilling adventure!\", \"Total snoozefest.\"], y=[1, 0])\n# Classify text\ntext_classifier.predict([\"Not my cup of tea.\"])\n`;\nconst _keras_hub_image_classifier = (modelId)=>`\nimport keras_hub\nimport keras\n\n# Load ImageClassifier model\nimage_classifier = keras_hub.models.ImageClassifier.from_preset(\n    \"hf://${modelId}\",\n    num_classes=2,\n)\n# Fine-tune\nimage_classifier.fit(\n    x=keras.random.randint((32, 64, 64, 3), 0, 256),\n    y=keras.random.randint((32, 1), 0, 2),\n)\n# Classify image\nimage_classifier.predict(keras.random.randint((1, 64, 64, 3), 0, 256))\n`;\nconst _keras_hub_tasks_with_example = {\n    CausalLM: _keras_hub_causal_lm,\n    TextToImage: _keras_hub_text_to_image,\n    TextClassifier: _keras_hub_text_classifier,\n    ImageClassifier: _keras_hub_image_classifier\n};\nconst _keras_hub_task_without_example = (task, modelId)=>`\nimport keras_hub\n\n# Create a ${task} model\ntask = keras_hub.models.${task}.from_preset(\"hf://${modelId}\")\n`;\nconst _keras_hub_generic_backbone = (modelId)=>`\nimport keras_hub\n\n# Create a Backbone model unspecialized for any task\nbackbone = keras_hub.models.Backbone.from_preset(\"hf://${modelId}\")\n`;\nconst keras_hub = (model)=>{\n    const modelId = model.id;\n    const tasks = model.config?.keras_hub?.tasks ?? [];\n    const snippets = [];\n    // First, generate tasks with examples\n    for (const [task, snippet] of Object.entries(_keras_hub_tasks_with_example)){\n        if (tasks.includes(task)) {\n            snippets.push(snippet(modelId));\n        }\n    }\n    // Then, add remaining tasks\n    for (const task of tasks){\n        if (!Object.keys(_keras_hub_tasks_with_example).includes(task)) {\n            snippets.push(_keras_hub_task_without_example(task, modelId));\n        }\n    }\n    // Finally, add generic backbone snippet\n    snippets.push(_keras_hub_generic_backbone(modelId));\n    return snippets;\n};\nconst kimi_audio = (model)=>[\n        `# Example usage for KimiAudio\n# pip install git+https://github.com/MoonshotAI/Kimi-Audio.git\n\nfrom kimia_infer.api.kimia import KimiAudio\n\nmodel = KimiAudio(model_path=\"${model.id}\", load_detokenizer=True)\n\nsampling_params = {\n    \"audio_temperature\": 0.8,\n    \"audio_top_k\": 10,\n    \"text_temperature\": 0.0,\n    \"text_top_k\": 5,\n}\n\n# For ASR\nasr_audio = \"asr_example.wav\"\nmessages_asr = [\n    {\"role\": \"user\", \"message_type\": \"text\", \"content\": \"Please transcribe the following audio:\"},\n    {\"role\": \"user\", \"message_type\": \"audio\", \"content\": asr_audio}\n]\n_, text = model.generate(messages_asr, **sampling_params, output_type=\"text\")\nprint(text)\n\n# For Q&A\nqa_audio = \"qa_example.wav\"\nmessages_conv = [{\"role\": \"user\", \"message_type\": \"audio\", \"content\": qa_audio}]\nwav, text = model.generate(messages_conv, **sampling_params, output_type=\"both\")\nsf.write(\"output_audio.wav\", wav.cpu().view(-1).numpy(), 24000)\nprint(text)\n`\n    ];\nconst lightning_ir = (model)=>{\n    if (model.tags.includes(\"bi-encoder\")) {\n        return [\n            `#install from https://github.com/webis-de/lightning-ir\n\nfrom lightning_ir import BiEncoderModule\nmodel = BiEncoderModule(\"${model.id}\")\n\nmodel.score(\"query\", [\"doc1\", \"doc2\", \"doc3\"])`\n        ];\n    } else if (model.tags.includes(\"cross-encoder\")) {\n        return [\n            `#install from https://github.com/webis-de/lightning-ir\n\nfrom lightning_ir import CrossEncoderModule\nmodel = CrossEncoderModule(\"${model.id}\")\n\nmodel.score(\"query\", [\"doc1\", \"doc2\", \"doc3\"])`\n        ];\n    }\n    return [\n        `#install from https://github.com/webis-de/lightning-ir\n\nfrom lightning_ir import BiEncoderModule, CrossEncoderModule\n\n# depending on the model type, use either BiEncoderModule or CrossEncoderModule\nmodel = BiEncoderModule(\"${model.id}\") \n# model = CrossEncoderModule(\"${model.id}\")\n\nmodel.score(\"query\", [\"doc1\", \"doc2\", \"doc3\"])`\n    ];\n};\nconst llama_cpp_python = (model)=>{\n    const snippets = [\n        `# !pip install llama-cpp-python\n\nfrom llama_cpp import Llama\n\nllm = Llama.from_pretrained(\n\trepo_id=\"${model.id}\",\n\tfilename=\"{{GGUF_FILE}}\",\n)\n`\n    ];\n    if (model.tags.includes(\"conversational\")) {\n        const messages = (0,_snippets_inputs_js__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet)(model);\n        snippets.push(`llm.create_chat_completion(\n\tmessages = ${(0,_snippets_common_js__WEBPACK_IMPORTED_MODULE_2__.stringifyMessages)(messages, {\n            attributeKeyQuotes: true,\n            indent: \"\t\"\n        })}\n)`);\n    } else {\n        snippets.push(`output = llm(\n\t\"Once upon a time,\",\n\tmax_tokens=512,\n\techo=True\n)\nprint(output)`);\n    }\n    return snippets;\n};\nconst lerobot = (model)=>{\n    if (model.tags.includes(\"smolvla\")) {\n        const smolvlaSnippets = [\n            // Installation snippet\n            `# See https://github.com/huggingface/lerobot?tab=readme-ov-file#installation for more details\ngit clone https://github.com/huggingface/lerobot.git\ncd lerobot\npip install -e .[smolvla]`,\n            // Finetune snippet\n            `# Launch finetuning on your dataset\npython lerobot/scripts/train.py \\\\\n--policy.path=${model.id} \\\\\n--dataset.repo_id=lerobot/svla_so101_pickplace \\\\ \n--batch_size=64 \\\\\n--steps=20000 \\\\\n--output_dir=outputs/train/my_smolvla \\\\\n--job_name=my_smolvla_training \\\\\n--policy.device=cuda \\\\\n--wandb.enable=true`\n        ];\n        if (model.id !== \"lerobot/smolvla_base\") {\n            // Inference snippet (only if not base model)\n            smolvlaSnippets.push(`# Run the policy using the record function\t\npython -m lerobot.record \\\\\n  --robot.type=so101_follower \\\\\n  --robot.port=/dev/ttyACM0 \\\\ # <- Use your port\n  --robot.id=my_blue_follower_arm \\\\ # <- Use your robot id\n  --robot.cameras=\"{ front: {type: opencv, index_or_path: 8, width: 640, height: 480, fps: 30}}\" \\\\ # <- Use your cameras\n  --dataset.single_task=\"Grasp a lego block and put it in the bin.\" \\\\ # <- Use the same task description you used in your dataset recording\n  --dataset.repo_id=HF_USER/dataset_name \\\\  # <- This will be the dataset name on HF Hub\n  --dataset.episode_time_s=50 \\\\\n  --dataset.num_episodes=10 \\\\\n  --policy.path=${model.id}`);\n        }\n        return smolvlaSnippets;\n    }\n    return [];\n};\nconst tf_keras = (model)=>[\n        `# Note: 'keras<3.x' or 'tf_keras' must be installed (legacy)\n# See https://github.com/keras-team/tf-keras for more details.\nfrom huggingface_hub import from_pretrained_keras\n\nmodel = from_pretrained_keras(\"${model.id}\")\n`\n    ];\nconst mamba_ssm = (model)=>[\n        `from mamba_ssm import MambaLMHeadModel\n\nmodel = MambaLMHeadModel.from_pretrained(\"${model.id}\")`\n    ];\nconst mars5_tts = (model)=>[\n        `# Install from https://github.com/Camb-ai/MARS5-TTS\n\nfrom inference import Mars5TTS\nmars5 = Mars5TTS.from_pretrained(\"${model.id}\")`\n    ];\nconst matanyone = (model)=>[\n        `# Install from https://github.com/pq-yang/MatAnyone.git\n\nfrom matanyone.model.matanyone import MatAnyone\nmodel = MatAnyone.from_pretrained(\"${model.id}\")`,\n        `\nfrom matanyone import InferenceCore\nprocessor = InferenceCore(\"${model.id}\")`\n    ];\nconst mesh_anything = ()=>[\n        `# Install from https://github.com/buaacyw/MeshAnything.git\n\nfrom MeshAnything.models.meshanything import MeshAnything\n\n# refer to https://github.com/buaacyw/MeshAnything/blob/main/main.py#L91 on how to define args\n# and https://github.com/buaacyw/MeshAnything/blob/main/app.py regarding usage\nmodel = MeshAnything(args)`\n    ];\nconst open_clip = (model)=>[\n        `import open_clip\n\nmodel, preprocess_train, preprocess_val = open_clip.create_model_and_transforms('hf-hub:${model.id}')\ntokenizer = open_clip.get_tokenizer('hf-hub:${model.id}')`\n    ];\nconst paddlenlp = (model)=>{\n    if (model.config?.architectures?.[0]) {\n        const architecture = model.config.architectures[0];\n        return [\n            [\n                `from paddlenlp.transformers import AutoTokenizer, ${architecture}`,\n                \"\",\n                `tokenizer = AutoTokenizer.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n                `model = ${architecture}.from_pretrained(\"${model.id}\", from_hf_hub=True)`\n            ].join(\"\\n\")\n        ];\n    } else {\n        return [\n            [\n                `# ⚠️ Type of model unknown`,\n                `from paddlenlp.transformers import AutoTokenizer, AutoModel`,\n                \"\",\n                `tokenizer = AutoTokenizer.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n                `model = AutoModel.from_pretrained(\"${model.id}\", from_hf_hub=True)`\n            ].join(\"\\n\")\n        ];\n    }\n};\nconst paddleocr = (model)=>{\n    const mapping = {\n        textline_detection: {\n            className: \"TextDetection\"\n        },\n        textline_recognition: {\n            className: \"TextRecognition\"\n        },\n        seal_text_detection: {\n            className: \"SealTextDetection\"\n        },\n        doc_img_unwarping: {\n            className: \"TextImageUnwarping\"\n        },\n        doc_img_orientation_classification: {\n            className: \"DocImgOrientationClassification\"\n        },\n        textline_orientation_classification: {\n            className: \"TextLineOrientationClassification\"\n        },\n        chart_parsing: {\n            className: \"ChartParsing\"\n        },\n        formula_recognition: {\n            className: \"FormulaRecognition\"\n        },\n        layout_detection: {\n            className: \"LayoutDetection\"\n        },\n        table_cells_detection: {\n            className: \"TableCellsDetection\"\n        },\n        wired_table_classification: {\n            className: \"TableClassification\"\n        },\n        table_structure_recognition: {\n            className: \"TableStructureRecognition\"\n        }\n    };\n    if (model.tags.includes(\"doc_vlm\")) {\n        return [\n            `# pip install paddleocr\nfrom paddleocr import DocVLM\nmodel = DocVLM(model_name=\"${nameWithoutNamespace(model.id)}\")\noutput = model.predict(\n    input={\"image\": \"path/to/image.png\", \"query\": \"Parsing this image and output the content in Markdown format.\"},\n    batch_size=1\n)\nfor res in output:\n    res.print()\n    res.save_to_img(save_path=\"./output/\")\n    res.save_to_json(save_path=\"./output/res.json\")`\n        ];\n    }\n    for (const tag of model.tags){\n        if (tag in mapping) {\n            const { className } = mapping[tag];\n            return [\n                `# pip install paddleocr\nfrom paddleocr import ${className}\nmodel = ${className}(model_name=\"${nameWithoutNamespace(model.id)}\")\noutput = model.predict(input=\"path/to/image.png\", batch_size=1)\nfor res in output:\n    res.print()\n    res.save_to_img(save_path=\"./output/\")\n    res.save_to_json(save_path=\"./output/res.json\")`\n            ];\n        }\n    }\n    return [\n        `# Please refer to the document for information on how to use the model. \n# https://paddlepaddle.github.io/PaddleOCR/latest/en/version3.x/module_usage/module_overview.html`\n    ];\n};\nconst perception_encoder = (model)=>{\n    const clip_model = `# Use PE-Core models as CLIP models\nimport core.vision_encoder.pe as pe\n\nmodel = pe.CLIP.from_config(\"${model.id}\", pretrained=True)`;\n    const vision_encoder = `# Use any PE model as a vision encoder\nimport core.vision_encoder.pe as pe\n\nmodel = pe.VisionTransformer.from_config(\"${model.id}\", pretrained=True)`;\n    if (model.id.includes(\"Core\")) {\n        return [\n            clip_model,\n            vision_encoder\n        ];\n    } else {\n        return [\n            vision_encoder\n        ];\n    }\n};\nconst phantom_wan = (model)=>[\n        `from huggingface_hub import snapshot_download\nfrom phantom_wan import WANI2V, configs\n\ncheckpoint_dir = snapshot_download(\"${model.id}\")\nwan_i2v = WanI2V(\n            config=configs.WAN_CONFIGS['i2v-14B'],\n            checkpoint_dir=checkpoint_dir,\n        )\n video = wan_i2v.generate(text_prompt, image_prompt)`\n    ];\nconst pyannote_audio_pipeline = (model)=>[\n        `from pyannote.audio import Pipeline\n  \npipeline = Pipeline.from_pretrained(\"${model.id}\")\n\n# inference on the whole file\npipeline(\"file.wav\")\n\n# inference on an excerpt\nfrom pyannote.core import Segment\nexcerpt = Segment(start=2.0, end=5.0)\n\nfrom pyannote.audio import Audio\nwaveform, sample_rate = Audio().crop(\"file.wav\", excerpt)\npipeline({\"waveform\": waveform, \"sample_rate\": sample_rate})`\n    ];\nconst pyannote_audio_model = (model)=>[\n        `from pyannote.audio import Model, Inference\n\nmodel = Model.from_pretrained(\"${model.id}\")\ninference = Inference(model)\n\n# inference on the whole file\ninference(\"file.wav\")\n\n# inference on an excerpt\nfrom pyannote.core import Segment\nexcerpt = Segment(start=2.0, end=5.0)\ninference.crop(\"file.wav\", excerpt)`\n    ];\nconst pyannote_audio = (model)=>{\n    if (model.tags.includes(\"pyannote-audio-pipeline\")) {\n        return pyannote_audio_pipeline(model);\n    }\n    return pyannote_audio_model(model);\n};\nconst relik = (model)=>[\n        `from relik import Relik\n \nrelik = Relik.from_pretrained(\"${model.id}\")`\n    ];\nconst renderformer = (model)=>[\n        `# Install from https://github.com/microsoft/renderformer\n\nfrom renderformer import RenderFormerRenderingPipeline\npipeline = RenderFormerRenderingPipeline.from_pretrained(\"${model.id}\")`\n    ];\nconst tensorflowttsTextToMel = (model)=>[\n        `from tensorflow_tts.inference import AutoProcessor, TFAutoModel\n\nprocessor = AutoProcessor.from_pretrained(\"${model.id}\")\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\n`\n    ];\nconst tensorflowttsMelToWav = (model)=>[\n        `from tensorflow_tts.inference import TFAutoModel\n\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\naudios = model.inference(mels)\n`\n    ];\nconst tensorflowttsUnknown = (model)=>[\n        `from tensorflow_tts.inference import TFAutoModel\n\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\n`\n    ];\nconst tensorflowtts = (model)=>{\n    if (model.tags.includes(\"text-to-mel\")) {\n        return tensorflowttsTextToMel(model);\n    } else if (model.tags.includes(\"mel-to-wav\")) {\n        return tensorflowttsMelToWav(model);\n    }\n    return tensorflowttsUnknown(model);\n};\nconst timm = (model)=>[\n        `import timm\n\nmodel = timm.create_model(\"hf_hub:${model.id}\", pretrained=True)`\n    ];\nconst saelens = ()=>[\n        `# pip install sae-lens\nfrom sae_lens import SAE\n\nsae, cfg_dict, sparsity = SAE.from_pretrained(\n    release = \"RELEASE_ID\", # e.g., \"gpt2-small-res-jb\". See other options in https://github.com/jbloomAus/SAELens/blob/main/sae_lens/pretrained_saes.yaml\n    sae_id = \"SAE_ID\", # e.g., \"blocks.8.hook_resid_pre\". Won't always be a hook point\n)`\n    ];\nconst seed_story = ()=>[\n        `# seed_story_cfg_path refers to 'https://github.com/TencentARC/SEED-Story/blob/master/configs/clm_models/agent_7b_sft.yaml'\n# llm_cfg_path refers to 'https://github.com/TencentARC/SEED-Story/blob/master/configs/clm_models/llama2chat7b_lora.yaml'\nfrom omegaconf import OmegaConf\nimport hydra\n\n# load Llama2\nllm_cfg = OmegaConf.load(llm_cfg_path)\nllm = hydra.utils.instantiate(llm_cfg, torch_dtype=\"fp16\")\n\n# initialize seed_story\nseed_story_cfg = OmegaConf.load(seed_story_cfg_path)\nseed_story = hydra.utils.instantiate(seed_story_cfg, llm=llm) `\n    ];\nconst skopsPickle = (model, modelFile)=>{\n    return [\n        `import joblib\nfrom skops.hub_utils import download\ndownload(\"${model.id}\", \"path_to_folder\")\nmodel = joblib.load(\n\t\"${modelFile}\"\n)\n# only load pickle files from sources you trust\n# read more about it here https://skops.readthedocs.io/en/stable/persistence.html`\n    ];\n};\nconst skopsFormat = (model, modelFile)=>{\n    return [\n        `from skops.hub_utils import download\nfrom skops.io import load\ndownload(\"${model.id}\", \"path_to_folder\")\n# make sure model file is in skops format\n# if model is a pickle file, make sure it's from a source you trust\nmodel = load(\"path_to_folder/${modelFile}\")`\n    ];\n};\nconst skopsJobLib = (model)=>{\n    return [\n        `from huggingface_hub import hf_hub_download\nimport joblib\nmodel = joblib.load(\n\thf_hub_download(\"${model.id}\", \"sklearn_model.joblib\")\n)\n# only load pickle files from sources you trust\n# read more about it here https://skops.readthedocs.io/en/stable/persistence.html`\n    ];\n};\nconst sklearn = (model)=>{\n    if (model.tags.includes(\"skops\")) {\n        const skopsmodelFile = model.config?.sklearn?.model?.file;\n        const skopssaveFormat = model.config?.sklearn?.model_format;\n        if (!skopsmodelFile) {\n            return [\n                `# ⚠️ Model filename not specified in config.json`\n            ];\n        }\n        if (skopssaveFormat === \"pickle\") {\n            return skopsPickle(model, skopsmodelFile);\n        } else {\n            return skopsFormat(model, skopsmodelFile);\n        }\n    } else {\n        return skopsJobLib(model);\n    }\n};\nconst stable_audio_tools = (model)=>[\n        `import torch\nimport torchaudio\nfrom einops import rearrange\nfrom stable_audio_tools import get_pretrained_model\nfrom stable_audio_tools.inference.generation import generate_diffusion_cond\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# Download model\nmodel, model_config = get_pretrained_model(\"${model.id}\")\nsample_rate = model_config[\"sample_rate\"]\nsample_size = model_config[\"sample_size\"]\n\nmodel = model.to(device)\n\n# Set up text and timing conditioning\nconditioning = [{\n\t\"prompt\": \"128 BPM tech house drum loop\",\n}]\n\n# Generate stereo audio\noutput = generate_diffusion_cond(\n\tmodel,\n\tconditioning=conditioning,\n\tsample_size=sample_size,\n\tdevice=device\n)\n\n# Rearrange audio batch to a single sequence\noutput = rearrange(output, \"b d n -> d (b n)\")\n\n# Peak normalize, clip, convert to int16, and save to file\noutput = output.to(torch.float32).div(torch.max(torch.abs(output))).clamp(-1, 1).mul(32767).to(torch.int16).cpu()\ntorchaudio.save(\"output.wav\", output, sample_rate)`\n    ];\nconst fastai = (model)=>[\n        `from huggingface_hub import from_pretrained_fastai\n\nlearn = from_pretrained_fastai(\"${model.id}\")`\n    ];\nconst sam2 = (model)=>{\n    const image_predictor = `# Use SAM2 with images\nimport torch\nfrom sam2.sam2_image_predictor import SAM2ImagePredictor\n\npredictor = SAM2ImagePredictor.from_pretrained(${model.id})\n\nwith torch.inference_mode(), torch.autocast(\"cuda\", dtype=torch.bfloat16):\n    predictor.set_image(<your_image>)\n    masks, _, _ = predictor.predict(<input_prompts>)`;\n    const video_predictor = `# Use SAM2 with videos\nimport torch\nfrom sam2.sam2_video_predictor import SAM2VideoPredictor\n\t\npredictor = SAM2VideoPredictor.from_pretrained(${model.id})\n\nwith torch.inference_mode(), torch.autocast(\"cuda\", dtype=torch.bfloat16):\n    state = predictor.init_state(<your_video>)\n\n    # add new prompts and instantly get the output on the same frame\n    frame_idx, object_ids, masks = predictor.add_new_points(state, <your_prompts>):\n\n    # propagate the prompts to get masklets throughout the video\n    for frame_idx, object_ids, masks in predictor.propagate_in_video(state):\n        ...`;\n    return [\n        image_predictor,\n        video_predictor\n    ];\n};\nconst sampleFactory = (model)=>[\n        `python -m sample_factory.huggingface.load_from_hub -r ${model.id} -d ./train_dir`\n    ];\nfunction get_widget_examples_from_st_model(model) {\n    const widgetExample = model.widgetData?.[0];\n    if (widgetExample?.source_sentence && widgetExample?.sentences?.length) {\n        return [\n            widgetExample.source_sentence,\n            ...widgetExample.sentences\n        ];\n    }\n}\nconst sentenceTransformers = (model)=>{\n    const remote_code_snippet = model.tags.includes(TAG_CUSTOM_CODE) ? \", trust_remote_code=True\" : \"\";\n    if (model.tags.includes(\"cross-encoder\") || model.pipeline_tag == \"text-ranking\") {\n        return [\n            `from sentence_transformers import CrossEncoder\n\nmodel = CrossEncoder(\"${model.id}\"${remote_code_snippet})\n\nquery = \"Which planet is known as the Red Planet?\"\npassages = [\n\t\"Venus is often called Earth's twin because of its similar size and proximity.\",\n\t\"Mars, known for its reddish appearance, is often referred to as the Red Planet.\",\n\t\"Jupiter, the largest planet in our solar system, has a prominent red spot.\",\n\t\"Saturn, famous for its rings, is sometimes mistaken for the Red Planet.\"\n]\n\nscores = model.predict([(query, passage) for passage in passages])\nprint(scores)`\n        ];\n    }\n    const exampleSentences = get_widget_examples_from_st_model(model) ?? [\n        \"The weather is lovely today.\",\n        \"It's so sunny outside!\",\n        \"He drove to the stadium.\"\n    ];\n    return [\n        `from sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer(\"${model.id}\"${remote_code_snippet})\n\nsentences = ${JSON.stringify(exampleSentences, null, 4)}\nembeddings = model.encode(sentences)\n\nsimilarities = model.similarity(embeddings, embeddings)\nprint(similarities.shape)\n# [${exampleSentences.length}, ${exampleSentences.length}]`\n    ];\n};\nconst setfit = (model)=>[\n        `from setfit import SetFitModel\n\nmodel = SetFitModel.from_pretrained(\"${model.id}\")`\n    ];\nconst spacy = (model)=>[\n        `!pip install https://huggingface.co/${model.id}/resolve/main/${nameWithoutNamespace(model.id)}-any-py3-none-any.whl\n\n# Using spacy.load().\nimport spacy\nnlp = spacy.load(\"${nameWithoutNamespace(model.id)}\")\n\n# Importing as module.\nimport ${nameWithoutNamespace(model.id)}\nnlp = ${nameWithoutNamespace(model.id)}.load()`\n    ];\nconst span_marker = (model)=>[\n        `from span_marker import SpanMarkerModel\n\nmodel = SpanMarkerModel.from_pretrained(\"${model.id}\")`\n    ];\nconst stanza = (model)=>[\n        `import stanza\n\nstanza.download(\"${nameWithoutNamespace(model.id).replace(\"stanza-\", \"\")}\")\nnlp = stanza.Pipeline(\"${nameWithoutNamespace(model.id).replace(\"stanza-\", \"\")}\")`\n    ];\nconst speechBrainMethod = (speechbrainInterface)=>{\n    switch(speechbrainInterface){\n        case \"EncoderClassifier\":\n            return \"classify_file\";\n        case \"EncoderDecoderASR\":\n        case \"EncoderASR\":\n            return \"transcribe_file\";\n        case \"SpectralMaskEnhancement\":\n            return \"enhance_file\";\n        case \"SepformerSeparation\":\n            return \"separate_file\";\n        default:\n            return undefined;\n    }\n};\nconst speechbrain = (model)=>{\n    const speechbrainInterface = model.config?.speechbrain?.speechbrain_interface;\n    if (speechbrainInterface === undefined) {\n        return [\n            `# interface not specified in config.json`\n        ];\n    }\n    const speechbrainMethod = speechBrainMethod(speechbrainInterface);\n    if (speechbrainMethod === undefined) {\n        return [\n            `# interface in config.json invalid`\n        ];\n    }\n    return [\n        `from speechbrain.pretrained import ${speechbrainInterface}\nmodel = ${speechbrainInterface}.from_hparams(\n  \"${model.id}\"\n)\nmodel.${speechbrainMethod}(\"file.wav\")`\n    ];\n};\nconst terratorch = (model)=>[\n        `from terratorch.registry import BACKBONE_REGISTRY\n\nmodel = BACKBONE_REGISTRY.build(\"${model.id}\")`\n    ];\nconst transformers = (model)=>{\n    const info = model.transformersInfo;\n    if (!info) {\n        return [\n            `# ⚠️ Type of model unknown`\n        ];\n    }\n    const remote_code_snippet = model.tags.includes(TAG_CUSTOM_CODE) ? \", trust_remote_code=True\" : \"\";\n    const autoSnippet = [];\n    if (info.processor) {\n        const processorVarName = info.processor === \"AutoTokenizer\" ? \"tokenizer\" : info.processor === \"AutoFeatureExtractor\" ? \"extractor\" : \"processor\";\n        autoSnippet.push(\"# Load model directly\", `from transformers import ${info.processor}, ${info.auto_model}`, \"\", `${processorVarName} = ${info.processor}.from_pretrained(\"${model.id}\"` + remote_code_snippet + \")\", `model = ${info.auto_model}.from_pretrained(\"${model.id}\"` + remote_code_snippet + \")\");\n        if (model.tags.includes(\"conversational\")) {\n            if (model.tags.includes(\"image-text-to-text\")) {\n                autoSnippet.push(\"messages = [\", [\n                    \"    {\",\n                    '        \"role\": \"user\",',\n                    '        \"content\": [',\n                    '            {\"type\": \"image\", \"url\": \"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/p-blog/candy.JPG\"},',\n                    '            {\"type\": \"text\", \"text\": \"What animal is on the candy?\"}',\n                    \"        ]\",\n                    \"    },\"\n                ].join(\"\\n\"), \"]\");\n            } else {\n                autoSnippet.push(\"messages = [\", '    {\"role\": \"user\", \"content\": \"Who are you?\"},', \"]\");\n            }\n            autoSnippet.push(`inputs = ${processorVarName}.apply_chat_template(`, \"\tmessages,\", \"\tadd_generation_prompt=True,\", \"\ttokenize=True,\", \"\treturn_dict=True,\", '\treturn_tensors=\"pt\",', \").to(model.device)\", \"\", \"outputs = model.generate(**inputs, max_new_tokens=40)\", `print(${processorVarName}.decode(outputs[0][inputs[\"input_ids\"].shape[-1]:]))`);\n        }\n    } else {\n        autoSnippet.push(\"# Load model directly\", `from transformers import ${info.auto_model}`, `model = ${info.auto_model}.from_pretrained(\"${model.id}\"` + remote_code_snippet + ', torch_dtype=\"auto\")');\n    }\n    if (model.pipeline_tag && _library_to_tasks_js__WEBPACK_IMPORTED_MODULE_0__.LIBRARY_TASK_MAPPING.transformers?.includes(model.pipeline_tag)) {\n        const pipelineSnippet = [\n            \"# Use a pipeline as a high-level helper\",\n            \"from transformers import pipeline\",\n            \"\",\n            `pipe = pipeline(\"${model.pipeline_tag}\", model=\"${model.id}\"` + remote_code_snippet + \")\"\n        ];\n        if (model.tags.includes(\"conversational\")) {\n            if (model.tags.includes(\"image-text-to-text\")) {\n                pipelineSnippet.push(\"messages = [\", [\n                    \"    {\",\n                    '        \"role\": \"user\",',\n                    '        \"content\": [',\n                    '            {\"type\": \"image\", \"url\": \"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/p-blog/candy.JPG\"},',\n                    '            {\"type\": \"text\", \"text\": \"What animal is on the candy?\"}',\n                    \"        ]\",\n                    \"    },\"\n                ].join(\"\\n\"), \"]\");\n                pipelineSnippet.push(\"pipe(text=messages)\");\n            } else {\n                pipelineSnippet.push(\"messages = [\", '    {\"role\": \"user\", \"content\": \"Who are you?\"},', \"]\");\n                pipelineSnippet.push(\"pipe(messages)\");\n            }\n        } else if (model.pipeline_tag === \"zero-shot-image-classification\") {\n            pipelineSnippet.push(\"pipe(\", '    \"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/parrots.png\",', '    candidate_labels=[\"animals\", \"humans\", \"landscape\"],', \")\");\n        } else if (model.pipeline_tag === \"image-classification\") {\n            pipelineSnippet.push('pipe(\"https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/parrots.png\")');\n        }\n        return [\n            pipelineSnippet.join(\"\\n\"),\n            autoSnippet.join(\"\\n\")\n        ];\n    }\n    return [\n        autoSnippet.join(\"\\n\")\n    ];\n};\nconst transformersJS = (model)=>{\n    if (!model.pipeline_tag) {\n        return [\n            `// ⚠️ Unknown pipeline tag`\n        ];\n    }\n    const libName = \"@huggingface/transformers\";\n    return [\n        `// npm i ${libName}\nimport { pipeline } from '${libName}';\n\n// Allocate pipeline\nconst pipe = await pipeline('${model.pipeline_tag}', '${model.id}');`\n    ];\n};\nconst peftTask = (peftTaskType)=>{\n    switch(peftTaskType){\n        case \"CAUSAL_LM\":\n            return \"CausalLM\";\n        case \"SEQ_2_SEQ_LM\":\n            return \"Seq2SeqLM\";\n        case \"TOKEN_CLS\":\n            return \"TokenClassification\";\n        case \"SEQ_CLS\":\n            return \"SequenceClassification\";\n        default:\n            return undefined;\n    }\n};\nconst peft = (model)=>{\n    const { base_model_name_or_path: peftBaseModel, task_type: peftTaskType } = model.config?.peft ?? {};\n    const pefttask = peftTask(peftTaskType);\n    if (!pefttask) {\n        return [\n            `Task type is invalid.`\n        ];\n    }\n    if (!peftBaseModel) {\n        return [\n            `Base model is not found.`\n        ];\n    }\n    return [\n        `from peft import PeftModel\nfrom transformers import AutoModelFor${pefttask}\n\nbase_model = AutoModelFor${pefttask}.from_pretrained(\"${peftBaseModel}\")\nmodel = PeftModel.from_pretrained(base_model, \"${model.id}\")`\n    ];\n};\nconst fasttext = (model)=>[\n        `from huggingface_hub import hf_hub_download\nimport fasttext\n\nmodel = fasttext.load_model(hf_hub_download(\"${model.id}\", \"model.bin\"))`\n    ];\nconst stableBaselines3 = (model)=>[\n        `from huggingface_sb3 import load_from_hub\ncheckpoint = load_from_hub(\n\trepo_id=\"${model.id}\",\n\tfilename=\"{MODEL FILENAME}.zip\",\n)`\n    ];\nconst nemoDomainResolver = (domain, model)=>{\n    switch(domain){\n        case \"ASR\":\n            return [\n                `import nemo.collections.asr as nemo_asr\nasr_model = nemo_asr.models.ASRModel.from_pretrained(\"${model.id}\")\n\ntranscriptions = asr_model.transcribe([\"file.wav\"])`\n            ];\n        default:\n            return undefined;\n    }\n};\nconst mlAgents = (model)=>[\n        `mlagents-load-from-hf --repo-id=\"${model.id}\" --local-dir=\"./download: string[]s\"`\n    ];\nconst sentis = ()=>[\n        `string modelName = \"[Your model name here].sentis\";\nModel model = ModelLoader.Load(Application.streamingAssetsPath + \"/\" + modelName);\nIWorker engine = WorkerFactory.CreateWorker(BackendType.GPUCompute, model);\n// Please see provided C# file for more details\n`\n    ];\nconst sana = (model)=>[\n        `\n# Load the model and infer image from text\nimport torch\nfrom app.sana_pipeline import SanaPipeline\nfrom torchvision.utils import save_image\n\nsana = SanaPipeline(\"configs/sana_config/1024ms/Sana_1600M_img1024.yaml\")\nsana.from_pretrained(\"hf://${model.id}\")\n\nimage = sana(\n    prompt='a cyberpunk cat with a neon sign that says \"Sana\"',\n    height=1024,\n    width=1024,\n    guidance_scale=5.0,\n    pag_guidance_scale=2.0,\n    num_inference_steps=18,\n) `\n    ];\nconst videoprism = (model)=>[\n        `# Install from https://github.com/google-deepmind/videoprism\nimport jax\nfrom videoprism import models as vp\n\nflax_model = vp.get_model(\"${model.id}\")\nloaded_state = vp.load_pretrained_weights(\"${model.id}\")\n\n@jax.jit\ndef forward_fn(inputs, train=False):\n  return flax_model.apply(loaded_state, inputs, train=train)`\n    ];\nconst vfimamba = (model)=>[\n        `from Trainer_finetune import Model\n\nmodel = Model.from_pretrained(\"${model.id}\")`\n    ];\nconst lvface = (model)=>[\n        `from huggingface_hub import hf_hub_download\n\t from inference_onnx import LVFaceONNXInferencer\n\nmodel_path = hf_hub_download(\"${model.id}\", \"LVFace-L_Glint360K/LVFace-L_Glint360K.onnx\")\ninferencer = LVFaceONNXInferencer(model_path, use_gpu=True, timeout=300)\nimg_path = 'path/to/image1.jpg'\nembedding = inferencer.infer_from_image(img_path)`\n    ];\nconst voicecraft = (model)=>[\n        `from voicecraft import VoiceCraft\n\nmodel = VoiceCraft.from_pretrained(\"${model.id}\")`\n    ];\nconst vui = ()=>[\n        `# !pip install git+https://github.com/fluxions-ai/vui\n\nimport torchaudio\n\nfrom vui.inference import render\nfrom vui.model import Vui,\n\nmodel = Vui.from_pretrained().cuda()\nwaveform = render(\n    model,\n    \"Hey, here is some random stuff, usually something quite long as the shorter the text the less likely the model can cope!\",\n)\nprint(waveform.shape)\ntorchaudio.save(\"out.opus\", waveform[0], 22050)\n`\n    ];\nconst chattts = ()=>[\n        `import ChatTTS\nimport torchaudio\n\nchat = ChatTTS.Chat()\nchat.load_models(compile=False) # Set to True for better performance\n\ntexts = [\"PUT YOUR TEXT HERE\",]\n\nwavs = chat.infer(texts, )\n\ntorchaudio.save(\"output1.wav\", torch.from_numpy(wavs[0]), 24000)`\n    ];\nconst ultralytics = (model)=>{\n    // ultralytics models must have a version tag (e.g. `yolov8`)\n    const versionTag = model.tags.find((tag)=>tag.match(/^yolov\\d+$/));\n    const className = versionTag ? `YOLOv${versionTag.slice(4)}` : \"YOLOvXX\";\n    const prefix = versionTag ? \"\" : `# Couldn't find a valid YOLO version tag.\\n# Replace XX with the correct version.\\n`;\n    return [\n        prefix + `from ultralytics import ${className}\n\nmodel = ${className}.from_pretrained(\"${model.id}\")\nsource = 'http://images.cocodataset.org/val2017/000000039769.jpg'\nmodel.predict(source=source, save=True)`\n    ];\n};\nconst birefnet = (model)=>[\n        `# Option 1: use with transformers\n\nfrom transformers import AutoModelForImageSegmentation\nbirefnet = AutoModelForImageSegmentation.from_pretrained(\"${model.id}\", trust_remote_code=True)\n`,\n        `# Option 2: use with BiRefNet\n\n# Install from https://github.com/ZhengPeng7/BiRefNet\n\nfrom models.birefnet import BiRefNet\nmodel = BiRefNet.from_pretrained(\"${model.id}\")`\n    ];\nconst swarmformer = (model)=>[\n        `from swarmformer import SwarmFormerModel\n\nmodel = SwarmFormerModel.from_pretrained(\"${model.id}\")\n`\n    ];\nconst univa = (model)=>[\n        `# Follow installation instructions at https://github.com/PKU-YuanGroup/UniWorld-V1\n\nfrom univa.models.qwen2p5vl.modeling_univa_qwen2p5vl import UnivaQwen2p5VLForConditionalGeneration\n\tmodel = UnivaQwen2p5VLForConditionalGeneration.from_pretrained(\n        \"${model.id}\",\n        torch_dtype=torch.bfloat16,\n        attn_implementation=\"flash_attention_2\",\n    ).to(\"cuda\")\n\tprocessor = AutoProcessor.from_pretrained(\"${model.id}\")\n`\n    ];\nconst mlx_unknown = (model)=>[\n        `# Download the model from the Hub\npip install huggingface_hub[hf_xet]\n\nhuggingface-cli download --local-dir ${nameWithoutNamespace(model.id)} ${model.id}`\n    ];\nconst mlxlm = (model)=>[\n        `# Make sure mlx-lm is installed\n# pip install --upgrade mlx-lm\n# if on a CUDA device, also pip install mlx[cuda]\n\n# Generate text with mlx-lm\nfrom mlx_lm import load, generate\n\nmodel, tokenizer = load(\"${model.id}\")\n\nprompt = \"Once upon a time in\"\ntext = generate(model, tokenizer, prompt=prompt, verbose=True)`\n    ];\nconst mlxchat = (model)=>[\n        `# Make sure mlx-lm is installed\n# pip install --upgrade mlx-lm\n\n# Generate text with mlx-lm\nfrom mlx_lm import load, generate\n\nmodel, tokenizer = load(\"${model.id}\")\n\nprompt = \"Write a story about Einstein\"\nmessages = [{\"role\": \"user\", \"content\": prompt}]\nprompt = tokenizer.apply_chat_template(\n    messages, add_generation_prompt=True\n)\n\ntext = generate(model, tokenizer, prompt=prompt, verbose=True)`\n    ];\nconst mlxvlm = (model)=>[\n        `# Make sure mlx-vlm is installed\n# pip install --upgrade mlx-vlm\n\nfrom mlx_vlm import load, generate\nfrom mlx_vlm.prompt_utils import apply_chat_template\nfrom mlx_vlm.utils import load_config\n\n# Load the model\nmodel, processor = load(\"${model.id}\")\nconfig = load_config(\"${model.id}\")\n\n# Prepare input\nimage = [\"http://images.cocodataset.org/val2017/000000039769.jpg\"]\nprompt = \"Describe this image.\"\n\n# Apply chat template\nformatted_prompt = apply_chat_template(\n    processor, config, prompt, num_images=1\n)\n\n# Generate output\noutput = generate(model, processor, formatted_prompt, image)\nprint(output)`\n    ];\nconst mlxim = (model)=>[\n        `from mlxim.model import create_model\n\nmodel = create_model(${model.id})`\n    ];\nconst mlx = (model)=>{\n    if (model.pipeline_tag === \"image-text-to-text\") {\n        return mlxvlm(model);\n    }\n    if (model.pipeline_tag === \"text-generation\") {\n        if (model.tags.includes(\"conversational\")) {\n            return mlxchat(model);\n        } else {\n            return mlxlm(model);\n        }\n    }\n    return mlx_unknown(model);\n};\nconst model2vec = (model)=>[\n        `from model2vec import StaticModel\n\nmodel = StaticModel.from_pretrained(\"${model.id}\")`\n    ];\nconst nemo = (model)=>{\n    let command = undefined;\n    // Resolve the tag to a nemo domain/sub-domain\n    if (model.tags.includes(\"automatic-speech-recognition\")) {\n        command = nemoDomainResolver(\"ASR\", model);\n    }\n    return command ?? [\n        `# tag did not correspond to a valid NeMo domain.`\n    ];\n};\nconst outetts = (model)=>{\n    // Don’t show this block on GGUF / ONNX mirrors\n    const t = model.tags ?? [];\n    if (t.includes(\"gguf\") || t.includes(\"onnx\")) return [];\n    // v1.0 HF → minimal runnable snippet\n    return [\n        `\n  import outetts\n  \n  enum = outetts.Models(\"${model.id}\".split(\"/\", 1)[1])       # VERSION_1_0_SIZE_1B\n  cfg  = outetts.ModelConfig.auto_config(enum, outetts.Backend.HF)\n  tts  = outetts.Interface(cfg)\n  \n  speaker = tts.load_default_speaker(\"EN-FEMALE-1-NEUTRAL\")\n  tts.generate(\n\t  outetts.GenerationConfig(\n\t\t  text=\"Hello there, how are you doing?\",\n\t\t  speaker=speaker,\n\t  )\n  ).save(\"output.wav\")\n  `\n    ];\n};\nconst pxia = (model)=>[\n        `from pxia import AutoModel\n\nmodel = AutoModel.from_pretrained(\"${model.id}\")`\n    ];\nconst pythae = (model)=>[\n        `from pythae.models import AutoModel\n\nmodel = AutoModel.load_from_hf_hub(\"${model.id}\")`\n    ];\nconst musicgen = (model)=>[\n        `from audiocraft.models import MusicGen\n\nmodel = MusicGen.get_pretrained(\"${model.id}\")\n\ndescriptions = ['happy rock', 'energetic EDM', 'sad jazz']\nwav = model.generate(descriptions)  # generates 3 samples.`\n    ];\nconst magnet = (model)=>[\n        `from audiocraft.models import MAGNeT\n\t\nmodel = MAGNeT.get_pretrained(\"${model.id}\")\n\ndescriptions = ['disco beat', 'energetic EDM', 'funky groove']\nwav = model.generate(descriptions)  # generates 3 samples.`\n    ];\nconst audiogen = (model)=>[\n        `from audiocraft.models import AudioGen\n\t\nmodel = AudioGen.get_pretrained(\"${model.id}\")\nmodel.set_generation_params(duration=5)  # generate 5 seconds.\ndescriptions = ['dog barking', 'sirene of an emergency vehicle', 'footsteps in a corridor']\nwav = model.generate(descriptions)  # generates 3 samples.`\n    ];\nconst anemoi = (model)=>[\n        `from anemoi.inference.runners.default import DefaultRunner\nfrom anemoi.inference.config.run import RunConfiguration\n# Create Configuration\nconfig = RunConfiguration(checkpoint = {\"huggingface\":\"${model.id}\"})\n# Load Runner\nrunner = DefaultRunner(config)`\n    ];\nconst audiocraft = (model)=>{\n    if (model.tags.includes(\"musicgen\")) {\n        return musicgen(model);\n    } else if (model.tags.includes(\"audiogen\")) {\n        return audiogen(model);\n    } else if (model.tags.includes(\"magnet\")) {\n        return magnet(model);\n    } else {\n        return [\n            `# Type of model unknown.`\n        ];\n    }\n};\nconst whisperkit = ()=>[\n        `# Install CLI with Homebrew on macOS device\nbrew install whisperkit-cli\n\n# View all available inference options\nwhisperkit-cli transcribe --help\n\t\n# Download and run inference using whisper base model\nwhisperkit-cli transcribe --audio-path /path/to/audio.mp3\n\n# Or use your preferred model variant\nwhisperkit-cli transcribe --model \"large-v3\" --model-prefix \"distil\" --audio-path /path/to/audio.mp3 --verbose`\n    ];\nconst threedtopia_xl = (model)=>[\n        `from threedtopia_xl.models import threedtopia_xl\n\nmodel = threedtopia_xl.from_pretrained(\"${model.id}\")\nmodel.generate(cond=\"path/to/image.png\")`\n    ];\nconst hezar = (model)=>[\n        `from hezar import Model\n\nmodel = Model.load(\"${model.id}\")`\n    ];\nconst zonos = (model)=>[\n        `# pip install git+https://github.com/Zyphra/Zonos.git\nimport torchaudio\nfrom zonos.model import Zonos\nfrom zonos.conditioning import make_cond_dict\n\nmodel = Zonos.from_pretrained(\"${model.id}\", device=\"cuda\")\n\nwav, sr = torchaudio.load(\"speaker.wav\")           # 5-10s reference clip\nspeaker = model.make_speaker_embedding(wav, sr)\n\ncond  = make_cond_dict(text=\"Hello, world!\", speaker=speaker, language=\"en-us\")\ncodes = model.generate(model.prepare_conditioning(cond))\n\naudio = model.autoencoder.decode(codes)[0].cpu()\ntorchaudio.save(\"sample.wav\", audio, model.autoencoder.sampling_rate)\n`\n    ]; //#endregion\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries-snippets.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/model-libraries.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_DISPLAY_MODEL_LIBRARY_KEYS: () => (/* binding */ ALL_DISPLAY_MODEL_LIBRARY_KEYS),\n/* harmony export */   ALL_MODEL_LIBRARY_KEYS: () => (/* binding */ ALL_MODEL_LIBRARY_KEYS),\n/* harmony export */   MODEL_LIBRARIES_UI_ELEMENTS: () => (/* binding */ MODEL_LIBRARIES_UI_ELEMENTS)\n/* harmony export */ });\n/* harmony import */ var _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model-libraries-snippets.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries-snippets.js\");\n\n/**\n * Add your new library here.\n *\n * This is for modeling (= architectures) libraries, not for file formats (like ONNX, etc).\n * (unlike libraries, file formats live in an enum inside the internal codebase.)\n *\n * Doc on how to add a library to the Hub:\n *\n * https://huggingface.co/docs/hub/models-adding-libraries\n *\n * /!\\ IMPORTANT\n *\n * The key you choose is the tag your models have in their library_name on the Hub.\n */ const MODEL_LIBRARIES_UI_ELEMENTS = {\n    acestep: {\n        prettyLabel: \"ACE-Step\",\n        repoName: \"ACE-Step\",\n        repoUrl: \"https://github.com/ace-step/ACE-Step\",\n        filter: false,\n        countDownloads: `path:\"ace_step_transformer/config.json\"`\n    },\n    \"adapter-transformers\": {\n        prettyLabel: \"Adapters\",\n        repoName: \"adapters\",\n        repoUrl: \"https://github.com/Adapter-Hub/adapters\",\n        docsUrl: \"https://huggingface.co/docs/hub/adapters\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.adapters,\n        filter: true,\n        countDownloads: `path:\"adapter_config.json\"`\n    },\n    allennlp: {\n        prettyLabel: \"AllenNLP\",\n        repoName: \"AllenNLP\",\n        repoUrl: \"https://github.com/allenai/allennlp\",\n        docsUrl: \"https://huggingface.co/docs/hub/allennlp\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.allennlp,\n        filter: true\n    },\n    anemoi: {\n        prettyLabel: \"AnemoI\",\n        repoName: \"AnemoI\",\n        repoUrl: \"https://github.com/ecmwf/anemoi-inference\",\n        docsUrl: \"https://anemoi.readthedocs.io/en/latest/\",\n        filter: false,\n        countDownloads: `path_extension:\"ckpt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.anemoi\n    },\n    araclip: {\n        prettyLabel: \"AraClip\",\n        repoName: \"AraClip\",\n        repoUrl: \"https://huggingface.co/Arabic-Clip/araclip\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.araclip\n    },\n    asteroid: {\n        prettyLabel: \"Asteroid\",\n        repoName: \"Asteroid\",\n        repoUrl: \"https://github.com/asteroid-team/asteroid\",\n        docsUrl: \"https://huggingface.co/docs/hub/asteroid\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.asteroid,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\"`\n    },\n    audiocraft: {\n        prettyLabel: \"Audiocraft\",\n        repoName: \"audiocraft\",\n        repoUrl: \"https://github.com/facebookresearch/audiocraft\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.audiocraft,\n        filter: false,\n        countDownloads: `path:\"state_dict.bin\"`\n    },\n    audioseal: {\n        prettyLabel: \"AudioSeal\",\n        repoName: \"audioseal\",\n        repoUrl: \"https://github.com/facebookresearch/audioseal\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.audioseal\n    },\n    \"bagel-mot\": {\n        prettyLabel: \"Bagel\",\n        repoName: \"Bagel\",\n        repoUrl: \"https://github.com/ByteDance-Seed/Bagel/\",\n        filter: false,\n        countDownloads: `path:\"llm_config.json\"`\n    },\n    bboxmaskpose: {\n        prettyLabel: \"BBoxMaskPose\",\n        repoName: \"BBoxMaskPose\",\n        repoUrl: \"https://github.com/MiraPurkrabek/BBoxMaskPose\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`\n    },\n    ben2: {\n        prettyLabel: \"BEN2\",\n        repoName: \"BEN2\",\n        repoUrl: \"https://github.com/PramaLLC/BEN2\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.ben2,\n        filter: false\n    },\n    bertopic: {\n        prettyLabel: \"BERTopic\",\n        repoName: \"BERTopic\",\n        repoUrl: \"https://github.com/MaartenGr/BERTopic\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.bertopic,\n        filter: true\n    },\n    big_vision: {\n        prettyLabel: \"Big Vision\",\n        repoName: \"big_vision\",\n        repoUrl: \"https://github.com/google-research/big_vision\",\n        filter: false,\n        countDownloads: `path_extension:\"npz\"`\n    },\n    birder: {\n        prettyLabel: \"Birder\",\n        repoName: \"Birder\",\n        repoUrl: \"https://gitlab.com/birder/birder\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    birefnet: {\n        prettyLabel: \"BiRefNet\",\n        repoName: \"BiRefNet\",\n        repoUrl: \"https://github.com/ZhengPeng7/BiRefNet\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.birefnet,\n        filter: false\n    },\n    bm25s: {\n        prettyLabel: \"BM25S\",\n        repoName: \"bm25s\",\n        repoUrl: \"https://github.com/xhluca/bm25s\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.bm25s,\n        filter: false,\n        countDownloads: `path:\"params.index.json\"`\n    },\n    champ: {\n        prettyLabel: \"Champ\",\n        repoName: \"Champ\",\n        repoUrl: \"https://github.com/fudan-generative-vision/champ\",\n        countDownloads: `path:\"champ/motion_module.pth\"`\n    },\n    chatterbox: {\n        prettyLabel: \"Chatterbox\",\n        repoName: \"Chatterbox\",\n        repoUrl: \"https://github.com/resemble-ai/chatterbox\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.chatterbox,\n        countDownloads: `path:\"tokenizer.json\"`,\n        filter: false\n    },\n    chat_tts: {\n        prettyLabel: \"ChatTTS\",\n        repoName: \"ChatTTS\",\n        repoUrl: \"https://github.com/2noise/ChatTTS.git\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.chattts,\n        filter: false,\n        countDownloads: `path:\"asset/GPT.pt\"`\n    },\n    colpali: {\n        prettyLabel: \"ColPali\",\n        repoName: \"ColPali\",\n        repoUrl: \"https://github.com/ManuelFay/colpali\",\n        filter: false,\n        countDownloads: `path:\"adapter_config.json\"`\n    },\n    comet: {\n        prettyLabel: \"COMET\",\n        repoName: \"COMET\",\n        repoUrl: \"https://github.com/Unbabel/COMET/\",\n        countDownloads: `path:\"hparams.yaml\"`\n    },\n    contexttab: {\n        prettyLabel: \"ConTextTab\",\n        repoName: \"ConTextTab\",\n        repoUrl: \"https://github.com/SAP-samples/contexttab\",\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.contexttab\n    },\n    cosmos: {\n        prettyLabel: \"Cosmos\",\n        repoName: \"Cosmos\",\n        repoUrl: \"https://github.com/NVIDIA/Cosmos\",\n        countDownloads: `path:\"config.json\" OR path_extension:\"pt\"`\n    },\n    \"cxr-foundation\": {\n        prettyLabel: \"CXR Foundation\",\n        repoName: \"cxr-foundation\",\n        repoUrl: \"https://github.com/google-health/cxr-foundation\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.cxr_foundation,\n        filter: false,\n        countDownloads: `path:\"precomputed_embeddings/embeddings.npz\" OR path:\"pax-elixr-b-text/saved_model.pb\"`\n    },\n    deepforest: {\n        prettyLabel: \"DeepForest\",\n        repoName: \"deepforest\",\n        docsUrl: \"https://deepforest.readthedocs.io/en/latest/\",\n        repoUrl: \"https://github.com/weecology/DeepForest\"\n    },\n    \"depth-anything-v2\": {\n        prettyLabel: \"DepthAnythingV2\",\n        repoName: \"Depth Anything V2\",\n        repoUrl: \"https://github.com/DepthAnything/Depth-Anything-V2\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.depth_anything_v2,\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`\n    },\n    \"depth-pro\": {\n        prettyLabel: \"Depth Pro\",\n        repoName: \"Depth Pro\",\n        repoUrl: \"https://github.com/apple/ml-depth-pro\",\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.depth_pro,\n        filter: false\n    },\n    \"derm-foundation\": {\n        prettyLabel: \"Derm Foundation\",\n        repoName: \"derm-foundation\",\n        repoUrl: \"https://github.com/google-health/derm-foundation\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.derm_foundation,\n        filter: false,\n        countDownloads: `path:\"scin_dataset_precomputed_embeddings.npz\" OR path:\"saved_model.pb\"`\n    },\n    \"describe-anything\": {\n        prettyLabel: \"Describe Anything\",\n        repoName: \"Describe Anything\",\n        repoUrl: \"https://github.com/NVlabs/describe-anything\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.describe_anything,\n        filter: false\n    },\n    \"dia-tts\": {\n        prettyLabel: \"Dia\",\n        repoName: \"Dia\",\n        repoUrl: \"https://github.com/nari-labs/dia\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.dia,\n        filter: false\n    },\n    diffree: {\n        prettyLabel: \"Diffree\",\n        repoName: \"Diffree\",\n        repoUrl: \"https://github.com/OpenGVLab/Diffree\",\n        filter: false,\n        countDownloads: `path:\"diffree-step=000010999.ckpt\"`\n    },\n    diffusers: {\n        prettyLabel: \"Diffusers\",\n        repoName: \"\\uD83E\\uDD17/diffusers\",\n        repoUrl: \"https://github.com/huggingface/diffusers\",\n        docsUrl: \"https://huggingface.co/docs/hub/diffusers\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.diffusers,\n        filter: true\n    },\n    diffusionkit: {\n        prettyLabel: \"DiffusionKit\",\n        repoName: \"DiffusionKit\",\n        repoUrl: \"https://github.com/argmaxinc/DiffusionKit\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.diffusionkit\n    },\n    doctr: {\n        prettyLabel: \"docTR\",\n        repoName: \"doctr\",\n        repoUrl: \"https://github.com/mindee/doctr\"\n    },\n    cartesia_pytorch: {\n        prettyLabel: \"Cartesia Pytorch\",\n        repoName: \"Cartesia Pytorch\",\n        repoUrl: \"https://github.com/cartesia-ai/cartesia_pytorch\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.cartesia_pytorch\n    },\n    cartesia_mlx: {\n        prettyLabel: \"Cartesia MLX\",\n        repoName: \"Cartesia MLX\",\n        repoUrl: \"https://github.com/cartesia-ai/cartesia_mlx\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.cartesia_mlx\n    },\n    clipscope: {\n        prettyLabel: \"clipscope\",\n        repoName: \"clipscope\",\n        repoUrl: \"https://github.com/Lewington-pitsos/clipscope\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    cosyvoice: {\n        prettyLabel: \"CosyVoice\",\n        repoName: \"CosyVoice\",\n        repoUrl: \"https://github.com/FunAudioLLM/CosyVoice\",\n        filter: false,\n        countDownloads: `path_extension:\"onnx\" OR path_extension:\"pt\"`\n    },\n    cotracker: {\n        prettyLabel: \"CoTracker\",\n        repoName: \"CoTracker\",\n        repoUrl: \"https://github.com/facebookresearch/co-tracker\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`\n    },\n    edsnlp: {\n        prettyLabel: \"EDS-NLP\",\n        repoName: \"edsnlp\",\n        repoUrl: \"https://github.com/aphp/edsnlp\",\n        docsUrl: \"https://aphp.github.io/edsnlp/latest/\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.edsnlp,\n        countDownloads: `path_filename:\"config\" AND path_extension:\"cfg\"`\n    },\n    elm: {\n        prettyLabel: \"ELM\",\n        repoName: \"elm\",\n        repoUrl: \"https://github.com/slicex-ai/elm\",\n        filter: false,\n        countDownloads: `path_filename:\"slicex_elm_config\" AND path_extension:\"json\"`\n    },\n    espnet: {\n        prettyLabel: \"ESPnet\",\n        repoName: \"ESPnet\",\n        repoUrl: \"https://github.com/espnet/espnet\",\n        docsUrl: \"https://huggingface.co/docs/hub/espnet\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.espnet,\n        filter: true\n    },\n    fairseq: {\n        prettyLabel: \"Fairseq\",\n        repoName: \"fairseq\",\n        repoUrl: \"https://github.com/pytorch/fairseq\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.fairseq,\n        filter: true\n    },\n    fastai: {\n        prettyLabel: \"fastai\",\n        repoName: \"fastai\",\n        repoUrl: \"https://github.com/fastai/fastai\",\n        docsUrl: \"https://huggingface.co/docs/hub/fastai\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.fastai,\n        filter: true\n    },\n    fasttext: {\n        prettyLabel: \"fastText\",\n        repoName: \"fastText\",\n        repoUrl: \"https://fasttext.cc/\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.fasttext,\n        filter: true,\n        countDownloads: `path_extension:\"bin\"`\n    },\n    flair: {\n        prettyLabel: \"Flair\",\n        repoName: \"Flair\",\n        repoUrl: \"https://github.com/flairNLP/flair\",\n        docsUrl: \"https://huggingface.co/docs/hub/flair\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.flair,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\"`\n    },\n    fme: {\n        prettyLabel: \"Full Model Emulation\",\n        repoName: \"Full Model Emulation\",\n        repoUrl: \"https://github.com/ai2cm/ace\",\n        docsUrl: \"https://ai2-climate-emulator.readthedocs.io/en/latest/\",\n        filter: false,\n        countDownloads: `path_extension:\"tar\"`\n    },\n    \"gemma.cpp\": {\n        prettyLabel: \"gemma.cpp\",\n        repoName: \"gemma.cpp\",\n        repoUrl: \"https://github.com/google/gemma.cpp\",\n        filter: false,\n        countDownloads: `path_extension:\"sbs\"`\n    },\n    \"geometry-crafter\": {\n        prettyLabel: \"GeometryCrafter\",\n        repoName: \"GeometryCrafter\",\n        repoUrl: \"https://github.com/TencentARC/GeometryCrafter\",\n        countDownloads: `path:\"point_map_vae/diffusion_pytorch_model.safetensors\"`\n    },\n    gliner: {\n        prettyLabel: \"GLiNER\",\n        repoName: \"GLiNER\",\n        repoUrl: \"https://github.com/urchade/GLiNER\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.gliner,\n        filter: false,\n        countDownloads: `path:\"gliner_config.json\"`\n    },\n    \"glyph-byt5\": {\n        prettyLabel: \"Glyph-ByT5\",\n        repoName: \"Glyph-ByT5\",\n        repoUrl: \"https://github.com/AIGText/Glyph-ByT5\",\n        filter: false,\n        countDownloads: `path:\"checkpoints/byt5_model.pt\"`\n    },\n    grok: {\n        prettyLabel: \"Grok\",\n        repoName: \"Grok\",\n        repoUrl: \"https://github.com/xai-org/grok-1\",\n        filter: false,\n        countDownloads: `path:\"ckpt/tensor00000_000\" OR path:\"ckpt-0/tensor00000_000\"`\n    },\n    hallo: {\n        prettyLabel: \"Hallo\",\n        repoName: \"Hallo\",\n        repoUrl: \"https://github.com/fudan-generative-vision/hallo\",\n        countDownloads: `path:\"hallo/net.pth\"`\n    },\n    hermes: {\n        prettyLabel: \"HERMES\",\n        repoName: \"HERMES\",\n        repoUrl: \"https://github.com/LMD0311/HERMES\",\n        filter: false,\n        countDownloads: `path:\"ckpt/hermes_final.pth\"`\n    },\n    hezar: {\n        prettyLabel: \"Hezar\",\n        repoName: \"Hezar\",\n        repoUrl: \"https://github.com/hezarai/hezar\",\n        docsUrl: \"https://hezarai.github.io/hezar\",\n        countDownloads: `path:\"model_config.yaml\" OR path:\"embedding/embedding_config.yaml\"`\n    },\n    htrflow: {\n        prettyLabel: \"HTRflow\",\n        repoName: \"HTRflow\",\n        repoUrl: \"https://github.com/AI-Riksarkivet/htrflow\",\n        docsUrl: \"https://ai-riksarkivet.github.io/htrflow\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.htrflow\n    },\n    \"hunyuan-dit\": {\n        prettyLabel: \"HunyuanDiT\",\n        repoName: \"HunyuanDiT\",\n        repoUrl: \"https://github.com/Tencent/HunyuanDiT\",\n        countDownloads: `path:\"pytorch_model_ema.pt\" OR path:\"pytorch_model_distill.pt\"`\n    },\n    \"hunyuan3d-2\": {\n        prettyLabel: \"Hunyuan3D-2\",\n        repoName: \"Hunyuan3D-2\",\n        repoUrl: \"https://github.com/Tencent/Hunyuan3D-2\",\n        countDownloads: `path_filename:\"model_index\" OR path_filename:\"config\"`\n    },\n    imstoucan: {\n        prettyLabel: \"IMS Toucan\",\n        repoName: \"IMS-Toucan\",\n        repoUrl: \"https://github.com/DigitalPhonetics/IMS-Toucan\",\n        countDownloads: `path:\"embedding_gan.pt\" OR path:\"Vocoder.pt\" OR path:\"ToucanTTS.pt\"`\n    },\n    \"index-tts\": {\n        prettyLabel: \"IndexTTS\",\n        repoName: \"IndexTTS\",\n        repoUrl: \"https://github.com/index-tts/index-tts\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.indextts,\n        filter: false\n    },\n    \"infinite-you\": {\n        prettyLabel: \"InfiniteYou\",\n        repoName: \"InfiniteYou\",\n        repoUrl: \"https://github.com/bytedance/InfiniteYou\",\n        filter: false,\n        countDownloads: `path:\"infu_flux_v1.0/sim_stage1/image_proj_model.bin\" OR path:\"infu_flux_v1.0/aes_stage2/image_proj_model.bin\"`\n    },\n    keras: {\n        prettyLabel: \"Keras\",\n        repoName: \"Keras\",\n        repoUrl: \"https://github.com/keras-team/keras\",\n        docsUrl: \"https://huggingface.co/docs/hub/keras\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.keras,\n        filter: true,\n        countDownloads: `path:\"config.json\" OR path_extension:\"keras\"`\n    },\n    \"tf-keras\": {\n        // Legacy \"Keras 2\" library (tensorflow-only)\n        prettyLabel: \"TF-Keras\",\n        repoName: \"TF-Keras\",\n        repoUrl: \"https://github.com/keras-team/tf-keras\",\n        docsUrl: \"https://huggingface.co/docs/hub/tf-keras\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.tf_keras,\n        countDownloads: `path:\"saved_model.pb\"`\n    },\n    \"keras-hub\": {\n        prettyLabel: \"KerasHub\",\n        repoName: \"KerasHub\",\n        repoUrl: \"https://github.com/keras-team/keras-hub\",\n        docsUrl: \"https://keras.io/keras_hub/\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.keras_hub,\n        filter: true\n    },\n    \"kimi-audio\": {\n        prettyLabel: \"KimiAudio\",\n        repoName: \"KimiAudio\",\n        repoUrl: \"https://github.com/MoonshotAI/Kimi-Audio\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.kimi_audio,\n        filter: false\n    },\n    kronos: {\n        prettyLabel: \"KRONOS\",\n        repoName: \"KRONOS\",\n        repoUrl: \"https://github.com/mahmoodlab/KRONOS\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    k2: {\n        prettyLabel: \"K2\",\n        repoName: \"k2\",\n        repoUrl: \"https://github.com/k2-fsa/k2\"\n    },\n    \"lightning-ir\": {\n        prettyLabel: \"Lightning IR\",\n        repoName: \"Lightning IR\",\n        repoUrl: \"https://github.com/webis-de/lightning-ir\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.lightning_ir\n    },\n    \"litert-lm\": {\n        prettyLabel: \"LiteRT-LM\",\n        repoName: \"LiteRT-LM\",\n        repoUrl: \"https://github.com/google-ai-edge/LiteRT-LM\",\n        filter: false,\n        countDownloads: `path_extension:\"litertlm\"`\n    },\n    lerobot: {\n        prettyLabel: \"LeRobot\",\n        repoName: \"LeRobot\",\n        repoUrl: \"https://github.com/huggingface/lerobot\",\n        docsUrl: \"https://huggingface.co/docs/lerobot\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.lerobot\n    },\n    liveportrait: {\n        prettyLabel: \"LivePortrait\",\n        repoName: \"LivePortrait\",\n        repoUrl: \"https://github.com/KwaiVGI/LivePortrait\",\n        filter: false,\n        countDownloads: `path:\"liveportrait/landmark.onnx\"`\n    },\n    \"llama-cpp-python\": {\n        prettyLabel: \"llama-cpp-python\",\n        repoName: \"llama-cpp-python\",\n        repoUrl: \"https://github.com/abetlen/llama-cpp-python\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.llama_cpp_python\n    },\n    \"mini-omni2\": {\n        prettyLabel: \"Mini-Omni2\",\n        repoName: \"Mini-Omni2\",\n        repoUrl: \"https://github.com/gpt-omni/mini-omni2\",\n        countDownloads: `path:\"model_config.yaml\"`\n    },\n    mindspore: {\n        prettyLabel: \"MindSpore\",\n        repoName: \"mindspore\",\n        repoUrl: \"https://github.com/mindspore-ai/mindspore\"\n    },\n    \"magi-1\": {\n        prettyLabel: \"MAGI-1\",\n        repoName: \"MAGI-1\",\n        repoUrl: \"https://github.com/SandAI-org/MAGI-1\",\n        countDownloads: `path:\"ckpt/vae/config.json\"`\n    },\n    \"magenta-realtime\": {\n        prettyLabel: \"Magenta RT\",\n        repoName: \"Magenta RT\",\n        repoUrl: \"https://github.com/magenta/magenta-realtime\",\n        countDownloads: `path:\"checkpoints/llm_base_x4286_c1860k.tar\" OR path:\"checkpoints/llm_large_x3047_c1860k.tar\" OR path:\"checkpoints/llm_large_x3047_c1860k/checkpoint\"`\n    },\n    \"mamba-ssm\": {\n        prettyLabel: \"MambaSSM\",\n        repoName: \"MambaSSM\",\n        repoUrl: \"https://github.com/state-spaces/mamba\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mamba_ssm\n    },\n    \"mars5-tts\": {\n        prettyLabel: \"MARS5-TTS\",\n        repoName: \"MARS5-TTS\",\n        repoUrl: \"https://github.com/Camb-ai/MARS5-TTS\",\n        filter: false,\n        countDownloads: `path:\"mars5_ar.safetensors\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mars5_tts\n    },\n    matanyone: {\n        prettyLabel: \"MatAnyone\",\n        repoName: \"MatAnyone\",\n        repoUrl: \"https://github.com/pq-yang/MatAnyone\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.matanyone,\n        filter: false\n    },\n    \"mesh-anything\": {\n        prettyLabel: \"MeshAnything\",\n        repoName: \"MeshAnything\",\n        repoUrl: \"https://github.com/buaacyw/MeshAnything\",\n        filter: false,\n        countDownloads: `path:\"MeshAnything_350m.pth\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mesh_anything\n    },\n    merlin: {\n        prettyLabel: \"Merlin\",\n        repoName: \"Merlin\",\n        repoUrl: \"https://github.com/StanfordMIMI/Merlin\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    medvae: {\n        prettyLabel: \"MedVAE\",\n        repoName: \"MedVAE\",\n        repoUrl: \"https://github.com/StanfordMIMI/MedVAE\",\n        filter: false,\n        countDownloads: `path_extension:\"ckpt\"`\n    },\n    mitie: {\n        prettyLabel: \"MITIE\",\n        repoName: \"MITIE\",\n        repoUrl: \"https://github.com/mit-nlp/MITIE\",\n        countDownloads: `path_filename:\"total_word_feature_extractor\"`\n    },\n    \"ml-agents\": {\n        prettyLabel: \"ml-agents\",\n        repoName: \"ml-agents\",\n        repoUrl: \"https://github.com/Unity-Technologies/ml-agents\",\n        docsUrl: \"https://huggingface.co/docs/hub/ml-agents\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mlAgents,\n        filter: true,\n        countDownloads: `path_extension:\"onnx\"`\n    },\n    mlx: {\n        prettyLabel: \"MLX\",\n        repoName: \"MLX\",\n        repoUrl: \"https://github.com/ml-explore/mlx-examples/tree/main\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mlx,\n        filter: true\n    },\n    \"mlx-image\": {\n        prettyLabel: \"mlx-image\",\n        repoName: \"mlx-image\",\n        repoUrl: \"https://github.com/riccardomusmeci/mlx-image\",\n        docsUrl: \"https://huggingface.co/docs/hub/mlx-image\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.mlxim,\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`\n    },\n    \"mlc-llm\": {\n        prettyLabel: \"MLC-LLM\",\n        repoName: \"MLC-LLM\",\n        repoUrl: \"https://github.com/mlc-ai/mlc-llm\",\n        docsUrl: \"https://llm.mlc.ai/docs/\",\n        filter: false,\n        countDownloads: `path:\"mlc-chat-config.json\"`\n    },\n    model2vec: {\n        prettyLabel: \"Model2Vec\",\n        repoName: \"model2vec\",\n        repoUrl: \"https://github.com/MinishLab/model2vec\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.model2vec,\n        filter: false\n    },\n    moshi: {\n        prettyLabel: \"Moshi\",\n        repoName: \"Moshi\",\n        repoUrl: \"https://github.com/kyutai-labs/moshi\",\n        filter: false,\n        countDownloads: `path:\"tokenizer-e351c8d8-checkpoint125.safetensors\"`\n    },\n    mtvcraft: {\n        prettyLabel: \"MTVCraft\",\n        repoName: \"MTVCraft\",\n        repoUrl: \"https://github.com/baaivision/MTVCraft\",\n        filter: false,\n        countDownloads: `path:\"vae/3d-vae.pt\"`\n    },\n    nemo: {\n        prettyLabel: \"NeMo\",\n        repoName: \"NeMo\",\n        repoUrl: \"https://github.com/NVIDIA/NeMo\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.nemo,\n        filter: true,\n        countDownloads: `path_extension:\"nemo\" OR path:\"model_config.yaml\" OR path_extension:\"json\"`\n    },\n    \"open-oasis\": {\n        prettyLabel: \"open-oasis\",\n        repoName: \"open-oasis\",\n        repoUrl: \"https://github.com/etched-ai/open-oasis\",\n        countDownloads: `path:\"oasis500m.safetensors\"`\n    },\n    open_clip: {\n        prettyLabel: \"OpenCLIP\",\n        repoName: \"OpenCLIP\",\n        repoUrl: \"https://github.com/mlfoundations/open_clip\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.open_clip,\n        filter: true,\n        countDownloads: `path:\"open_clip_model.safetensors\"\n\t\t\tOR path:\"model.safetensors\"\n\t\t\tOR path:\"open_clip_pytorch_model.bin\"\n\t\t\tOR path:\"pytorch_model.bin\"`\n    },\n    \"open-sora\": {\n        prettyLabel: \"Open-Sora\",\n        repoName: \"Open-Sora\",\n        repoUrl: \"https://github.com/hpcaitech/Open-Sora\",\n        filter: false,\n        countDownloads: `path:\"Open_Sora_v2.safetensors\"`\n    },\n    outetts: {\n        prettyLabel: \"OuteTTS\",\n        repoName: \"OuteTTS\",\n        repoUrl: \"https://github.com/edwko/OuteTTS\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.outetts,\n        filter: false\n    },\n    paddlenlp: {\n        prettyLabel: \"paddlenlp\",\n        repoName: \"PaddleNLP\",\n        repoUrl: \"https://github.com/PaddlePaddle/PaddleNLP\",\n        docsUrl: \"https://huggingface.co/docs/hub/paddlenlp\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.paddlenlp,\n        filter: true,\n        countDownloads: `path:\"model_config.json\"`\n    },\n    PaddleOCR: {\n        prettyLabel: \"PaddleOCR\",\n        repoName: \"PaddleOCR\",\n        repoUrl: \"https://github.com/PaddlePaddle/PaddleOCR\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.paddleocr,\n        filter: true\n    },\n    peft: {\n        prettyLabel: \"PEFT\",\n        repoName: \"PEFT\",\n        repoUrl: \"https://github.com/huggingface/peft\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.peft,\n        filter: true,\n        countDownloads: `path:\"adapter_config.json\"`\n    },\n    \"perception-encoder\": {\n        prettyLabel: \"PerceptionEncoder\",\n        repoName: \"PerceptionModels\",\n        repoUrl: \"https://github.com/facebookresearch/perception_models\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.perception_encoder,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    \"phantom-wan\": {\n        prettyLabel: \"Phantom\",\n        repoName: \"Phantom\",\n        repoUrl: \"https://github.com/Phantom-video/Phantom\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.phantom_wan,\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`\n    },\n    pxia: {\n        prettyLabel: \"pxia\",\n        repoName: \"pxia\",\n        repoUrl: \"https://github.com/not-lain/pxia\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.pxia,\n        filter: false\n    },\n    \"pyannote-audio\": {\n        prettyLabel: \"pyannote.audio\",\n        repoName: \"pyannote-audio\",\n        repoUrl: \"https://github.com/pyannote/pyannote-audio\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.pyannote_audio,\n        filter: true\n    },\n    \"py-feat\": {\n        prettyLabel: \"Py-Feat\",\n        repoName: \"Py-Feat\",\n        repoUrl: \"https://github.com/cosanlab/py-feat\",\n        docsUrl: \"https://py-feat.org/\",\n        filter: false\n    },\n    pythae: {\n        prettyLabel: \"pythae\",\n        repoName: \"pythae\",\n        repoUrl: \"https://github.com/clementchadebec/benchmark_VAE\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.pythae,\n        filter: false\n    },\n    recurrentgemma: {\n        prettyLabel: \"RecurrentGemma\",\n        repoName: \"recurrentgemma\",\n        repoUrl: \"https://github.com/google-deepmind/recurrentgemma\",\n        filter: false,\n        countDownloads: `path:\"tokenizer.model\"`\n    },\n    relik: {\n        prettyLabel: \"Relik\",\n        repoName: \"Relik\",\n        repoUrl: \"https://github.com/SapienzaNLP/relik\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.relik,\n        filter: false\n    },\n    refiners: {\n        prettyLabel: \"Refiners\",\n        repoName: \"Refiners\",\n        repoUrl: \"https://github.com/finegrain-ai/refiners\",\n        docsUrl: \"https://refine.rs/\",\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`\n    },\n    renderformer: {\n        prettyLabel: \"RenderFormer\",\n        repoName: \"RenderFormer\",\n        repoUrl: \"https://github.com/microsoft/renderformer\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.renderformer,\n        filter: false\n    },\n    reverb: {\n        prettyLabel: \"Reverb\",\n        repoName: \"Reverb\",\n        repoUrl: \"https://github.com/revdotcom/reverb\",\n        filter: false\n    },\n    saelens: {\n        prettyLabel: \"SAELens\",\n        repoName: \"SAELens\",\n        repoUrl: \"https://github.com/jbloomAus/SAELens\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.saelens,\n        filter: false\n    },\n    sam2: {\n        prettyLabel: \"sam2\",\n        repoName: \"sam2\",\n        repoUrl: \"https://github.com/facebookresearch/segment-anything-2\",\n        filter: false,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sam2,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    \"sample-factory\": {\n        prettyLabel: \"sample-factory\",\n        repoName: \"sample-factory\",\n        repoUrl: \"https://github.com/alex-petrenko/sample-factory\",\n        docsUrl: \"https://huggingface.co/docs/hub/sample-factory\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sampleFactory,\n        filter: true,\n        countDownloads: `path:\"cfg.json\"`\n    },\n    sapiens: {\n        prettyLabel: \"sapiens\",\n        repoName: \"sapiens\",\n        repoUrl: \"https://github.com/facebookresearch/sapiens\",\n        filter: false,\n        countDownloads: `path_extension:\"pt2\" OR path_extension:\"pth\" OR path_extension:\"onnx\"`\n    },\n    seedvr: {\n        prettyLabel: \"SeedVR\",\n        repoName: \"SeedVR\",\n        repoUrl: \"https://github.com/ByteDance-Seed/SeedVR\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`\n    },\n    \"sentence-transformers\": {\n        prettyLabel: \"sentence-transformers\",\n        repoName: \"sentence-transformers\",\n        repoUrl: \"https://github.com/UKPLab/sentence-transformers\",\n        docsUrl: \"https://huggingface.co/docs/hub/sentence-transformers\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sentenceTransformers,\n        filter: true\n    },\n    setfit: {\n        prettyLabel: \"setfit\",\n        repoName: \"setfit\",\n        repoUrl: \"https://github.com/huggingface/setfit\",\n        docsUrl: \"https://huggingface.co/docs/hub/setfit\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.setfit,\n        filter: true\n    },\n    sklearn: {\n        prettyLabel: \"Scikit-learn\",\n        repoName: \"Scikit-learn\",\n        repoUrl: \"https://github.com/scikit-learn/scikit-learn\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sklearn,\n        filter: true,\n        countDownloads: `path:\"sklearn_model.joblib\"`\n    },\n    spacy: {\n        prettyLabel: \"spaCy\",\n        repoName: \"spaCy\",\n        repoUrl: \"https://github.com/explosion/spaCy\",\n        docsUrl: \"https://huggingface.co/docs/hub/spacy\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.spacy,\n        filter: true,\n        countDownloads: `path_extension:\"whl\"`\n    },\n    \"span-marker\": {\n        prettyLabel: \"SpanMarker\",\n        repoName: \"SpanMarkerNER\",\n        repoUrl: \"https://github.com/tomaarsen/SpanMarkerNER\",\n        docsUrl: \"https://huggingface.co/docs/hub/span_marker\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.span_marker,\n        filter: true\n    },\n    speechbrain: {\n        prettyLabel: \"speechbrain\",\n        repoName: \"speechbrain\",\n        repoUrl: \"https://github.com/speechbrain/speechbrain\",\n        docsUrl: \"https://huggingface.co/docs/hub/speechbrain\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.speechbrain,\n        filter: true,\n        countDownloads: `path:\"hyperparams.yaml\"`\n    },\n    \"ssr-speech\": {\n        prettyLabel: \"SSR-Speech\",\n        repoName: \"SSR-Speech\",\n        repoUrl: \"https://github.com/WangHelin1997/SSR-Speech\",\n        filter: false,\n        countDownloads: `path_extension:\".pth\"`\n    },\n    \"stable-audio-tools\": {\n        prettyLabel: \"Stable Audio Tools\",\n        repoName: \"stable-audio-tools\",\n        repoUrl: \"https://github.com/Stability-AI/stable-audio-tools.git\",\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.stable_audio_tools\n    },\n    monkeyocr: {\n        prettyLabel: \"MonkeyOCR\",\n        repoName: \"monkeyocr\",\n        repoUrl: \"https://github.com/Yuliang-Liu/MonkeyOCR\",\n        filter: false,\n        countDownloads: `path:\"Recognition/config.json\"`\n    },\n    \"diffusion-single-file\": {\n        prettyLabel: \"Diffusion Single File\",\n        repoName: \"diffusion-single-file\",\n        repoUrl: \"https://github.com/comfyanonymous/ComfyUI\",\n        filter: false,\n        countDownloads: `path_extension:\"safetensors\"`\n    },\n    \"seed-story\": {\n        prettyLabel: \"SEED-Story\",\n        repoName: \"SEED-Story\",\n        repoUrl: \"https://github.com/TencentARC/SEED-Story\",\n        filter: false,\n        countDownloads: `path:\"cvlm_llama2_tokenizer/tokenizer.model\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.seed_story\n    },\n    soloaudio: {\n        prettyLabel: \"SoloAudio\",\n        repoName: \"SoloAudio\",\n        repoUrl: \"https://github.com/WangHelin1997/SoloAudio\",\n        filter: false,\n        countDownloads: `path:\"soloaudio_v2.pt\"`\n    },\n    songbloom: {\n        prettyLabel: \"SongBloom\",\n        repoName: \"SongBloom\",\n        repoUrl: \"https://github.com/Cypress-Yang/SongBloom\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`\n    },\n    \"stable-baselines3\": {\n        prettyLabel: \"stable-baselines3\",\n        repoName: \"stable-baselines3\",\n        repoUrl: \"https://github.com/huggingface/huggingface_sb3\",\n        docsUrl: \"https://huggingface.co/docs/hub/stable-baselines3\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.stableBaselines3,\n        filter: true,\n        countDownloads: `path_extension:\"zip\"`\n    },\n    stanza: {\n        prettyLabel: \"Stanza\",\n        repoName: \"stanza\",\n        repoUrl: \"https://github.com/stanfordnlp/stanza\",\n        docsUrl: \"https://huggingface.co/docs/hub/stanza\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.stanza,\n        filter: true,\n        countDownloads: `path:\"models/default.zip\"`\n    },\n    swarmformer: {\n        prettyLabel: \"SwarmFormer\",\n        repoName: \"SwarmFormer\",\n        repoUrl: \"https://github.com/takara-ai/SwarmFormer\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.swarmformer,\n        filter: false\n    },\n    \"f5-tts\": {\n        prettyLabel: \"F5-TTS\",\n        repoName: \"F5-TTS\",\n        repoUrl: \"https://github.com/SWivid/F5-TTS\",\n        filter: false,\n        countDownloads: `path_extension:\"safetensors\" OR path_extension:\"pt\"`\n    },\n    genmo: {\n        prettyLabel: \"Genmo\",\n        repoName: \"Genmo\",\n        repoUrl: \"https://github.com/genmoai/models\",\n        filter: false,\n        countDownloads: `path:\"vae_stats.json\"`\n    },\n    \"tencent-song-generation\": {\n        prettyLabel: \"SongGeneration\",\n        repoName: \"SongGeneration\",\n        repoUrl: \"https://github.com/tencent-ailab/songgeneration\",\n        filter: false,\n        countDownloads: `path:\"ckpt/songgeneration_base/model.pt\"`\n    },\n    tensorflowtts: {\n        prettyLabel: \"TensorFlowTTS\",\n        repoName: \"TensorFlowTTS\",\n        repoUrl: \"https://github.com/TensorSpeech/TensorFlowTTS\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.tensorflowtts\n    },\n    tabpfn: {\n        prettyLabel: \"TabPFN\",\n        repoName: \"TabPFN\",\n        repoUrl: \"https://github.com/PriorLabs/TabPFN\"\n    },\n    terratorch: {\n        prettyLabel: \"TerraTorch\",\n        repoName: \"TerraTorch\",\n        repoUrl: \"https://github.com/IBM/terratorch\",\n        docsUrl: \"https://ibm.github.io/terratorch/\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.terratorch\n    },\n    \"tic-clip\": {\n        prettyLabel: \"TiC-CLIP\",\n        repoName: \"TiC-CLIP\",\n        repoUrl: \"https://github.com/apple/ml-tic-clip\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\" AND path_prefix:\"checkpoints/\"`\n    },\n    timesfm: {\n        prettyLabel: \"TimesFM\",\n        repoName: \"timesfm\",\n        repoUrl: \"https://github.com/google-research/timesfm\",\n        filter: false,\n        countDownloads: `path:\"checkpoints/checkpoint_1100000/state/checkpoint\" OR path:\"checkpoints/checkpoint_2150000/state/checkpoint\" OR path_extension:\"ckpt\"`\n    },\n    timm: {\n        prettyLabel: \"timm\",\n        repoName: \"pytorch-image-models\",\n        repoUrl: \"https://github.com/rwightman/pytorch-image-models\",\n        docsUrl: \"https://huggingface.co/docs/hub/timm\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.timm,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\" OR path:\"model.safetensors\"`\n    },\n    tirex: {\n        prettyLabel: \"TiRex\",\n        repoName: \"TiRex\",\n        repoUrl: \"https://github.com/NX-AI/tirex\",\n        countDownloads: `path_extension:\"ckpt\"`\n    },\n    torchgeo: {\n        prettyLabel: \"TorchGeo\",\n        repoName: \"TorchGeo\",\n        repoUrl: \"https://github.com/microsoft/torchgeo\",\n        docsUrl: \"https://torchgeo.readthedocs.io/\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\" OR path_extension:\"pth\"`\n    },\n    transformers: {\n        prettyLabel: \"Transformers\",\n        repoName: \"\\uD83E\\uDD17/transformers\",\n        repoUrl: \"https://github.com/huggingface/transformers\",\n        docsUrl: \"https://huggingface.co/docs/hub/transformers\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.transformers,\n        filter: true\n    },\n    \"transformers.js\": {\n        prettyLabel: \"Transformers.js\",\n        repoName: \"transformers.js\",\n        repoUrl: \"https://github.com/huggingface/transformers.js\",\n        docsUrl: \"https://huggingface.co/docs/hub/transformers-js\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.transformersJS,\n        filter: true\n    },\n    trellis: {\n        prettyLabel: \"Trellis\",\n        repoName: \"Trellis\",\n        repoUrl: \"https://github.com/microsoft/TRELLIS\",\n        countDownloads: `path_extension:\"safetensors\"`\n    },\n    ultralytics: {\n        prettyLabel: \"ultralytics\",\n        repoName: \"ultralytics\",\n        repoUrl: \"https://github.com/ultralytics/ultralytics\",\n        docsUrl: \"https://github.com/ultralytics/ultralytics\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.ultralytics\n    },\n    univa: {\n        prettyLabel: \"univa\",\n        repoName: \"univa\",\n        repoUrl: \"https://github.com/PKU-YuanGroup/UniWorld-V1\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.univa,\n        filter: true,\n        countDownloads: `path:\"config.json\"`\n    },\n    \"uni-3dar\": {\n        prettyLabel: \"Uni-3DAR\",\n        repoName: \"Uni-3DAR\",\n        repoUrl: \"https://github.com/dptech-corp/Uni-3DAR\",\n        docsUrl: \"https://github.com/dptech-corp/Uni-3DAR\",\n        countDownloads: `path_extension:\"pt\"`\n    },\n    \"unity-sentis\": {\n        prettyLabel: \"unity-sentis\",\n        repoName: \"unity-sentis\",\n        repoUrl: \"https://github.com/Unity-Technologies/sentis-samples\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sentis,\n        filter: true,\n        countDownloads: `path_extension:\"sentis\"`\n    },\n    sana: {\n        prettyLabel: \"Sana\",\n        repoName: \"Sana\",\n        repoUrl: \"https://github.com/NVlabs/Sana\",\n        countDownloads: `path_extension:\"pth\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.sana\n    },\n    videoprism: {\n        prettyLabel: \"VideoPrism\",\n        repoName: \"VideoPrism\",\n        repoUrl: \"https://github.com/google-deepmind/videoprism\",\n        countDownloads: `path_extension:\"npz\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.videoprism\n    },\n    \"vfi-mamba\": {\n        prettyLabel: \"VFIMamba\",\n        repoName: \"VFIMamba\",\n        repoUrl: \"https://github.com/MCG-NJU/VFIMamba\",\n        countDownloads: `path_extension:\"pkl\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.vfimamba\n    },\n    lvface: {\n        prettyLabel: \"LVFace\",\n        repoName: \"LVFace\",\n        repoUrl: \"https://github.com/bytedance/LVFace\",\n        countDownloads: `path_extension:\"pt\" OR path_extension:\"onnx\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.lvface\n    },\n    voicecraft: {\n        prettyLabel: \"VoiceCraft\",\n        repoName: \"VoiceCraft\",\n        repoUrl: \"https://github.com/jasonppy/VoiceCraft\",\n        docsUrl: \"https://github.com/jasonppy/VoiceCraft\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.voicecraft\n    },\n    vui: {\n        prettyLabel: \"Vui\",\n        repoName: \"Vui\",\n        repoUrl: \"https://github.com/vui-ai/vui\",\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.vui\n    },\n    \"wan2.2\": {\n        prettyLabel: \"Wan2.2\",\n        repoName: \"Wan2.2\",\n        repoUrl: \"https://github.com/Wan-Video/Wan2.2\",\n        countDownloads: `path_filename:\"config\" AND path_extension:\"json\"`\n    },\n    wham: {\n        prettyLabel: \"WHAM\",\n        repoName: \"wham\",\n        repoUrl: \"https://huggingface.co/microsoft/wham\",\n        docsUrl: \"https://huggingface.co/microsoft/wham/blob/main/README.md\",\n        countDownloads: `path_extension:\"ckpt\"`\n    },\n    whisperkit: {\n        prettyLabel: \"WhisperKit\",\n        repoName: \"WhisperKit\",\n        repoUrl: \"https://github.com/argmaxinc/WhisperKit\",\n        docsUrl: \"https://github.com/argmaxinc/WhisperKit?tab=readme-ov-file#homebrew\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.whisperkit,\n        countDownloads: `path_filename:\"model\" AND path_extension:\"mil\" AND _exists_:\"path_prefix\"`\n    },\n    yolov10: {\n        // YOLOv10 is a fork of ultraLytics. Code snippets and download count are the same but the repo is different.\n        prettyLabel: \"YOLOv10\",\n        repoName: \"YOLOv10\",\n        repoUrl: \"https://github.com/THU-MIG/yolov10\",\n        docsUrl: \"https://github.com/THU-MIG/yolov10\",\n        countDownloads: `path_extension:\"pt\" OR path_extension:\"safetensors\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.ultralytics\n    },\n    zonos: {\n        prettyLabel: \"Zonos\",\n        repoName: \"Zonos\",\n        repoUrl: \"https://github.com/Zyphra/Zonos\",\n        docsUrl: \"https://github.com/Zyphra/Zonos\",\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.zonos,\n        filter: false\n    },\n    \"3dtopia-xl\": {\n        prettyLabel: \"3DTopia-XL\",\n        repoName: \"3DTopia-XL\",\n        repoUrl: \"https://github.com/3DTopia/3DTopia-XL\",\n        filter: false,\n        countDownloads: `path:\"model_vae_fp16.pt\"`,\n        snippets: _model_libraries_snippets_js__WEBPACK_IMPORTED_MODULE_0__.threedtopia_xl\n    }\n};\nconst ALL_MODEL_LIBRARY_KEYS = Object.keys(MODEL_LIBRARIES_UI_ELEMENTS);\nconst ALL_DISPLAY_MODEL_LIBRARY_KEYS = Object.entries(MODEL_LIBRARIES_UI_ELEMENTS)// eslint-disable-next-line @typescript-eslint/no-unused-vars\n.filter(([_, v])=>v.filter).map(([k])=>k);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/model-libraries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/pipelines.js":
/*!***************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/pipelines.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MODALITIES: () => (/* binding */ MODALITIES),\n/* harmony export */   MODALITY_LABELS: () => (/* binding */ MODALITY_LABELS),\n/* harmony export */   PIPELINE_DATA: () => (/* binding */ PIPELINE_DATA),\n/* harmony export */   PIPELINE_TYPES: () => (/* binding */ PIPELINE_TYPES),\n/* harmony export */   PIPELINE_TYPES_SET: () => (/* binding */ PIPELINE_TYPES_SET),\n/* harmony export */   SUBTASK_TYPES: () => (/* binding */ SUBTASK_TYPES)\n/* harmony export */ });\nconst MODALITIES = [\n    \"multimodal\",\n    \"nlp\",\n    \"cv\",\n    \"audio\",\n    \"tabular\",\n    \"rl\",\n    \"other\"\n];\nconst MODALITY_LABELS = {\n    multimodal: \"Multimodal\",\n    nlp: \"Natural Language Processing\",\n    audio: \"Audio\",\n    cv: \"Computer Vision\",\n    rl: \"Reinforcement Learning\",\n    tabular: \"Tabular\",\n    other: \"Other\"\n};\n/// Coarse-grained taxonomy of tasks\n///\n/// This type is used in multiple places in the Hugging Face\n/// ecosystem:\n///  - To determine which widget to show.\n///  - To determine which endpoint of Inference Endpoints to use.\n///  - As filters at the left of models and datasets page.\n///\n/// Note that this is sensitive to order.\n/// For each domain, the order should be of decreasing specificity.\n/// This will impact the default pipeline tag of a model when not\n/// specified.\nconst PIPELINE_DATA = {\n    \"text-classification\": {\n        name: \"Text Classification\",\n        subtasks: [\n            {\n                type: \"acceptability-classification\",\n                name: \"Acceptability Classification\"\n            },\n            {\n                type: \"entity-linking-classification\",\n                name: \"Entity Linking Classification\"\n            },\n            {\n                type: \"fact-checking\",\n                name: \"Fact Checking\"\n            },\n            {\n                type: \"intent-classification\",\n                name: \"Intent Classification\"\n            },\n            {\n                type: \"language-identification\",\n                name: \"Language Identification\"\n            },\n            {\n                type: \"multi-class-classification\",\n                name: \"Multi Class Classification\"\n            },\n            {\n                type: \"multi-label-classification\",\n                name: \"Multi Label Classification\"\n            },\n            {\n                type: \"multi-input-text-classification\",\n                name: \"Multi-input Text Classification\"\n            },\n            {\n                type: \"natural-language-inference\",\n                name: \"Natural Language Inference\"\n            },\n            {\n                type: \"semantic-similarity-classification\",\n                name: \"Semantic Similarity Classification\"\n            },\n            {\n                type: \"sentiment-classification\",\n                name: \"Sentiment Classification\"\n            },\n            {\n                type: \"topic-classification\",\n                name: \"Topic Classification\"\n            },\n            {\n                type: \"semantic-similarity-scoring\",\n                name: \"Semantic Similarity Scoring\"\n            },\n            {\n                type: \"sentiment-scoring\",\n                name: \"Sentiment Scoring\"\n            },\n            {\n                type: \"sentiment-analysis\",\n                name: \"Sentiment Analysis\"\n            },\n            {\n                type: \"hate-speech-detection\",\n                name: \"Hate Speech Detection\"\n            },\n            {\n                type: \"text-scoring\",\n                name: \"Text Scoring\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"token-classification\": {\n        name: \"Token Classification\",\n        subtasks: [\n            {\n                type: \"named-entity-recognition\",\n                name: \"Named Entity Recognition\"\n            },\n            {\n                type: \"part-of-speech\",\n                name: \"Part of Speech\"\n            },\n            {\n                type: \"parsing\",\n                name: \"Parsing\"\n            },\n            {\n                type: \"lemmatization\",\n                name: \"Lemmatization\"\n            },\n            {\n                type: \"word-sense-disambiguation\",\n                name: \"Word Sense Disambiguation\"\n            },\n            {\n                type: \"coreference-resolution\",\n                name: \"Coreference-resolution\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"table-question-answering\": {\n        name: \"Table Question Answering\",\n        modality: \"nlp\"\n    },\n    \"question-answering\": {\n        name: \"Question Answering\",\n        subtasks: [\n            {\n                type: \"extractive-qa\",\n                name: \"Extractive QA\"\n            },\n            {\n                type: \"open-domain-qa\",\n                name: \"Open Domain QA\"\n            },\n            {\n                type: \"closed-domain-qa\",\n                name: \"Closed Domain QA\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"zero-shot-classification\": {\n        name: \"Zero-Shot Classification\",\n        modality: \"nlp\"\n    },\n    translation: {\n        name: \"Translation\",\n        modality: \"nlp\"\n    },\n    summarization: {\n        name: \"Summarization\",\n        subtasks: [\n            {\n                type: \"news-articles-summarization\",\n                name: \"News Articles Summarization\"\n            },\n            {\n                type: \"news-articles-headline-generation\",\n                name: \"News Articles Headline Generation\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"feature-extraction\": {\n        name: \"Feature Extraction\",\n        modality: \"nlp\"\n    },\n    \"text-generation\": {\n        name: \"Text Generation\",\n        subtasks: [\n            {\n                type: \"dialogue-modeling\",\n                name: \"Dialogue Modeling\"\n            },\n            {\n                type: \"dialogue-generation\",\n                name: \"Dialogue Generation\"\n            },\n            {\n                type: \"conversational\",\n                name: \"Conversational\"\n            },\n            {\n                type: \"language-modeling\",\n                name: \"Language Modeling\"\n            },\n            {\n                type: \"text-simplification\",\n                name: \"Text simplification\"\n            },\n            {\n                type: \"explanation-generation\",\n                name: \"Explanation Generation\"\n            },\n            {\n                type: \"abstractive-qa\",\n                name: \"Abstractive QA\"\n            },\n            {\n                type: \"open-domain-abstractive-qa\",\n                name: \"Open Domain Abstractive QA\"\n            },\n            {\n                type: \"closed-domain-qa\",\n                name: \"Closed Domain QA\"\n            },\n            {\n                type: \"open-book-qa\",\n                name: \"Open Book QA\"\n            },\n            {\n                type: \"closed-book-qa\",\n                name: \"Closed Book QA\"\n            },\n            {\n                type: \"text2text-generation\",\n                name: \"Text2Text Generation\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"fill-mask\": {\n        name: \"Fill-Mask\",\n        subtasks: [\n            {\n                type: \"slot-filling\",\n                name: \"Slot Filling\"\n            },\n            {\n                type: \"masked-language-modeling\",\n                name: \"Masked Language Modeling\"\n            }\n        ],\n        modality: \"nlp\"\n    },\n    \"sentence-similarity\": {\n        name: \"Sentence Similarity\",\n        modality: \"nlp\"\n    },\n    \"text-to-speech\": {\n        name: \"Text-to-Speech\",\n        modality: \"audio\"\n    },\n    \"text-to-audio\": {\n        name: \"Text-to-Audio\",\n        modality: \"audio\"\n    },\n    \"automatic-speech-recognition\": {\n        name: \"Automatic Speech Recognition\",\n        modality: \"audio\"\n    },\n    \"audio-to-audio\": {\n        name: \"Audio-to-Audio\",\n        modality: \"audio\"\n    },\n    \"audio-classification\": {\n        name: \"Audio Classification\",\n        subtasks: [\n            {\n                type: \"keyword-spotting\",\n                name: \"Keyword Spotting\"\n            },\n            {\n                type: \"speaker-identification\",\n                name: \"Speaker Identification\"\n            },\n            {\n                type: \"audio-intent-classification\",\n                name: \"Audio Intent Classification\"\n            },\n            {\n                type: \"audio-emotion-recognition\",\n                name: \"Audio Emotion Recognition\"\n            },\n            {\n                type: \"audio-language-identification\",\n                name: \"Audio Language Identification\"\n            }\n        ],\n        modality: \"audio\"\n    },\n    \"audio-text-to-text\": {\n        name: \"Audio-Text-to-Text\",\n        modality: \"multimodal\",\n        hideInDatasets: true\n    },\n    \"voice-activity-detection\": {\n        name: \"Voice Activity Detection\",\n        modality: \"audio\"\n    },\n    \"depth-estimation\": {\n        name: \"Depth Estimation\",\n        modality: \"cv\"\n    },\n    \"image-classification\": {\n        name: \"Image Classification\",\n        subtasks: [\n            {\n                type: \"multi-label-image-classification\",\n                name: \"Multi Label Image Classification\"\n            },\n            {\n                type: \"multi-class-image-classification\",\n                name: \"Multi Class Image Classification\"\n            }\n        ],\n        modality: \"cv\"\n    },\n    \"object-detection\": {\n        name: \"Object Detection\",\n        subtasks: [\n            {\n                type: \"face-detection\",\n                name: \"Face Detection\"\n            },\n            {\n                type: \"vehicle-detection\",\n                name: \"Vehicle Detection\"\n            }\n        ],\n        modality: \"cv\"\n    },\n    \"image-segmentation\": {\n        name: \"Image Segmentation\",\n        subtasks: [\n            {\n                type: \"instance-segmentation\",\n                name: \"Instance Segmentation\"\n            },\n            {\n                type: \"semantic-segmentation\",\n                name: \"Semantic Segmentation\"\n            },\n            {\n                type: \"panoptic-segmentation\",\n                name: \"Panoptic Segmentation\"\n            }\n        ],\n        modality: \"cv\"\n    },\n    \"text-to-image\": {\n        name: \"Text-to-Image\",\n        modality: \"cv\"\n    },\n    \"image-to-text\": {\n        name: \"Image-to-Text\",\n        subtasks: [\n            {\n                type: \"image-captioning\",\n                name: \"Image Captioning\"\n            }\n        ],\n        modality: \"cv\"\n    },\n    \"image-to-image\": {\n        name: \"Image-to-Image\",\n        subtasks: [\n            {\n                type: \"image-inpainting\",\n                name: \"Image Inpainting\"\n            },\n            {\n                type: \"image-colorization\",\n                name: \"Image Colorization\"\n            },\n            {\n                type: \"super-resolution\",\n                name: \"Super Resolution\"\n            }\n        ],\n        modality: \"cv\"\n    },\n    \"image-to-video\": {\n        name: \"Image-to-Video\",\n        modality: \"cv\"\n    },\n    \"unconditional-image-generation\": {\n        name: \"Unconditional Image Generation\",\n        modality: \"cv\"\n    },\n    \"video-classification\": {\n        name: \"Video Classification\",\n        modality: \"cv\"\n    },\n    \"reinforcement-learning\": {\n        name: \"Reinforcement Learning\",\n        modality: \"rl\"\n    },\n    robotics: {\n        name: \"Robotics\",\n        modality: \"rl\",\n        subtasks: [\n            {\n                type: \"grasping\",\n                name: \"Grasping\"\n            },\n            {\n                type: \"task-planning\",\n                name: \"Task Planning\"\n            }\n        ]\n    },\n    \"tabular-classification\": {\n        name: \"Tabular Classification\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"tabular-multi-class-classification\",\n                name: \"Tabular Multi Class Classification\"\n            },\n            {\n                type: \"tabular-multi-label-classification\",\n                name: \"Tabular Multi Label Classification\"\n            }\n        ]\n    },\n    \"tabular-regression\": {\n        name: \"Tabular Regression\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"tabular-single-column-regression\",\n                name: \"Tabular Single Column Regression\"\n            }\n        ]\n    },\n    \"tabular-to-text\": {\n        name: \"Tabular to Text\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"rdf-to-text\",\n                name: \"RDF to text\"\n            }\n        ],\n        hideInModels: true\n    },\n    \"table-to-text\": {\n        name: \"Table to Text\",\n        modality: \"nlp\",\n        hideInModels: true\n    },\n    \"multiple-choice\": {\n        name: \"Multiple Choice\",\n        subtasks: [\n            {\n                type: \"multiple-choice-qa\",\n                name: \"Multiple Choice QA\"\n            },\n            {\n                type: \"multiple-choice-coreference-resolution\",\n                name: \"Multiple Choice Coreference Resolution\"\n            }\n        ],\n        modality: \"nlp\",\n        hideInModels: true\n    },\n    \"text-ranking\": {\n        name: \"Text Ranking\",\n        modality: \"nlp\"\n    },\n    \"text-retrieval\": {\n        name: \"Text Retrieval\",\n        subtasks: [\n            {\n                type: \"document-retrieval\",\n                name: \"Document Retrieval\"\n            },\n            {\n                type: \"utterance-retrieval\",\n                name: \"Utterance Retrieval\"\n            },\n            {\n                type: \"entity-linking-retrieval\",\n                name: \"Entity Linking Retrieval\"\n            },\n            {\n                type: \"fact-checking-retrieval\",\n                name: \"Fact Checking Retrieval\"\n            }\n        ],\n        modality: \"nlp\",\n        hideInModels: true\n    },\n    \"time-series-forecasting\": {\n        name: \"Time Series Forecasting\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"univariate-time-series-forecasting\",\n                name: \"Univariate Time Series Forecasting\"\n            },\n            {\n                type: \"multivariate-time-series-forecasting\",\n                name: \"Multivariate Time Series Forecasting\"\n            }\n        ]\n    },\n    \"text-to-video\": {\n        name: \"Text-to-Video\",\n        modality: \"cv\"\n    },\n    \"image-text-to-text\": {\n        name: \"Image-Text-to-Text\",\n        modality: \"multimodal\"\n    },\n    \"visual-question-answering\": {\n        name: \"Visual Question Answering\",\n        subtasks: [\n            {\n                type: \"visual-question-answering\",\n                name: \"Visual Question Answering\"\n            }\n        ],\n        modality: \"multimodal\"\n    },\n    \"document-question-answering\": {\n        name: \"Document Question Answering\",\n        subtasks: [\n            {\n                type: \"document-question-answering\",\n                name: \"Document Question Answering\"\n            }\n        ],\n        modality: \"multimodal\",\n        hideInDatasets: true\n    },\n    \"zero-shot-image-classification\": {\n        name: \"Zero-Shot Image Classification\",\n        modality: \"cv\"\n    },\n    \"graph-ml\": {\n        name: \"Graph Machine Learning\",\n        modality: \"other\"\n    },\n    \"mask-generation\": {\n        name: \"Mask Generation\",\n        modality: \"cv\"\n    },\n    \"zero-shot-object-detection\": {\n        name: \"Zero-Shot Object Detection\",\n        modality: \"cv\"\n    },\n    \"text-to-3d\": {\n        name: \"Text-to-3D\",\n        modality: \"cv\"\n    },\n    \"image-to-3d\": {\n        name: \"Image-to-3D\",\n        modality: \"cv\"\n    },\n    \"image-feature-extraction\": {\n        name: \"Image Feature Extraction\",\n        modality: \"cv\"\n    },\n    \"video-text-to-text\": {\n        name: \"Video-Text-to-Text\",\n        modality: \"multimodal\",\n        hideInDatasets: false\n    },\n    \"keypoint-detection\": {\n        name: \"Keypoint Detection\",\n        subtasks: [\n            {\n                type: \"pose-estimation\",\n                name: \"Pose Estimation\"\n            }\n        ],\n        modality: \"cv\",\n        hideInDatasets: true\n    },\n    \"visual-document-retrieval\": {\n        name: \"Visual Document Retrieval\",\n        modality: \"multimodal\"\n    },\n    \"any-to-any\": {\n        name: \"Any-to-Any\",\n        modality: \"multimodal\"\n    },\n    \"video-to-video\": {\n        name: \"Video-to-Video\",\n        modality: \"cv\",\n        hideInDatasets: true\n    },\n    other: {\n        name: \"Other\",\n        modality: \"other\",\n        hideInModels: true,\n        hideInDatasets: true\n    }\n};\nconst PIPELINE_TYPES = Object.keys(PIPELINE_DATA);\nconst SUBTASK_TYPES = Object.values(PIPELINE_DATA).flatMap((data)=>\"subtasks\" in data ? data.subtasks : []).map((s)=>s.type);\nconst PIPELINE_TYPES_SET = new Set(PIPELINE_TYPES);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/pipelines.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/snippets/common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyGenerationConfig: () => (/* binding */ stringifyGenerationConfig),\n/* harmony export */   stringifyMessages: () => (/* binding */ stringifyMessages)\n/* harmony export */ });\nfunction stringifyMessages(messages, opts) {\n    let messagesStr = JSON.stringify(messages, null, \"\t\");\n    if (opts?.indent) {\n        messagesStr = messagesStr.replaceAll(\"\\n\", `\\n${opts.indent}`);\n    }\n    if (!opts?.attributeKeyQuotes) {\n        messagesStr = messagesStr.replace(/\"([^\"]+)\":/g, \"$1:\");\n    }\n    if (opts?.customContentEscaper) {\n        messagesStr = opts.customContentEscaper(messagesStr);\n    }\n    return messagesStr;\n}\nfunction stringifyGenerationConfig(config, opts) {\n    const quote = opts.attributeKeyQuotes ? `\"` : \"\";\n    return Object.entries(config).map(([key, val])=>`${quote}${key}${quote}${opts.attributeValueConnector}${val},`).join(`${opts.indent}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3NuaXBwZXRzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLGtCQUFrQkMsUUFBUSxFQUFFQyxJQUFJO0lBQzVDLElBQUlDLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQ0osVUFBVSxNQUFNO0lBQ2pELElBQUlDLE1BQU1JLFFBQVE7UUFDZEgsY0FBY0EsWUFBWUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUVMLEtBQUtJLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFO0lBQ0EsSUFBSSxDQUFDSixNQUFNTSxvQkFBb0I7UUFDM0JMLGNBQWNBLFlBQVlNLE9BQU8sQ0FBQyxlQUFlO0lBQ3JEO0lBQ0EsSUFBSVAsTUFBTVEsc0JBQXNCO1FBQzVCUCxjQUFjRCxLQUFLUSxvQkFBb0IsQ0FBQ1A7SUFDNUM7SUFDQSxPQUFPQTtBQUNYO0FBQ08sU0FBU1EsMEJBQTBCQyxNQUFNLEVBQUVWLElBQUk7SUFDbEQsTUFBTVcsUUFBUVgsS0FBS00sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRztJQUM5QyxPQUFPTSxPQUFPQyxPQUFPLENBQUNILFFBQ2pCSSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxLQUFLQyxJQUFJLEdBQUssQ0FBQyxFQUFFTCxNQUFNLEVBQUVJLElBQUksRUFBRUosTUFBTSxFQUFFWCxLQUFLaUIsdUJBQXVCLENBQUMsRUFBRUQsSUFBSSxDQUFDLENBQUMsRUFDbEZFLElBQUksQ0FBQyxDQUFDLEVBQUVsQixLQUFLSSxNQUFNLENBQUMsQ0FBQztBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS9zbmlwcGV0cy9jb21tb24uanM/NTBjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5TWVzc2FnZXMobWVzc2FnZXMsIG9wdHMpIHtcbiAgICBsZXQgbWVzc2FnZXNTdHIgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlcywgbnVsbCwgXCJcXHRcIik7XG4gICAgaWYgKG9wdHM/LmluZGVudCkge1xuICAgICAgICBtZXNzYWdlc1N0ciA9IG1lc3NhZ2VzU3RyLnJlcGxhY2VBbGwoXCJcXG5cIiwgYFxcbiR7b3B0cy5pbmRlbnR9YCk7XG4gICAgfVxuICAgIGlmICghb3B0cz8uYXR0cmlidXRlS2V5UXVvdGVzKSB7XG4gICAgICAgIG1lc3NhZ2VzU3RyID0gbWVzc2FnZXNTdHIucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbiAgICB9XG4gICAgaWYgKG9wdHM/LmN1c3RvbUNvbnRlbnRFc2NhcGVyKSB7XG4gICAgICAgIG1lc3NhZ2VzU3RyID0gb3B0cy5jdXN0b21Db250ZW50RXNjYXBlcihtZXNzYWdlc1N0cik7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlc1N0cjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlHZW5lcmF0aW9uQ29uZmlnKGNvbmZpZywgb3B0cykge1xuICAgIGNvbnN0IHF1b3RlID0gb3B0cy5hdHRyaWJ1dGVLZXlRdW90ZXMgPyBgXCJgIDogXCJcIjtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29uZmlnKVxuICAgICAgICAubWFwKChba2V5LCB2YWxdKSA9PiBgJHtxdW90ZX0ke2tleX0ke3F1b3RlfSR7b3B0cy5hdHRyaWJ1dGVWYWx1ZUNvbm5lY3Rvcn0ke3ZhbH0sYClcbiAgICAgICAgLmpvaW4oYCR7b3B0cy5pbmRlbnR9YCk7XG59XG4iXSwibmFtZXMiOlsic3RyaW5naWZ5TWVzc2FnZXMiLCJtZXNzYWdlcyIsIm9wdHMiLCJtZXNzYWdlc1N0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmRlbnQiLCJyZXBsYWNlQWxsIiwiYXR0cmlidXRlS2V5UXVvdGVzIiwicmVwbGFjZSIsImN1c3RvbUNvbnRlbnRFc2NhcGVyIiwic3RyaW5naWZ5R2VuZXJhdGlvbkNvbmZpZyIsImNvbmZpZyIsInF1b3RlIiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsImtleSIsInZhbCIsImF0dHJpYnV0ZVZhbHVlQ29ubmVjdG9yIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/snippets/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getModelInputSnippet: () => (/* reexport safe */ _inputs_js__WEBPACK_IMPORTED_MODULE_1__.getModelInputSnippet),\n/* harmony export */   inferenceSnippetLanguages: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.inferenceSnippetLanguages),\n/* harmony export */   stringifyGenerationConfig: () => (/* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_0__.stringifyGenerationConfig),\n/* harmony export */   stringifyMessages: () => (/* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_0__.stringifyMessages)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/common.js\");\n/* harmony import */ var _inputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inputs.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/types.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3NuaXBwZXRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNEI7QUFDQTtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3NuaXBwZXRzL2luZGV4LmpzP2I0M2QiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9pbnB1dHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getModelInputSnippet: () => (/* binding */ getModelInputSnippet)\n/* harmony export */ });\nconst inputsZeroShotClassification = ()=>`\"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!\"`;\nconst inputsTranslation = ()=>`\"Меня зовут Вольфганг и я живу в Берлине\"`;\nconst inputsSummarization = ()=>`\"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.\"`;\nconst inputsTableQuestionAnswering = ()=>`{\n    \"query\": \"How many stars does the transformers repository have?\",\n    \"table\": {\n        \"Repository\": [\"Transformers\", \"Datasets\", \"Tokenizers\"],\n        \"Stars\": [\"36542\", \"4512\", \"3934\"],\n        \"Contributors\": [\"651\", \"77\", \"34\"],\n        \"Programming language\": [\n            \"Python\",\n            \"Python\",\n            \"Rust, Python and NodeJS\"\n        ]\n    }\n}`;\nconst inputsVisualQuestionAnswering = ()=>`{\n        \"image\": \"cat.png\",\n        \"question\": \"What is in this image?\"\n    }`;\nconst inputsQuestionAnswering = ()=>`{\n    \"question\": \"What is my name?\",\n    \"context\": \"My name is Clara and I live in Berkeley.\"\n}`;\nconst inputsTextClassification = ()=>`\"I like you. I love you\"`;\nconst inputsTokenClassification = ()=>`\"My name is Sarah Jessica Parker but you can call me Jessica\"`;\nconst inputsTextGeneration = (model)=>{\n    if (model.tags.includes(\"conversational\")) {\n        return model.pipeline_tag === \"text-generation\" ? [\n            {\n                role: \"user\",\n                content: \"What is the capital of France?\"\n            }\n        ] : [\n            {\n                role: \"user\",\n                content: [\n                    {\n                        type: \"text\",\n                        text: \"Describe this image in one sentence.\"\n                    },\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            url: \"https://cdn.britannica.com/61/93061-050-99147DCE/Statue-of-Liberty-Island-New-York-Bay.jpg\"\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n    return `\"Can you please let us know more details about your \"`;\n};\nconst inputsFillMask = (model)=>`\"The answer to the universe is ${model.mask_token}.\"`;\nconst inputsSentenceSimilarity = ()=>`{\n    \"source_sentence\": \"That is a happy person\",\n    \"sentences\": [\n        \"That is a happy dog\",\n        \"That is a very happy person\",\n        \"Today is a sunny day\"\n    ]\n}`;\nconst inputsFeatureExtraction = ()=>`\"Today is a sunny day and I will get some ice cream.\"`;\nconst inputsImageClassification = ()=>`\"cats.jpg\"`;\nconst inputsImageToText = ()=>`\"cats.jpg\"`;\nconst inputsImageToImage = ()=>`{\n    \"image\": \"cat.png\",\n    \"prompt\": \"Turn the cat into a tiger.\"\n}`;\nconst inputsImageToVideo = ()=>`{\n    \"image\": \"cat.png\",\n    \"prompt\": \"The cat starts to dance\"\n}`;\nconst inputsImageSegmentation = ()=>`\"cats.jpg\"`;\nconst inputsObjectDetection = ()=>`\"cats.jpg\"`;\nconst inputsAudioToAudio = ()=>`\"sample1.flac\"`;\nconst inputsAudioClassification = ()=>`\"sample1.flac\"`;\nconst inputsTextToImage = ()=>`\"Astronaut riding a horse\"`;\nconst inputsTextToVideo = ()=>`\"A young man walking on the street\"`;\nconst inputsTextToSpeech = ()=>`\"The answer to the universe is 42\"`;\nconst inputsTextToAudio = ()=>`\"liquid drum and bass, atmospheric synths, airy sounds\"`;\nconst inputsAutomaticSpeechRecognition = ()=>`\"sample1.flac\"`;\nconst inputsTabularPrediction = ()=>`'{\"Height\":[11.52,12.48],\"Length1\":[23.2,24.0],\"Length2\":[25.4,26.3],\"Species\": [\"Bream\",\"Bream\"]}'`;\nconst inputsZeroShotImageClassification = ()=>`\"cats.jpg\"`;\nconst modelInputSnippets = {\n    \"audio-to-audio\": inputsAudioToAudio,\n    \"audio-classification\": inputsAudioClassification,\n    \"automatic-speech-recognition\": inputsAutomaticSpeechRecognition,\n    \"document-question-answering\": inputsVisualQuestionAnswering,\n    \"feature-extraction\": inputsFeatureExtraction,\n    \"fill-mask\": inputsFillMask,\n    \"image-classification\": inputsImageClassification,\n    \"image-to-text\": inputsImageToText,\n    \"image-to-image\": inputsImageToImage,\n    \"image-to-video\": inputsImageToVideo,\n    \"image-segmentation\": inputsImageSegmentation,\n    \"object-detection\": inputsObjectDetection,\n    \"question-answering\": inputsQuestionAnswering,\n    \"sentence-similarity\": inputsSentenceSimilarity,\n    summarization: inputsSummarization,\n    \"table-question-answering\": inputsTableQuestionAnswering,\n    \"tabular-regression\": inputsTabularPrediction,\n    \"tabular-classification\": inputsTabularPrediction,\n    \"text-classification\": inputsTextClassification,\n    \"text-generation\": inputsTextGeneration,\n    \"image-text-to-text\": inputsTextGeneration,\n    \"text-to-image\": inputsTextToImage,\n    \"text-to-video\": inputsTextToVideo,\n    \"text-to-speech\": inputsTextToSpeech,\n    \"text-to-audio\": inputsTextToAudio,\n    \"token-classification\": inputsTokenClassification,\n    translation: inputsTranslation,\n    \"zero-shot-classification\": inputsZeroShotClassification,\n    \"zero-shot-image-classification\": inputsZeroShotImageClassification\n};\n// Use noWrap to put the whole snippet on a single line (removing new lines and tabulations)\n// Use noQuotes to strip quotes from start & end (example: \"abc\" -> abc)\nfunction getModelInputSnippet(model, noWrap = false, noQuotes = false) {\n    if (model.pipeline_tag) {\n        const inputs = modelInputSnippets[model.pipeline_tag];\n        if (inputs) {\n            let result = inputs(model);\n            if (typeof result === \"string\") {\n                if (noWrap) {\n                    result = result.replace(/(?:(?:\\r?\\n|\\r)\\t*)|\\t+/g, \" \");\n                }\n                if (noQuotes) {\n                    const REGEX_QUOTES = /^\"(.+)\"$/s;\n                    const match = result.match(REGEX_QUOTES);\n                    result = match ? match[1] : result;\n                }\n            }\n            return result;\n        }\n    }\n    return \"No input example has been defined for this model task.\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/inputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/snippets/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inferenceSnippetLanguages: () => (/* binding */ inferenceSnippetLanguages)\n/* harmony export */ });\n// Order of the elements in InferenceModal.svelte is determined by this const\nconst inferenceSnippetLanguages = [\n    \"python\",\n    \"js\",\n    \"sh\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3NuaXBwZXRzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2RUFBNkU7QUFDdEUsTUFBTUEsNEJBQTRCO0lBQUM7SUFBVTtJQUFNO0NBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS9zbmlwcGV0cy90eXBlcy5qcz83YzlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE9yZGVyIG9mIHRoZSBlbGVtZW50cyBpbiBJbmZlcmVuY2VNb2RhbC5zdmVsdGUgaXMgZGV0ZXJtaW5lZCBieSB0aGlzIGNvbnN0XG5leHBvcnQgY29uc3QgaW5mZXJlbmNlU25pcHBldExhbmd1YWdlcyA9IFtcInB5dGhvblwiLCBcImpzXCIsIFwic2hcIl07XG4iXSwibmFtZXMiOlsiaW5mZXJlbmNlU25pcHBldExhbmd1YWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/snippets/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/any-to-any/data.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/any-to-any/data.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A dataset with multiple modality input and output pairs.\",\n            id: \"PKU-Alignment/align-anything\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"any-to-any-input.jpg\",\n                type: \"img\"\n            },\n            {\n                label: \"Text Prompt\",\n                content: \"What is the significance of this place?\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Generated Text\",\n                content: \"The place in the picture is Osaka Castle, located in Osaka, Japan. Osaka Castle is a historic castle that was originally built in the 16th century by Toyotomi Hideyoshi, a powerful warlord of the time. It is one of the most famous landmarks in Osaka and is known for its distinctive white walls and black roof tiles. The castle has been rebuilt several times over the centuries and is now a popular tourist attraction, offering visitors a glimpse into Japan's rich history and culture.\",\n                type: \"text\"\n            },\n            {\n                filename: \"any-to-any-output.wav\",\n                type: \"audio\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Strong model that can take in video, audio, image, text and output text and natural speech.\",\n            id: \"Qwen/Qwen2.5-Omni-7B\"\n        },\n        {\n            description: \"Robust model that can take in image and text and generate image and text.\",\n            id: \"OmniGen2/OmniGen2\"\n        },\n        {\n            description: \"Any-to-any model with speech, video, audio, image and text understanding capabilities.\",\n            id: \"openbmb/MiniCPM-o-2_6\"\n        },\n        {\n            description: \"A model that can understand image and text and generate image and text.\",\n            id: \"ByteDance-Seed/BAGEL-7B-MoT\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application to chat with an any-to-any (image & text) model.\",\n            id: \"OmniGen2/OmniGen2\"\n        }\n    ],\n    summary: \"Any-to-any models can understand two or more modalities and output two or more modalities.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2FueS10by1hbnkvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RGLE1BQU07WUFDVjtTQUNIO1FBQ0RHLFNBQVM7WUFDTDtnQkFDSUYsT0FBTztnQkFDUEMsU0FBUztnQkFDVEYsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lELFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUksU0FBUyxFQUFFO0lBQ1hDLFFBQVE7UUFDSjtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYyxFQUFFO0lBQ2hCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvYW55LXRvLWFueS9kYXRhLmpzPzNjMDQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkYXRhc2V0IHdpdGggbXVsdGlwbGUgbW9kYWxpdHkgaW5wdXQgYW5kIG91dHB1dCBwYWlycy5cIixcbiAgICAgICAgICAgIGlkOiBcIlBLVS1BbGlnbm1lbnQvYWxpZ24tYW55dGhpbmdcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiYW55LXRvLWFueS1pbnB1dC5qcGdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJUZXh0IFByb21wdFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiV2hhdCBpcyB0aGUgc2lnbmlmaWNhbmNlIG9mIHRoaXMgcGxhY2U/XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiR2VuZXJhdGVkIFRleHRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlRoZSBwbGFjZSBpbiB0aGUgcGljdHVyZSBpcyBPc2FrYSBDYXN0bGUsIGxvY2F0ZWQgaW4gT3Nha2EsIEphcGFuLiBPc2FrYSBDYXN0bGUgaXMgYSBoaXN0b3JpYyBjYXN0bGUgdGhhdCB3YXMgb3JpZ2luYWxseSBidWlsdCBpbiB0aGUgMTZ0aCBjZW50dXJ5IGJ5IFRveW90b21pIEhpZGV5b3NoaSwgYSBwb3dlcmZ1bCB3YXJsb3JkIG9mIHRoZSB0aW1lLiBJdCBpcyBvbmUgb2YgdGhlIG1vc3QgZmFtb3VzIGxhbmRtYXJrcyBpbiBPc2FrYSBhbmQgaXMga25vd24gZm9yIGl0cyBkaXN0aW5jdGl2ZSB3aGl0ZSB3YWxscyBhbmQgYmxhY2sgcm9vZiB0aWxlcy4gVGhlIGNhc3RsZSBoYXMgYmVlbiByZWJ1aWx0IHNldmVyYWwgdGltZXMgb3ZlciB0aGUgY2VudHVyaWVzIGFuZCBpcyBub3cgYSBwb3B1bGFyIHRvdXJpc3QgYXR0cmFjdGlvbiwgb2ZmZXJpbmcgdmlzaXRvcnMgYSBnbGltcHNlIGludG8gSmFwYW4ncyByaWNoIGhpc3RvcnkgYW5kIGN1bHR1cmUuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImFueS10by1hbnktb3V0cHV0LndhdlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXVkaW9cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIG1vZGVsIHRoYXQgY2FuIHRha2UgaW4gdmlkZW8sIGF1ZGlvLCBpbWFnZSwgdGV4dCBhbmQgb3V0cHV0IHRleHQgYW5kIG5hdHVyYWwgc3BlZWNoLlwiLFxuICAgICAgICAgICAgaWQ6IFwiUXdlbi9Rd2VuMi41LU9tbmktN0JcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUm9idXN0IG1vZGVsIHRoYXQgY2FuIHRha2UgaW4gaW1hZ2UgYW5kIHRleHQgYW5kIGdlbmVyYXRlIGltYWdlIGFuZCB0ZXh0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiT21uaUdlbjIvT21uaUdlbjJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW55LXRvLWFueSBtb2RlbCB3aXRoIHNwZWVjaCwgdmlkZW8sIGF1ZGlvLCBpbWFnZSBhbmQgdGV4dCB1bmRlcnN0YW5kaW5nIGNhcGFiaWxpdGllcy5cIixcbiAgICAgICAgICAgIGlkOiBcIm9wZW5ibWIvTWluaUNQTS1vLTJfNlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIG1vZGVsIHRoYXQgY2FuIHVuZGVyc3RhbmQgaW1hZ2UgYW5kIHRleHQgYW5kIGdlbmVyYXRlIGltYWdlIGFuZCB0ZXh0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiQnl0ZURhbmNlLVNlZWQvQkFHRUwtN0ItTW9UXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdG8gY2hhdCB3aXRoIGFuIGFueS10by1hbnkgKGltYWdlICYgdGV4dCkgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJPbW5pR2VuMi9PbW5pR2VuMlwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJBbnktdG8tYW55IG1vZGVscyBjYW4gdW5kZXJzdGFuZCB0d28gb3IgbW9yZSBtb2RhbGl0aWVzIGFuZCBvdXRwdXQgdHdvIG9yIG1vcmUgbW9kYWxpdGllcy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJsYWJlbCIsImNvbnRlbnQiLCJvdXRwdXRzIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/any-to-any/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-classification/data.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/audio-classification/data.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A benchmark of 10 different audio tasks.\",\n            id: \"s3prl/superb\"\n        },\n        {\n            description: \"A dataset of YouTube clips and their sound categories.\",\n            id: \"agkphysics/AudioSet\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"audio.wav\",\n                type: \"audio\"\n            }\n        ],\n        outputs: [\n            {\n                data: [\n                    {\n                        label: \"Up\",\n                        score: 0.2\n                    },\n                    {\n                        label: \"Down\",\n                        score: 0.8\n                    }\n                ],\n                type: \"chart\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"An easy-to-use model for command recognition.\",\n            id: \"speechbrain/google_speech_command_xvector\"\n        },\n        {\n            description: \"An emotion recognition model.\",\n            id: \"ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition\"\n        },\n        {\n            description: \"A language identification model.\",\n            id: \"facebook/mms-lid-126\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can classify music into different genre.\",\n            id: \"kurianbenoy/audioclassification\"\n        }\n    ],\n    summary: \"Audio classification is the task of assigning a label or class to a given audio. It can be used for recognizing which command a user is giving or the emotion of a statement, as well as identifying a speaker.\",\n    widgetModels: [\n        \"MIT/ast-finetuned-audioset-10-10-0.4593\"\n    ],\n    youtubeId: \"KWwzcmG98Ds\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2F1ZGlvLWNsYXNzaWZpY2F0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0lDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJQyxNQUFNO29CQUNGO3dCQUNJQyxPQUFPO3dCQUNQQyxPQUFPO29CQUNYO29CQUNBO3dCQUNJRCxPQUFPO3dCQUNQQyxPQUFPO29CQUNYO2lCQUNIO2dCQUNESixNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FLLFNBQVM7UUFDTDtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxRQUFRO1FBQ0o7WUFDSVosYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEWSxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUEwQztJQUN6REMsV0FBVztBQUNmO0FBQ0EsaUVBQWVqQixRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2F1ZGlvLWNsYXNzaWZpY2F0aW9uL2RhdGEuanM/MDVhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGJlbmNobWFyayBvZiAxMCBkaWZmZXJlbnQgYXVkaW8gdGFza3MuXCIsXG4gICAgICAgICAgICBpZDogXCJzM3BybC9zdXBlcmJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkYXRhc2V0IG9mIFlvdVR1YmUgY2xpcHMgYW5kIHRoZWlyIHNvdW5kIGNhdGVnb3JpZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJhZ2twaHlzaWNzL0F1ZGlvU2V0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImF1ZGlvLndhdlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXVkaW9cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlVwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4yLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEb3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC44LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJjaGFydFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJhY2N1cmFjeVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcInJlY2FsbFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcInByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcImYxXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gZWFzeS10by11c2UgbW9kZWwgZm9yIGNvbW1hbmQgcmVjb2duaXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJzcGVlY2hicmFpbi9nb29nbGVfc3BlZWNoX2NvbW1hbmRfeHZlY3RvclwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBlbW90aW9uIHJlY29nbml0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZWhjYWxhYnJlcy93YXYydmVjMi1sZy14bHNyLWVuLXNwZWVjaC1lbW90aW9uLXJlY29nbml0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGFuZ3VhZ2UgaWRlbnRpZmljYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9tbXMtbGlkLTEyNlwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGNsYXNzaWZ5IG11c2ljIGludG8gZGlmZmVyZW50IGdlbnJlLlwiLFxuICAgICAgICAgICAgaWQ6IFwia3VyaWFuYmVub3kvYXVkaW9jbGFzc2lmaWNhdGlvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJBdWRpbyBjbGFzc2lmaWNhdGlvbiBpcyB0aGUgdGFzayBvZiBhc3NpZ25pbmcgYSBsYWJlbCBvciBjbGFzcyB0byBhIGdpdmVuIGF1ZGlvLiBJdCBjYW4gYmUgdXNlZCBmb3IgcmVjb2duaXppbmcgd2hpY2ggY29tbWFuZCBhIHVzZXIgaXMgZ2l2aW5nIG9yIHRoZSBlbW90aW9uIG9mIGEgc3RhdGVtZW50LCBhcyB3ZWxsIGFzIGlkZW50aWZ5aW5nIGEgc3BlYWtlci5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcIk1JVC9hc3QtZmluZXR1bmVkLWF1ZGlvc2V0LTEwLTEwLTAuNDU5M1wiXSxcbiAgICB5b3V0dWJlSWQ6IFwiS1d3emNtRzk4RHNcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwiZGF0YSIsImxhYmVsIiwic2NvcmUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-to-audio/data.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/audio-to-audio/data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"512-element X-vector embeddings of speakers from CMU ARCTIC dataset.\",\n            id: \"Matthijs/cmu-arctic-xvectors\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"input.wav\",\n                type: \"audio\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"label-0.wav\",\n                type: \"audio\"\n            },\n            {\n                filename: \"label-1.wav\",\n                type: \"audio\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The Signal-to-Noise ratio is the relationship between the target signal level and the background noise level. It is calculated as the logarithm of the target signal divided by the background noise, in decibels.\",\n            id: \"snri\"\n        },\n        {\n            description: \"The Signal-to-Distortion ratio is the relationship between the target signal and the sum of noise, interference, and artifact errors\",\n            id: \"sdri\"\n        }\n    ],\n    models: [\n        {\n            description: \"A speech enhancement model.\",\n            id: \"ResembleAI/resemble-enhance\"\n        },\n        {\n            description: \"A model that can change the voice in a speech recording.\",\n            id: \"microsoft/speecht5_vc\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application for speech separation.\",\n            id: \"younver/speechbrain-speech-separation\"\n        },\n        {\n            description: \"An application for audio style transfer.\",\n            id: \"nakas/audio-diffusion_style_transfer\"\n        }\n    ],\n    summary: \"Audio-to-Audio is a family of tasks in which the input is an audio and the output is one or multiple generated audios. Some example tasks are speech enhancement and source separation.\",\n    widgetModels: [\n        \"speechbrain/sepformer-wham\"\n    ],\n    youtubeId: \"iohj7nCCYoM\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2F1ZGlvLXRvLWF1ZGlvL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0lDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUYsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lELFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUztRQUNMO1lBQ0lQLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNETyxRQUFRO1FBQ0o7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBNkI7SUFDNUNDLFdBQVc7QUFDZjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2F1ZGlvLXRvLWF1ZGlvL2RhdGEuanM/ZjM3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCI1MTItZWxlbWVudCBYLXZlY3RvciBlbWJlZGRpbmdzIG9mIHNwZWFrZXJzIGZyb20gQ01VIEFSQ1RJQyBkYXRhc2V0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiTWF0dGhpanMvY211LWFyY3RpYy14dmVjdG9yc1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJpbnB1dC53YXZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImF1ZGlvXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwibGFiZWwtMC53YXZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImF1ZGlvXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImxhYmVsLTEud2F2XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhdWRpb1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIFNpZ25hbC10by1Ob2lzZSByYXRpbyBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHRhcmdldCBzaWduYWwgbGV2ZWwgYW5kIHRoZSBiYWNrZ3JvdW5kIG5vaXNlIGxldmVsLiBJdCBpcyBjYWxjdWxhdGVkIGFzIHRoZSBsb2dhcml0aG0gb2YgdGhlIHRhcmdldCBzaWduYWwgZGl2aWRlZCBieSB0aGUgYmFja2dyb3VuZCBub2lzZSwgaW4gZGVjaWJlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJzbnJpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBTaWduYWwtdG8tRGlzdG9ydGlvbiByYXRpbyBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHRhcmdldCBzaWduYWwgYW5kIHRoZSBzdW0gb2Ygbm9pc2UsIGludGVyZmVyZW5jZSwgYW5kIGFydGlmYWN0IGVycm9yc1wiLFxuICAgICAgICAgICAgaWQ6IFwic2RyaVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3BlZWNoIGVuaGFuY2VtZW50IG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiUmVzZW1ibGVBSS9yZXNlbWJsZS1lbmhhbmNlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbW9kZWwgdGhhdCBjYW4gY2hhbmdlIHRoZSB2b2ljZSBpbiBhIHNwZWVjaCByZWNvcmRpbmcuXCIsXG4gICAgICAgICAgICBpZDogXCJtaWNyb3NvZnQvc3BlZWNodDVfdmNcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiBmb3Igc3BlZWNoIHNlcGFyYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJ5b3VudmVyL3NwZWVjaGJyYWluLXNwZWVjaC1zZXBhcmF0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIGZvciBhdWRpbyBzdHlsZSB0cmFuc2Zlci5cIixcbiAgICAgICAgICAgIGlkOiBcIm5ha2FzL2F1ZGlvLWRpZmZ1c2lvbl9zdHlsZV90cmFuc2ZlclwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJBdWRpby10by1BdWRpbyBpcyBhIGZhbWlseSBvZiB0YXNrcyBpbiB3aGljaCB0aGUgaW5wdXQgaXMgYW4gYXVkaW8gYW5kIHRoZSBvdXRwdXQgaXMgb25lIG9yIG11bHRpcGxlIGdlbmVyYXRlZCBhdWRpb3MuIFNvbWUgZXhhbXBsZSB0YXNrcyBhcmUgc3BlZWNoIGVuaGFuY2VtZW50IGFuZCBzb3VyY2Ugc2VwYXJhdGlvbi5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcInNwZWVjaGJyYWluL3NlcGZvcm1lci13aGFtXCJdLFxuICAgIHlvdXR1YmVJZDogXCJpb2hqN25DQ1lvTVwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-to-audio/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/automatic-speech-recognition/data.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/automatic-speech-recognition/data.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"31,175 hours of multilingual audio-text dataset in 108 languages.\",\n            id: \"mozilla-foundation/common_voice_17_0\"\n        },\n        {\n            description: \"Multilingual and diverse audio dataset with 101k hours of audio.\",\n            id: \"amphion/Emilia-Dataset\"\n        },\n        {\n            description: \"A dataset with 44.6k hours of English speaker data and 6k hours of other language speakers.\",\n            id: \"parler-tts/mls_eng\"\n        },\n        {\n            description: \"A multilingual audio dataset with 370K hours of audio.\",\n            id: \"espnet/yodas\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"input.flac\",\n                type: \"audio\"\n            }\n        ],\n        outputs: [\n            {\n                /// GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES I\n                label: \"Transcript\",\n                content: \"Going along slushy country roads and speaking to damp audiences in...\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"wer\"\n        },\n        {\n            description: \"\",\n            id: \"cer\"\n        }\n    ],\n    models: [\n        {\n            description: \"A powerful ASR model by OpenAI.\",\n            id: \"openai/whisper-large-v3\"\n        },\n        {\n            description: \"A good generic speech model by MetaAI for fine-tuning.\",\n            id: \"facebook/w2v-bert-2.0\"\n        },\n        {\n            description: \"An end-to-end model that performs ASR and Speech Translation by MetaAI.\",\n            id: \"facebook/seamless-m4t-v2-large\"\n        },\n        {\n            description: \"A powerful multilingual ASR and Speech Translation model by Nvidia.\",\n            id: \"nvidia/canary-1b\"\n        },\n        {\n            description: \"Powerful speaker diarization model.\",\n            id: \"pyannote/speaker-diarization-3.1\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A powerful general-purpose speech recognition application.\",\n            id: \"hf-audio/whisper-large-v3\"\n        },\n        {\n            description: \"Latest ASR model from Useful Sensors.\",\n            id: \"mrfakename/Moonshinex\"\n        },\n        {\n            description: \"A high quality speech and text translation model by Meta.\",\n            id: \"facebook/seamless_m4t\"\n        },\n        {\n            description: \"A powerful multilingual ASR and Speech Translation model by Nvidia\",\n            id: \"nvidia/canary-1b\"\n        }\n    ],\n    summary: \"Automatic Speech Recognition (ASR), also known as Speech to Text (STT), is the task of transcribing a given audio to text. It has many applications, such as voice user interfaces.\",\n    widgetModels: [\n        \"openai/whisper-large-v3\"\n    ],\n    youtubeId: \"TksaY_FDgnk\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2F1dG9tYXRpYy1zcGVlY2gtcmVjb2duaXRpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJLHFFQUFxRTtnQkFDckVDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RILE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUksU0FBUztRQUNMO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQTBCO0lBQ3pDQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvYXV0b21hdGljLXNwZWVjaC1yZWNvZ25pdGlvbi9kYXRhLmpzPzc2ODYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiMzEsMTc1IGhvdXJzIG9mIG11bHRpbGluZ3VhbCBhdWRpby10ZXh0IGRhdGFzZXQgaW4gMTA4IGxhbmd1YWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIm1vemlsbGEtZm91bmRhdGlvbi9jb21tb25fdm9pY2VfMTdfMFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNdWx0aWxpbmd1YWwgYW5kIGRpdmVyc2UgYXVkaW8gZGF0YXNldCB3aXRoIDEwMWsgaG91cnMgb2YgYXVkaW8uXCIsXG4gICAgICAgICAgICBpZDogXCJhbXBoaW9uL0VtaWxpYS1EYXRhc2V0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZGF0YXNldCB3aXRoIDQ0LjZrIGhvdXJzIG9mIEVuZ2xpc2ggc3BlYWtlciBkYXRhIGFuZCA2ayBob3VycyBvZiBvdGhlciBsYW5ndWFnZSBzcGVha2Vycy5cIixcbiAgICAgICAgICAgIGlkOiBcInBhcmxlci10dHMvbWxzX2VuZ1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIG11bHRpbGluZ3VhbCBhdWRpbyBkYXRhc2V0IHdpdGggMzcwSyBob3VycyBvZiBhdWRpby5cIixcbiAgICAgICAgICAgIGlkOiBcImVzcG5ldC95b2Rhc1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJpbnB1dC5mbGFjXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhdWRpb1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vLyBHT0lORyBBTE9ORyBTTFVTSFkgQ09VTlRSWSBST0FEUyBBTkQgU1BFQUtJTkcgVE8gREFNUCBBVURJRU5DRVMgSVxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlRyYW5zY3JpcHRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkdvaW5nIGFsb25nIHNsdXNoeSBjb3VudHJ5IHJvYWRzIGFuZCBzcGVha2luZyB0byBkYW1wIGF1ZGllbmNlcyBpbi4uLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJ3ZXJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJjZXJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHBvd2VyZnVsIEFTUiBtb2RlbCBieSBPcGVuQUkuXCIsXG4gICAgICAgICAgICBpZDogXCJvcGVuYWkvd2hpc3Blci1sYXJnZS12M1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGdvb2QgZ2VuZXJpYyBzcGVlY2ggbW9kZWwgYnkgTWV0YUFJIGZvciBmaW5lLXR1bmluZy5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL3cydi1iZXJ0LTIuMFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBlbmQtdG8tZW5kIG1vZGVsIHRoYXQgcGVyZm9ybXMgQVNSIGFuZCBTcGVlY2ggVHJhbnNsYXRpb24gYnkgTWV0YUFJLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFjZWJvb2svc2VhbWxlc3MtbTR0LXYyLWxhcmdlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcG93ZXJmdWwgbXVsdGlsaW5ndWFsIEFTUiBhbmQgU3BlZWNoIFRyYW5zbGF0aW9uIG1vZGVsIGJ5IE52aWRpYS5cIixcbiAgICAgICAgICAgIGlkOiBcIm52aWRpYS9jYW5hcnktMWJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUG93ZXJmdWwgc3BlYWtlciBkaWFyaXphdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcInB5YW5ub3RlL3NwZWFrZXItZGlhcml6YXRpb24tMy4xXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBwb3dlcmZ1bCBnZW5lcmFsLXB1cnBvc2Ugc3BlZWNoIHJlY29nbml0aW9uIGFwcGxpY2F0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaGYtYXVkaW8vd2hpc3Blci1sYXJnZS12M1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJMYXRlc3QgQVNSIG1vZGVsIGZyb20gVXNlZnVsIFNlbnNvcnMuXCIsXG4gICAgICAgICAgICBpZDogXCJtcmZha2VuYW1lL01vb25zaGluZXhcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBoaWdoIHF1YWxpdHkgc3BlZWNoIGFuZCB0ZXh0IHRyYW5zbGF0aW9uIG1vZGVsIGJ5IE1ldGEuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9zZWFtbGVzc19tNHRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBwb3dlcmZ1bCBtdWx0aWxpbmd1YWwgQVNSIGFuZCBTcGVlY2ggVHJhbnNsYXRpb24gbW9kZWwgYnkgTnZpZGlhXCIsXG4gICAgICAgICAgICBpZDogXCJudmlkaWEvY2FuYXJ5LTFiXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIkF1dG9tYXRpYyBTcGVlY2ggUmVjb2duaXRpb24gKEFTUiksIGFsc28ga25vd24gYXMgU3BlZWNoIHRvIFRleHQgKFNUVCksIGlzIHRoZSB0YXNrIG9mIHRyYW5zY3JpYmluZyBhIGdpdmVuIGF1ZGlvIHRvIHRleHQuIEl0IGhhcyBtYW55IGFwcGxpY2F0aW9ucywgc3VjaCBhcyB2b2ljZSB1c2VyIGludGVyZmFjZXMuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJvcGVuYWkvd2hpc3Blci1sYXJnZS12M1wiXSxcbiAgICB5b3V0dWJlSWQ6IFwiVGtzYVlfRkRnbmtcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwibGFiZWwiLCJjb250ZW50IiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/automatic-speech-recognition/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/depth-estimation/data.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/depth-estimation/data.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"NYU Depth V2 Dataset: Video dataset containing both RGB and depth sensor data.\",\n            id: \"sayakpaul/nyu_depth_v2\"\n        },\n        {\n            description: \"Monocular depth estimation benchmark based without noise and errors.\",\n            id: \"depth-anything/DA-2K\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"depth-estimation-input.jpg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"depth-estimation-output.png\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Cutting-edge depth estimation model.\",\n            id: \"depth-anything/Depth-Anything-V2-Large\"\n        },\n        {\n            description: \"A strong monocular depth estimation model.\",\n            id: \"jingheya/lotus-depth-g-v1-0\"\n        },\n        {\n            description: \"A depth estimation model that predicts depth in videos.\",\n            id: \"tencent/DepthCrafter\"\n        },\n        {\n            description: \"A robust depth estimation model.\",\n            id: \"apple/DepthPro-hf\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that predicts the depth of an image and then reconstruct the 3D model as voxels.\",\n            id: \"radames/dpt-depth-estimation-3d-voxels\"\n        },\n        {\n            description: \"An application for bleeding-edge depth estimation.\",\n            id: \"akhaliq/depth-pro\"\n        },\n        {\n            description: \"An application on cutting-edge depth estimation in videos.\",\n            id: \"tencent/DepthCrafter\"\n        },\n        {\n            description: \"A human-centric depth estimation application.\",\n            id: \"facebook/sapiens-depth\"\n        }\n    ],\n    summary: \"Depth estimation is the task of predicting depth of the objects present in an image.\",\n    widgetModels: [\n        \"\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2RlcHRoLWVzdGltYXRpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lGLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUyxFQUFFO0lBQ1hDLFFBQVE7UUFDSjtZQUNJUixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQUc7SUFDbEJDLFdBQVc7QUFDZjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2RlcHRoLWVzdGltYXRpb24vZGF0YS5qcz8yNzk1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk5ZVSBEZXB0aCBWMiBEYXRhc2V0OiBWaWRlbyBkYXRhc2V0IGNvbnRhaW5pbmcgYm90aCBSR0IgYW5kIGRlcHRoIHNlbnNvciBkYXRhLlwiLFxuICAgICAgICAgICAgaWQ6IFwic2F5YWtwYXVsL255dV9kZXB0aF92MlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNb25vY3VsYXIgZGVwdGggZXN0aW1hdGlvbiBiZW5jaG1hcmsgYmFzZWQgd2l0aG91dCBub2lzZSBhbmQgZXJyb3JzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZGVwdGgtYW55dGhpbmcvREEtMktcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiZGVwdGgtZXN0aW1hdGlvbi1pbnB1dC5qcGdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImRlcHRoLWVzdGltYXRpb24tb3V0cHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW10sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkN1dHRpbmctZWRnZSBkZXB0aCBlc3RpbWF0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZGVwdGgtYW55dGhpbmcvRGVwdGgtQW55dGhpbmctVjItTGFyZ2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzdHJvbmcgbW9ub2N1bGFyIGRlcHRoIGVzdGltYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJqaW5naGV5YS9sb3R1cy1kZXB0aC1nLXYxLTBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkZXB0aCBlc3RpbWF0aW9uIG1vZGVsIHRoYXQgcHJlZGljdHMgZGVwdGggaW4gdmlkZW9zLlwiLFxuICAgICAgICAgICAgaWQ6IFwidGVuY2VudC9EZXB0aENyYWZ0ZXJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgZGVwdGggZXN0aW1hdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImFwcGxlL0RlcHRoUHJvLWhmXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBwcmVkaWN0cyB0aGUgZGVwdGggb2YgYW4gaW1hZ2UgYW5kIHRoZW4gcmVjb25zdHJ1Y3QgdGhlIDNEIG1vZGVsIGFzIHZveGVscy5cIixcbiAgICAgICAgICAgIGlkOiBcInJhZGFtZXMvZHB0LWRlcHRoLWVzdGltYXRpb24tM2Qtdm94ZWxzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIGZvciBibGVlZGluZy1lZGdlIGRlcHRoIGVzdGltYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJha2hhbGlxL2RlcHRoLXByb1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiBvbiBjdXR0aW5nLWVkZ2UgZGVwdGggZXN0aW1hdGlvbiBpbiB2aWRlb3MuXCIsXG4gICAgICAgICAgICBpZDogXCJ0ZW5jZW50L0RlcHRoQ3JhZnRlclwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGh1bWFuLWNlbnRyaWMgZGVwdGggZXN0aW1hdGlvbiBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL3NhcGllbnMtZGVwdGhcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiRGVwdGggZXN0aW1hdGlvbiBpcyB0aGUgdGFzayBvZiBwcmVkaWN0aW5nIGRlcHRoIG9mIHRoZSBvYmplY3RzIHByZXNlbnQgaW4gYW4gaW1hZ2UuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJcIl0sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/depth-estimation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/document-question-answering/data.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/document-question-answering/data.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Largest document understanding dataset.\",\n            id: \"HuggingFaceM4/Docmatix\"\n        },\n        {\n            description: \"Dataset from the 2020 DocVQA challenge. The documents are taken from the UCSF Industry Documents Library.\",\n            id: \"eliolio/docvqa\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Question\",\n                content: \"What is the idea behind the consumer relations efficiency team?\",\n                type: \"text\"\n            },\n            {\n                filename: \"document-question-answering-input.png\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"Balance cost efficiency with quality customer service\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The evaluation metric for the DocVQA challenge is the Average Normalized Levenshtein Similarity (ANLS). This metric is flexible to character regognition errors and compares the predicted answer with the ground truth answer.\",\n            id: \"anls\"\n        },\n        {\n            description: \"Exact Match is a metric based on the strict character match of the predicted answer and the right answer. For answers predicted correctly, the Exact Match will be 1. Even if only one character is different, Exact Match will be 0\",\n            id: \"exact-match\"\n        }\n    ],\n    models: [\n        {\n            description: \"A robust document question answering model.\",\n            id: \"impira/layoutlm-document-qa\"\n        },\n        {\n            description: \"A document question answering model specialized in invoices.\",\n            id: \"impira/layoutlm-invoices\"\n        },\n        {\n            description: \"A special model for OCR-free document question answering.\",\n            id: \"microsoft/udop-large\"\n        },\n        {\n            description: \"A powerful model for document question answering.\",\n            id: \"google/pix2struct-docvqa-large\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A robust document question answering application.\",\n            id: \"impira/docquery\"\n        },\n        {\n            description: \"An application that can answer questions from invoices.\",\n            id: \"impira/invoices\"\n        },\n        {\n            description: \"An application to compare different document question answering models.\",\n            id: \"merve/compare_docvqa_models\"\n        }\n    ],\n    summary: \"Document Question Answering (also known as Document Visual Question Answering) is the task of answering questions on document images. Document question answering models take a (document, question) pair as input and return an answer in natural language. Models usually rely on multi-modal features, combining text, position of words (bounding-boxes) and image.\",\n    widgetModels: [\n        \"impira/layoutlm-invoices\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2RvY3VtZW50LXF1ZXN0aW9uLWFuc3dlcmluZy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtZQUNBO2dCQUNJQyxVQUFVO2dCQUNWRCxNQUFNO1lBQ1Y7U0FDSDtRQUNERSxTQUFTO1lBQ0w7Z0JBQ0lKLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUcsU0FBUztRQUNMO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBMkI7SUFDMUNDLFdBQVc7QUFDZjtBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9kb2N1bWVudC1xdWVzdGlvbi1hbnN3ZXJpbmcvZGF0YS5qcz80N2ZlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkxhcmdlc3QgZG9jdW1lbnQgdW5kZXJzdGFuZGluZyBkYXRhc2V0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiSHVnZ2luZ0ZhY2VNNC9Eb2NtYXRpeFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEYXRhc2V0IGZyb20gdGhlIDIwMjAgRG9jVlFBIGNoYWxsZW5nZS4gVGhlIGRvY3VtZW50cyBhcmUgdGFrZW4gZnJvbSB0aGUgVUNTRiBJbmR1c3RyeSBEb2N1bWVudHMgTGlicmFyeS5cIixcbiAgICAgICAgICAgIGlkOiBcImVsaW9saW8vZG9jdnFhXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlF1ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJXaGF0IGlzIHRoZSBpZGVhIGJlaGluZCB0aGUgY29uc3VtZXIgcmVsYXRpb25zIGVmZmljaWVuY3kgdGVhbT9cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiZG9jdW1lbnQtcXVlc3Rpb24tYW5zd2VyaW5nLWlucHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQW5zd2VyXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJCYWxhbmNlIGNvc3QgZWZmaWNpZW5jeSB3aXRoIHF1YWxpdHkgY3VzdG9tZXIgc2VydmljZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGV2YWx1YXRpb24gbWV0cmljIGZvciB0aGUgRG9jVlFBIGNoYWxsZW5nZSBpcyB0aGUgQXZlcmFnZSBOb3JtYWxpemVkIExldmVuc2h0ZWluIFNpbWlsYXJpdHkgKEFOTFMpLiBUaGlzIG1ldHJpYyBpcyBmbGV4aWJsZSB0byBjaGFyYWN0ZXIgcmVnb2duaXRpb24gZXJyb3JzIGFuZCBjb21wYXJlcyB0aGUgcHJlZGljdGVkIGFuc3dlciB3aXRoIHRoZSBncm91bmQgdHJ1dGggYW5zd2VyLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYW5sc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJFeGFjdCBNYXRjaCBpcyBhIG1ldHJpYyBiYXNlZCBvbiB0aGUgc3RyaWN0IGNoYXJhY3RlciBtYXRjaCBvZiB0aGUgcHJlZGljdGVkIGFuc3dlciBhbmQgdGhlIHJpZ2h0IGFuc3dlci4gRm9yIGFuc3dlcnMgcHJlZGljdGVkIGNvcnJlY3RseSwgdGhlIEV4YWN0IE1hdGNoIHdpbGwgYmUgMS4gRXZlbiBpZiBvbmx5IG9uZSBjaGFyYWN0ZXIgaXMgZGlmZmVyZW50LCBFeGFjdCBNYXRjaCB3aWxsIGJlIDBcIixcbiAgICAgICAgICAgIGlkOiBcImV4YWN0LW1hdGNoXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgZG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW1waXJhL2xheW91dGxtLWRvY3VtZW50LXFhXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nIG1vZGVsIHNwZWNpYWxpemVkIGluIGludm9pY2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW1waXJhL2xheW91dGxtLWludm9pY2VzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3BlY2lhbCBtb2RlbCBmb3IgT0NSLWZyZWUgZG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWljcm9zb2Z0L3Vkb3AtbGFyZ2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBwb3dlcmZ1bCBtb2RlbCBmb3IgZG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlL3BpeDJzdHJ1Y3QtZG9jdnFhLWxhcmdlXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgZG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nIGFwcGxpY2F0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW1waXJhL2RvY3F1ZXJ5XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgZnJvbSBpbnZvaWNlcy5cIixcbiAgICAgICAgICAgIGlkOiBcImltcGlyYS9pbnZvaWNlc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0byBjb21wYXJlIGRpZmZlcmVudCBkb2N1bWVudCBxdWVzdGlvbiBhbnN3ZXJpbmcgbW9kZWxzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWVydmUvY29tcGFyZV9kb2N2cWFfbW9kZWxzXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIkRvY3VtZW50IFF1ZXN0aW9uIEFuc3dlcmluZyAoYWxzbyBrbm93biBhcyBEb2N1bWVudCBWaXN1YWwgUXVlc3Rpb24gQW5zd2VyaW5nKSBpcyB0aGUgdGFzayBvZiBhbnN3ZXJpbmcgcXVlc3Rpb25zIG9uIGRvY3VtZW50IGltYWdlcy4gRG9jdW1lbnQgcXVlc3Rpb24gYW5zd2VyaW5nIG1vZGVscyB0YWtlIGEgKGRvY3VtZW50LCBxdWVzdGlvbikgcGFpciBhcyBpbnB1dCBhbmQgcmV0dXJuIGFuIGFuc3dlciBpbiBuYXR1cmFsIGxhbmd1YWdlLiBNb2RlbHMgdXN1YWxseSByZWx5IG9uIG11bHRpLW1vZGFsIGZlYXR1cmVzLCBjb21iaW5pbmcgdGV4dCwgcG9zaXRpb24gb2Ygd29yZHMgKGJvdW5kaW5nLWJveGVzKSBhbmQgaW1hZ2UuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJpbXBpcmEvbGF5b3V0bG0taW52b2ljZXNcIl0sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJmaWxlbmFtZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/document-question-answering/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/feature-extraction/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/feature-extraction/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Wikipedia dataset containing cleaned articles of all languages. Can be used to train `feature-extraction` models.\",\n            id: \"wikipedia\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"India, officially the Republic of India, is a country in South Asia.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                table: [\n                    [\n                        \"Dimension 1\",\n                        \"Dimension 2\",\n                        \"Dimension 3\"\n                    ],\n                    [\n                        \"2.583383083343506\",\n                        \"2.757075071334839\",\n                        \"0.9023529887199402\"\n                    ],\n                    [\n                        \"8.29393482208252\",\n                        \"1.1071064472198486\",\n                        \"2.03399395942688\"\n                    ],\n                    [\n                        \"-0.7754912972450256\",\n                        \"-1.647324562072754\",\n                        \"-0.6113331913948059\"\n                    ],\n                    [\n                        \"0.07087723910808563\",\n                        \"1.5942802429199219\",\n                        \"1.4610432386398315\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A powerful feature extraction model for natural language processing tasks.\",\n            id: \"thenlper/gte-large\"\n        },\n        {\n            description: \"A strong feature extraction model for retrieval.\",\n            id: \"Alibaba-NLP/gte-Qwen1.5-7B-instruct\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to rank text feature extraction models based on a benchmark.\",\n            id: \"mteb/leaderboard\"\n        },\n        {\n            description: \"A leaderboard to rank best feature extraction models based on human feedback.\",\n            id: \"mteb/arena\"\n        }\n    ],\n    summary: \"Feature extraction is the task of extracting features learnt in a model.\",\n    widgetModels: [\n        \"facebook/bart-base\"\n    ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ZlYXR1cmUtZXh0cmFjdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lDLE9BQU87b0JBQ0g7d0JBQUM7d0JBQWU7d0JBQWU7cUJBQWM7b0JBQzdDO3dCQUFDO3dCQUFxQjt3QkFBcUI7cUJBQXFCO29CQUNoRTt3QkFBQzt3QkFBb0I7d0JBQXNCO3FCQUFtQjtvQkFDOUQ7d0JBQUM7d0JBQXVCO3dCQUFzQjtxQkFBc0I7b0JBQ3BFO3dCQUFDO3dCQUF1Qjt3QkFBc0I7cUJBQXFCO2lCQUN0RTtnQkFDREYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRyxTQUFTLEVBQUU7SUFDWEMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQXFCO0FBQ3hDO0FBQ0EsaUVBQWVmLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvZmVhdHVyZS1leHRyYWN0aW9uL2RhdGEuanM/NzY3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJXaWtpcGVkaWEgZGF0YXNldCBjb250YWluaW5nIGNsZWFuZWQgYXJ0aWNsZXMgb2YgYWxsIGxhbmd1YWdlcy4gQ2FuIGJlIHVzZWQgdG8gdHJhaW4gYGZlYXR1cmUtZXh0cmFjdGlvbmAgbW9kZWxzLlwiLFxuICAgICAgICAgICAgaWQ6IFwid2lraXBlZGlhXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIklucHV0XCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJJbmRpYSwgb2ZmaWNpYWxseSB0aGUgUmVwdWJsaWMgb2YgSW5kaWEsIGlzIGEgY291bnRyeSBpbiBTb3V0aCBBc2lhLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhYmxlOiBbXG4gICAgICAgICAgICAgICAgICAgIFtcIkRpbWVuc2lvbiAxXCIsIFwiRGltZW5zaW9uIDJcIiwgXCJEaW1lbnNpb24gM1wiXSxcbiAgICAgICAgICAgICAgICAgICAgW1wiMi41ODMzODMwODMzNDM1MDZcIiwgXCIyLjc1NzA3NTA3MTMzNDgzOVwiLCBcIjAuOTAyMzUyOTg4NzE5OTQwMlwiXSxcbiAgICAgICAgICAgICAgICAgICAgW1wiOC4yOTM5MzQ4MjIwODI1MlwiLCBcIjEuMTA3MTA2NDQ3MjE5ODQ4NlwiLCBcIjIuMDMzOTkzOTU5NDI2ODhcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcIi0wLjc3NTQ5MTI5NzI0NTAyNTZcIiwgXCItMS42NDczMjQ1NjIwNzI3NTRcIiwgXCItMC42MTEzMzMxOTEzOTQ4MDU5XCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCIwLjA3MDg3NzIzOTEwODA4NTYzXCIsIFwiMS41OTQyODAyNDI5MTk5MjE5XCIsIFwiMS40NjEwNDMyMzg2Mzk4MzE1XCJdLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0YWJ1bGFyXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW10sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcG93ZXJmdWwgZmVhdHVyZSBleHRyYWN0aW9uIG1vZGVsIGZvciBuYXR1cmFsIGxhbmd1YWdlIHByb2Nlc3NpbmcgdGFza3MuXCIsXG4gICAgICAgICAgICBpZDogXCJ0aGVubHBlci9ndGUtbGFyZ2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzdHJvbmcgZmVhdHVyZSBleHRyYWN0aW9uIG1vZGVsIGZvciByZXRyaWV2YWwuXCIsXG4gICAgICAgICAgICBpZDogXCJBbGliYWJhLU5MUC9ndGUtUXdlbjEuNS03Qi1pbnN0cnVjdFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGVhZGVyYm9hcmQgdG8gcmFuayB0ZXh0IGZlYXR1cmUgZXh0cmFjdGlvbiBtb2RlbHMgYmFzZWQgb24gYSBiZW5jaG1hcmsuXCIsXG4gICAgICAgICAgICBpZDogXCJtdGViL2xlYWRlcmJvYXJkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGVhZGVyYm9hcmQgdG8gcmFuayBiZXN0IGZlYXR1cmUgZXh0cmFjdGlvbiBtb2RlbHMgYmFzZWQgb24gaHVtYW4gZmVlZGJhY2suXCIsXG4gICAgICAgICAgICBpZDogXCJtdGViL2FyZW5hXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIkZlYXR1cmUgZXh0cmFjdGlvbiBpcyB0aGUgdGFzayBvZiBleHRyYWN0aW5nIGZlYXR1cmVzIGxlYXJudCBpbiBhIG1vZGVsLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiZmFjZWJvb2svYmFydC1iYXNlXCJdLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJvdXRwdXRzIiwidGFibGUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/feature-extraction/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/fill-mask/data.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/fill-mask/data.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A common dataset that is used to train models for many languages.\",\n            id: \"wikipedia\"\n        },\n        {\n            description: \"A large English dataset with text crawled from the web.\",\n            id: \"c4\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"The <mask> barked at me\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"wolf\",\n                        score: 0.487\n                    },\n                    {\n                        label: \"dog\",\n                        score: 0.061\n                    },\n                    {\n                        label: \"cat\",\n                        score: 0.058\n                    },\n                    {\n                        label: \"fox\",\n                        score: 0.047\n                    },\n                    {\n                        label: \"squirrel\",\n                        score: 0.025\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Cross Entropy is a metric that calculates the difference between two probability distributions. Each probability distribution is the distribution of predicted words\",\n            id: \"cross_entropy\"\n        },\n        {\n            description: \"Perplexity is the exponential of the cross-entropy loss. It evaluates the probabilities assigned to the next word by the model. Lower perplexity indicates better performance\",\n            id: \"perplexity\"\n        }\n    ],\n    models: [\n        {\n            description: \"State-of-the-art masked language model.\",\n            id: \"answerdotai/ModernBERT-large\"\n        },\n        {\n            description: \"A multilingual model trained on 100 languages.\",\n            id: \"FacebookAI/xlm-roberta-base\"\n        }\n    ],\n    spaces: [],\n    summary: \"Masked language modeling is the task of masking some of the words in a sentence and predicting which words should replace those masks. These models are useful when we want to get a statistical understanding of the language in which the model is trained in.\",\n    widgetModels: [\n        \"distilroberta-base\"\n    ],\n    youtubeId: \"mqElG5QJWUg\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ZpbGwtbWFzay9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUQsTUFBTTtnQkFDTkUsTUFBTTtvQkFDRjt3QkFDSUosT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtpQkFDSDtZQUNMO1NBQ0g7SUFDTDtJQUNBQyxTQUFTO1FBQ0w7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsUUFBUSxFQUFFO0lBQ1ZDLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQXFCO0lBQ3BDQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWpCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvZmlsbC1tYXNrL2RhdGEuanM/MGI0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGNvbW1vbiBkYXRhc2V0IHRoYXQgaXMgdXNlZCB0byB0cmFpbiBtb2RlbHMgZm9yIG1hbnkgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwid2lraXBlZGlhXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGFyZ2UgRW5nbGlzaCBkYXRhc2V0IHdpdGggdGV4dCBjcmF3bGVkIGZyb20gdGhlIHdlYi5cIixcbiAgICAgICAgICAgIGlkOiBcImM0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIklucHV0XCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJUaGUgPG1hc2s+IGJhcmtlZCBhdCBtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hhcnRcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIndvbGZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjQ4NyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiZG9nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4wNjEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcImNhdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMDU4LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJmb3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjA0NyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwic3F1aXJyZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjAyNSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ3Jvc3MgRW50cm9weSBpcyBhIG1ldHJpYyB0aGF0IGNhbGN1bGF0ZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gcHJvYmFiaWxpdHkgZGlzdHJpYnV0aW9ucy4gRWFjaCBwcm9iYWJpbGl0eSBkaXN0cmlidXRpb24gaXMgdGhlIGRpc3RyaWJ1dGlvbiBvZiBwcmVkaWN0ZWQgd29yZHNcIixcbiAgICAgICAgICAgIGlkOiBcImNyb3NzX2VudHJvcHlcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUGVycGxleGl0eSBpcyB0aGUgZXhwb25lbnRpYWwgb2YgdGhlIGNyb3NzLWVudHJvcHkgbG9zcy4gSXQgZXZhbHVhdGVzIHRoZSBwcm9iYWJpbGl0aWVzIGFzc2lnbmVkIHRvIHRoZSBuZXh0IHdvcmQgYnkgdGhlIG1vZGVsLiBMb3dlciBwZXJwbGV4aXR5IGluZGljYXRlcyBiZXR0ZXIgcGVyZm9ybWFuY2VcIixcbiAgICAgICAgICAgIGlkOiBcInBlcnBsZXhpdHlcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdGF0ZS1vZi10aGUtYXJ0IG1hc2tlZCBsYW5ndWFnZSBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImFuc3dlcmRvdGFpL01vZGVybkJFUlQtbGFyZ2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBtdWx0aWxpbmd1YWwgbW9kZWwgdHJhaW5lZCBvbiAxMDAgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiRmFjZWJvb2tBSS94bG0tcm9iZXJ0YS1iYXNlXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtdLFxuICAgIHN1bW1hcnk6IFwiTWFza2VkIGxhbmd1YWdlIG1vZGVsaW5nIGlzIHRoZSB0YXNrIG9mIG1hc2tpbmcgc29tZSBvZiB0aGUgd29yZHMgaW4gYSBzZW50ZW5jZSBhbmQgcHJlZGljdGluZyB3aGljaCB3b3JkcyBzaG91bGQgcmVwbGFjZSB0aG9zZSBtYXNrcy4gVGhlc2UgbW9kZWxzIGFyZSB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvIGdldCBhIHN0YXRpc3RpY2FsIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGxhbmd1YWdlIGluIHdoaWNoIHRoZSBtb2RlbCBpcyB0cmFpbmVkIGluLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiZGlzdGlscm9iZXJ0YS1iYXNlXCJdLFxuICAgIHlvdXR1YmVJZDogXCJtcUVsRzVRSldVZ1wiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJvdXRwdXRzIiwiZGF0YSIsInNjb3JlIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/fill-mask/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-classification/data.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-classification/data.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Benchmark dataset used for image classification with images that belong to 100 classes.\",\n            id: \"cifar100\"\n        },\n        {\n            // TODO write proper description\n            description: \"Dataset consisting of images of garments.\",\n            id: \"fashion_mnist\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-classification-input.jpeg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Egyptian cat\",\n                        score: 0.514\n                    },\n                    {\n                        label: \"Tabby cat\",\n                        score: 0.193\n                    },\n                    {\n                        label: \"Tiger cat\",\n                        score: 0.068\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"A strong image classification model.\",\n            id: \"google/vit-base-patch16-224\"\n        },\n        {\n            description: \"A robust image classification model.\",\n            id: \"facebook/deit-base-distilled-patch16-224\"\n        },\n        {\n            description: \"A strong image classification model.\",\n            id: \"facebook/convnext-large-224\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to evaluate different image classification models.\",\n            id: \"timm/leaderboard\"\n        }\n    ],\n    summary: \"Image classification is the task of assigning a label or class to an entire image. Images are expected to have only one class for each image. Image classification models take an image as input and return a prediction about which class the image belongs to.\",\n    widgetModels: [\n        \"google/vit-base-patch16-224\"\n    ],\n    youtubeId: \"tjAIM7BOYhw\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLWNsYXNzaWZpY2F0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0ksZ0NBQWdDO1lBQ2hDQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0ksZ0NBQWdDO1lBQ2hDRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lELE1BQU07Z0JBQ05FLE1BQU07b0JBQ0Y7d0JBQ0lDLE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lELE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lELE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7aUJBQ0g7WUFDTDtTQUNIO0lBQ0w7SUFDQUMsU0FBUztRQUNMO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsUUFBUTtRQUNKO1lBQ0lYLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFFBQVE7UUFDSjtZQUNJWixhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RZLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQThCO0lBQzdDQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWpCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvaW1hZ2UtY2xhc3NpZmljYXRpb24vZGF0YS5qcz9kZWU0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gd3JpdGUgcHJvcGVyIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCZW5jaG1hcmsgZGF0YXNldCB1c2VkIGZvciBpbWFnZSBjbGFzc2lmaWNhdGlvbiB3aXRoIGltYWdlcyB0aGF0IGJlbG9uZyB0byAxMDAgY2xhc3Nlcy5cIixcbiAgICAgICAgICAgIGlkOiBcImNpZmFyMTAwXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gd3JpdGUgcHJvcGVyIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEYXRhc2V0IGNvbnNpc3Rpbmcgb2YgaW1hZ2VzIG9mIGdhcm1lbnRzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFzaGlvbl9tbmlzdFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJpbWFnZS1jbGFzc2lmaWNhdGlvbi1pbnB1dC5qcGVnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJFZ3lwdGlhbiBjYXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjUxNCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVGFiYnkgY2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4xOTMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlRpZ2VyIGNhdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMDY4LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcImFjY3VyYWN5XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwicmVjYWxsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwicHJlY2lzaW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwiZjFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHN0cm9uZyBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImdvb2dsZS92aXQtYmFzZS1wYXRjaDE2LTIyNFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL2RlaXQtYmFzZS1kaXN0aWxsZWQtcGF0Y2gxNi0yMjRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzdHJvbmcgaW1hZ2UgY2xhc3NpZmljYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9jb252bmV4dC1sYXJnZS0yMjRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGxlYWRlcmJvYXJkIHRvIGV2YWx1YXRlIGRpZmZlcmVudCBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJ0aW1tL2xlYWRlcmJvYXJkXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIkltYWdlIGNsYXNzaWZpY2F0aW9uIGlzIHRoZSB0YXNrIG9mIGFzc2lnbmluZyBhIGxhYmVsIG9yIGNsYXNzIHRvIGFuIGVudGlyZSBpbWFnZS4gSW1hZ2VzIGFyZSBleHBlY3RlZCB0byBoYXZlIG9ubHkgb25lIGNsYXNzIGZvciBlYWNoIGltYWdlLiBJbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbHMgdGFrZSBhbiBpbWFnZSBhcyBpbnB1dCBhbmQgcmV0dXJuIGEgcHJlZGljdGlvbiBhYm91dCB3aGljaCBjbGFzcyB0aGUgaW1hZ2UgYmVsb25ncyB0by5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcImdvb2dsZS92aXQtYmFzZS1wYXRjaDE2LTIyNFwiXSxcbiAgICB5b3V0dWJlSWQ6IFwidGpBSU03Qk9ZaHdcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwiZGF0YSIsImxhYmVsIiwic2NvcmUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-feature-extraction/data.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-feature-extraction/data.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"ImageNet-1K is a image classification dataset in which images are used to train image-feature-extraction models.\",\n            id: \"imagenet-1k\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"mask-generation-input.png\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                table: [\n                    [\n                        \"Dimension 1\",\n                        \"Dimension 2\",\n                        \"Dimension 3\"\n                    ],\n                    [\n                        \"0.21236686408519745\",\n                        \"1.0919708013534546\",\n                        \"0.8512550592422485\"\n                    ],\n                    [\n                        \"0.809657871723175\",\n                        \"-0.18544459342956543\",\n                        \"-0.7851548194885254\"\n                    ],\n                    [\n                        \"1.3103108406066895\",\n                        \"-0.2479034662246704\",\n                        \"-0.9107287526130676\"\n                    ],\n                    [\n                        \"1.8536205291748047\",\n                        \"-0.36419737339019775\",\n                        \"0.09717650711536407\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A powerful image feature extraction model.\",\n            id: \"timm/vit_large_patch14_dinov2.lvd142m\"\n        },\n        {\n            description: \"A strong image feature extraction model.\",\n            id: \"nvidia/MambaVision-T-1K\"\n        },\n        {\n            description: \"A robust image feature extraction model.\",\n            id: \"facebook/dino-vitb16\"\n        },\n        {\n            description: \"Cutting-edge image feature extraction model.\",\n            id: \"apple/aimv2-large-patch14-336-distilled\"\n        },\n        {\n            description: \"Strong image feature extraction model that can be used on images and documents.\",\n            id: \"OpenGVLab/InternViT-6B-448px-V1-2\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to evaluate different image-feature-extraction models on classification performances\",\n            id: \"timm/leaderboard\"\n        }\n    ],\n    summary: \"Image feature extraction is the task of extracting features learnt in a computer vision model.\",\n    widgetModels: []\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLWZlYXR1cmUtZXh0cmFjdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lDLE9BQU87b0JBQ0g7d0JBQUM7d0JBQWU7d0JBQWU7cUJBQWM7b0JBQzdDO3dCQUFDO3dCQUF1Qjt3QkFBc0I7cUJBQXFCO29CQUNuRTt3QkFBQzt3QkFBcUI7d0JBQXdCO3FCQUFzQjtvQkFDcEU7d0JBQUM7d0JBQXNCO3dCQUF1QjtxQkFBc0I7b0JBQ3BFO3dCQUFDO3dCQUFzQjt3QkFBd0I7cUJBQXNCO2lCQUN4RTtnQkFDREYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRyxTQUFTLEVBQUU7SUFDWEMsUUFBUTtRQUNKO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxTQUFTO0lBQ1RDLGNBQWMsRUFBRTtBQUNwQjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLWZlYXR1cmUtZXh0cmFjdGlvbi9kYXRhLmpzP2Y0ODMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW1hZ2VOZXQtMUsgaXMgYSBpbWFnZSBjbGFzc2lmaWNhdGlvbiBkYXRhc2V0IGluIHdoaWNoIGltYWdlcyBhcmUgdXNlZCB0byB0cmFpbiBpbWFnZS1mZWF0dXJlLWV4dHJhY3Rpb24gbW9kZWxzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW1hZ2VuZXQtMWtcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwibWFzay1nZW5lcmF0aW9uLWlucHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGFibGU6IFtcbiAgICAgICAgICAgICAgICAgICAgW1wiRGltZW5zaW9uIDFcIiwgXCJEaW1lbnNpb24gMlwiLCBcIkRpbWVuc2lvbiAzXCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCIwLjIxMjM2Njg2NDA4NTE5NzQ1XCIsIFwiMS4wOTE5NzA4MDEzNTM0NTQ2XCIsIFwiMC44NTEyNTUwNTkyNDIyNDg1XCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCIwLjgwOTY1Nzg3MTcyMzE3NVwiLCBcIi0wLjE4NTQ0NDU5MzQyOTU2NTQzXCIsIFwiLTAuNzg1MTU0ODE5NDg4NTI1NFwiXSxcbiAgICAgICAgICAgICAgICAgICAgW1wiMS4zMTAzMTA4NDA2MDY2ODk1XCIsIFwiLTAuMjQ3OTAzNDY2MjI0NjcwNFwiLCBcIi0wLjkxMDcyODc1MjYxMzA2NzZcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcIjEuODUzNjIwNTI5MTc0ODA0N1wiLCBcIi0wLjM2NDE5NzM3MzM5MDE5Nzc1XCIsIFwiMC4wOTcxNzY1MDcxMTUzNjQwN1wiXSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGFidWxhclwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHBvd2VyZnVsIGltYWdlIGZlYXR1cmUgZXh0cmFjdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcInRpbW0vdml0X2xhcmdlX3BhdGNoMTRfZGlub3YyLmx2ZDE0Mm1cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzdHJvbmcgaW1hZ2UgZmVhdHVyZSBleHRyYWN0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwibnZpZGlhL01hbWJhVmlzaW9uLVQtMUtcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgaW1hZ2UgZmVhdHVyZSBleHRyYWN0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFjZWJvb2svZGluby12aXRiMTZcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ3V0dGluZy1lZGdlIGltYWdlIGZlYXR1cmUgZXh0cmFjdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImFwcGxlL2FpbXYyLWxhcmdlLXBhdGNoMTQtMzM2LWRpc3RpbGxlZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdHJvbmcgaW1hZ2UgZmVhdHVyZSBleHRyYWN0aW9uIG1vZGVsIHRoYXQgY2FuIGJlIHVzZWQgb24gaW1hZ2VzIGFuZCBkb2N1bWVudHMuXCIsXG4gICAgICAgICAgICBpZDogXCJPcGVuR1ZMYWIvSW50ZXJuVmlULTZCLTQ0OHB4LVYxLTJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGxlYWRlcmJvYXJkIHRvIGV2YWx1YXRlIGRpZmZlcmVudCBpbWFnZS1mZWF0dXJlLWV4dHJhY3Rpb24gbW9kZWxzIG9uIGNsYXNzaWZpY2F0aW9uIHBlcmZvcm1hbmNlc1wiLFxuICAgICAgICAgICAgaWQ6IFwidGltbS9sZWFkZXJib2FyZFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJJbWFnZSBmZWF0dXJlIGV4dHJhY3Rpb24gaXMgdGhlIHRhc2sgb2YgZXh0cmFjdGluZyBmZWF0dXJlcyBsZWFybnQgaW4gYSBjb21wdXRlciB2aXNpb24gbW9kZWwuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXSxcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwidGFibGUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-feature-extraction/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-segmentation/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-segmentation/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Scene segmentation dataset.\",\n            id: \"scene_parse_150\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-segmentation-input.jpeg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"image-segmentation-output.png\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Average Precision (AP) is the Area Under the PR Curve (AUC-PR). It is calculated for each semantic class separately\",\n            id: \"Average Precision\"\n        },\n        {\n            description: \"Mean Average Precision (mAP) is the overall average of the AP values\",\n            id: \"Mean Average Precision\"\n        },\n        {\n            description: \"Intersection over Union (IoU) is the overlap of segmentation masks. Mean IoU is the average of the IoU of all semantic classes\",\n            id: \"Mean Intersection over Union\"\n        },\n        {\n            description: \"APα is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\"\n        }\n    ],\n    models: [\n        {\n            // TO DO: write description\n            description: \"Solid panoptic segmentation model trained on COCO.\",\n            id: \"tue-mps/coco_panoptic_eomt_large_640\"\n        },\n        {\n            description: \"Background removal model.\",\n            id: \"briaai/RMBG-1.4\"\n        },\n        {\n            description: \"A multipurpose image segmentation model for high resolution images.\",\n            id: \"ZhengPeng7/BiRefNet\"\n        },\n        {\n            description: \"Powerful human-centric image segmentation model.\",\n            id: \"facebook/sapiens-seg-1b\"\n        },\n        {\n            description: \"Panoptic segmentation model trained on the COCO (common objects) dataset.\",\n            id: \"facebook/mask2former-swin-large-coco-panoptic\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A semantic segmentation application that can predict unseen instances out of the box.\",\n            id: \"facebook/ov-seg\"\n        },\n        {\n            description: \"One of the strongest segmentation applications.\",\n            id: \"jbrinkma/segment-anything\"\n        },\n        {\n            description: \"A human-centric segmentation model.\",\n            id: \"facebook/sapiens-pose\"\n        },\n        {\n            description: \"An instance segmentation application to predict neuronal cell types from microscopy images.\",\n            id: \"rashmi/sartorius-cell-instance-segmentation\"\n        },\n        {\n            description: \"An application that segments videos.\",\n            id: \"ArtGAN/Segment-Anything-Video\"\n        },\n        {\n            description: \"An panoptic segmentation application built for outdoor environments.\",\n            id: \"segments/panoptic-segment-anything\"\n        }\n    ],\n    summary: \"Image Segmentation divides an image into segments where each pixel in the image is mapped to an object. This task has multiple variants such as instance segmentation, panoptic segmentation and semantic segmentation.\",\n    widgetModels: [\n        \"nvidia/segformer-b0-finetuned-ade-512-512\"\n    ],\n    youtubeId: \"dKE8SIt9C-w\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXNlZ21lbnRhdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lGLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUztRQUNMO1lBQ0lQLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRE8sUUFBUTtRQUNKO1lBQ0ksMkJBQTJCO1lBQzNCUixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFEsUUFBUTtRQUNKO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQTRDO0lBQzNEQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9pbWFnZS1zZWdtZW50YXRpb24vZGF0YS5qcz8xOTJmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNjZW5lIHNlZ21lbnRhdGlvbiBkYXRhc2V0LlwiLFxuICAgICAgICAgICAgaWQ6IFwic2NlbmVfcGFyc2VfMTUwXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImltYWdlLXNlZ21lbnRhdGlvbi1pbnB1dC5qcGVnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJpbWFnZS1zZWdtZW50YXRpb24tb3V0cHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBdmVyYWdlIFByZWNpc2lvbiAoQVApIGlzIHRoZSBBcmVhIFVuZGVyIHRoZSBQUiBDdXJ2ZSAoQVVDLVBSKS4gSXQgaXMgY2FsY3VsYXRlZCBmb3IgZWFjaCBzZW1hbnRpYyBjbGFzcyBzZXBhcmF0ZWx5XCIsXG4gICAgICAgICAgICBpZDogXCJBdmVyYWdlIFByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNZWFuIEF2ZXJhZ2UgUHJlY2lzaW9uIChtQVApIGlzIHRoZSBvdmVyYWxsIGF2ZXJhZ2Ugb2YgdGhlIEFQIHZhbHVlc1wiLFxuICAgICAgICAgICAgaWQ6IFwiTWVhbiBBdmVyYWdlIFByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJbnRlcnNlY3Rpb24gb3ZlciBVbmlvbiAoSW9VKSBpcyB0aGUgb3ZlcmxhcCBvZiBzZWdtZW50YXRpb24gbWFza3MuIE1lYW4gSW9VIGlzIHRoZSBhdmVyYWdlIG9mIHRoZSBJb1Ugb2YgYWxsIHNlbWFudGljIGNsYXNzZXNcIixcbiAgICAgICAgICAgIGlkOiBcIk1lYW4gSW50ZXJzZWN0aW9uIG92ZXIgVW5pb25cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQVDOsSBpcyB0aGUgQXZlcmFnZSBQcmVjaXNpb24gYXQgdGhlIElvVSB0aHJlc2hvbGQgb2YgYSDOsSB2YWx1ZSwgZm9yIGV4YW1wbGUsIEFQNTAgYW5kIEFQNzVcIixcbiAgICAgICAgICAgIGlkOiBcIkFQzrFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUTyBETzogd3JpdGUgZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNvbGlkIHBhbm9wdGljIHNlZ21lbnRhdGlvbiBtb2RlbCB0cmFpbmVkIG9uIENPQ08uXCIsXG4gICAgICAgICAgICBpZDogXCJ0dWUtbXBzL2NvY29fcGFub3B0aWNfZW9tdF9sYXJnZV82NDBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmFja2dyb3VuZCByZW1vdmFsIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYnJpYWFpL1JNQkctMS40XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbXVsdGlwdXJwb3NlIGltYWdlIHNlZ21lbnRhdGlvbiBtb2RlbCBmb3IgaGlnaCByZXNvbHV0aW9uIGltYWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIlpoZW5nUGVuZzcvQmlSZWZOZXRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUG93ZXJmdWwgaHVtYW4tY2VudHJpYyBpbWFnZSBzZWdtZW50YXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9zYXBpZW5zLXNlZy0xYlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQYW5vcHRpYyBzZWdtZW50YXRpb24gbW9kZWwgdHJhaW5lZCBvbiB0aGUgQ09DTyAoY29tbW9uIG9iamVjdHMpIGRhdGFzZXQuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9tYXNrMmZvcm1lci1zd2luLWxhcmdlLWNvY28tcGFub3B0aWNcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHNlbWFudGljIHNlZ21lbnRhdGlvbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiBwcmVkaWN0IHVuc2VlbiBpbnN0YW5jZXMgb3V0IG9mIHRoZSBib3guXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9vdi1zZWdcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiT25lIG9mIHRoZSBzdHJvbmdlc3Qgc2VnbWVudGF0aW9uIGFwcGxpY2F0aW9ucy5cIixcbiAgICAgICAgICAgIGlkOiBcImpicmlua21hL3NlZ21lbnQtYW55dGhpbmdcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBodW1hbi1jZW50cmljIHNlZ21lbnRhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL3NhcGllbnMtcG9zZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBpbnN0YW5jZSBzZWdtZW50YXRpb24gYXBwbGljYXRpb24gdG8gcHJlZGljdCBuZXVyb25hbCBjZWxsIHR5cGVzIGZyb20gbWljcm9zY29weSBpbWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJyYXNobWkvc2FydG9yaXVzLWNlbGwtaW5zdGFuY2Utc2VnbWVudGF0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgc2VnbWVudHMgdmlkZW9zLlwiLFxuICAgICAgICAgICAgaWQ6IFwiQXJ0R0FOL1NlZ21lbnQtQW55dGhpbmctVmlkZW9cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gcGFub3B0aWMgc2VnbWVudGF0aW9uIGFwcGxpY2F0aW9uIGJ1aWx0IGZvciBvdXRkb29yIGVudmlyb25tZW50cy5cIixcbiAgICAgICAgICAgIGlkOiBcInNlZ21lbnRzL3Bhbm9wdGljLXNlZ21lbnQtYW55dGhpbmdcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiSW1hZ2UgU2VnbWVudGF0aW9uIGRpdmlkZXMgYW4gaW1hZ2UgaW50byBzZWdtZW50cyB3aGVyZSBlYWNoIHBpeGVsIGluIHRoZSBpbWFnZSBpcyBtYXBwZWQgdG8gYW4gb2JqZWN0LiBUaGlzIHRhc2sgaGFzIG11bHRpcGxlIHZhcmlhbnRzIHN1Y2ggYXMgaW5zdGFuY2Ugc2VnbWVudGF0aW9uLCBwYW5vcHRpYyBzZWdtZW50YXRpb24gYW5kIHNlbWFudGljIHNlZ21lbnRhdGlvbi5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcIm52aWRpYS9zZWdmb3JtZXItYjAtZmluZXR1bmVkLWFkZS01MTItNTEyXCJdLFxuICAgIHlvdXR1YmVJZDogXCJkS0U4U0l0OUMtd1wiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-segmentation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-text-to-text/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-text-to-text/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Instructions composed of image and text.\",\n            id: \"liuhaotian/LLaVA-Instruct-150K\"\n        },\n        {\n            description: \"Collection of image-text pairs on scientific topics.\",\n            id: \"DAMO-NLP-SG/multimodal_textbook\"\n        },\n        {\n            description: \"A collection of datasets made for model fine-tuning.\",\n            id: \"HuggingFaceM4/the_cauldron\"\n        },\n        {\n            description: \"Screenshots of websites with their HTML/CSS codes.\",\n            id: \"HuggingFaceM4/WebSight\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-text-to-text-input.png\",\n                type: \"img\"\n            },\n            {\n                label: \"Text Prompt\",\n                content: \"Describe the position of the bee in detail.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"The bee is sitting on a pink flower, surrounded by other flowers. The bee is positioned in the center of the flower, with its head and front legs sticking out.\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Small and efficient yet powerful vision language model.\",\n            id: \"HuggingFaceTB/SmolVLM-Instruct\"\n        },\n        {\n            description: \"Cutting-edge reasoning vision language model.\",\n            id: \"zai-org/GLM-4.5V\"\n        },\n        {\n            description: \"Cutting-edge small vision language model to convert documents to text.\",\n            id: \"rednote-hilab/dots.ocr\"\n        },\n        {\n            description: \"Small yet powerful model.\",\n            id: \"Qwen/Qwen2.5-VL-3B-Instruct\"\n        },\n        {\n            description: \"Image-text-to-text model with agentic capabilities.\",\n            id: \"microsoft/Magma-8B\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"Leaderboard to evaluate vision language models.\",\n            id: \"opencompass/open_vlm_leaderboard\"\n        },\n        {\n            description: \"An application that compares object detection capabilities of different vision language models.\",\n            id: \"sergiopaniego/vlm_object_understanding\"\n        },\n        {\n            description: \"An application to compare different OCR models.\",\n            id: \"prithivMLmods/Multimodal-OCR\"\n        }\n    ],\n    summary: \"Image-text-to-text models take in an image and text prompt and output text. These models are also called vision-language models, or VLMs. The difference from image-to-text models is that these models take an additional text input, not restricting the model to certain use cases like image captioning, and may also be trained to accept a conversation as input.\",\n    widgetModels: [\n        \"zai-org/GLM-4.5V\"\n    ],\n    youtubeId: \"IoGaGfU1CIg\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXRleHQtdG8tdGV4dC9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEYsTUFBTTtZQUNWO1NBQ0g7UUFDREcsU0FBUztZQUNMO2dCQUNJRixPQUFPO2dCQUNQQyxTQUFTO2dCQUNURixNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FJLFNBQVMsRUFBRTtJQUNYQyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUFtQjtJQUNsQ0MsV0FBVztBQUNmO0FBQ0EsaUVBQWVoQixRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXRleHQtdG8tdGV4dC9kYXRhLmpzPzlmZTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW5zdHJ1Y3Rpb25zIGNvbXBvc2VkIG9mIGltYWdlIGFuZCB0ZXh0LlwiLFxuICAgICAgICAgICAgaWQ6IFwibGl1aGFvdGlhbi9MTGFWQS1JbnN0cnVjdC0xNTBLXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbGxlY3Rpb24gb2YgaW1hZ2UtdGV4dCBwYWlycyBvbiBzY2llbnRpZmljIHRvcGljcy5cIixcbiAgICAgICAgICAgIGlkOiBcIkRBTU8tTkxQLVNHL211bHRpbW9kYWxfdGV4dGJvb2tcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBjb2xsZWN0aW9uIG9mIGRhdGFzZXRzIG1hZGUgZm9yIG1vZGVsIGZpbmUtdHVuaW5nLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSHVnZ2luZ0ZhY2VNNC90aGVfY2F1bGRyb25cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU2NyZWVuc2hvdHMgb2Ygd2Vic2l0ZXMgd2l0aCB0aGVpciBIVE1ML0NTUyBjb2Rlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIkh1Z2dpbmdGYWNlTTQvV2ViU2lnaHRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiaW1hZ2UtdGV4dC10by10ZXh0LWlucHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlRleHQgUHJvbXB0XCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJEZXNjcmliZSB0aGUgcG9zaXRpb24gb2YgdGhlIGJlZSBpbiBkZXRhaWwuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQW5zd2VyXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJUaGUgYmVlIGlzIHNpdHRpbmcgb24gYSBwaW5rIGZsb3dlciwgc3Vycm91bmRlZCBieSBvdGhlciBmbG93ZXJzLiBUaGUgYmVlIGlzIHBvc2l0aW9uZWQgaW4gdGhlIGNlbnRlciBvZiB0aGUgZmxvd2VyLCB3aXRoIGl0cyBoZWFkIGFuZCBmcm9udCBsZWdzIHN0aWNraW5nIG91dC5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU21hbGwgYW5kIGVmZmljaWVudCB5ZXQgcG93ZXJmdWwgdmlzaW9uIGxhbmd1YWdlIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSHVnZ2luZ0ZhY2VUQi9TbW9sVkxNLUluc3RydWN0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkN1dHRpbmctZWRnZSByZWFzb25pbmcgdmlzaW9uIGxhbmd1YWdlIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiemFpLW9yZy9HTE0tNC41VlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDdXR0aW5nLWVkZ2Ugc21hbGwgdmlzaW9uIGxhbmd1YWdlIG1vZGVsIHRvIGNvbnZlcnQgZG9jdW1lbnRzIHRvIHRleHQuXCIsXG4gICAgICAgICAgICBpZDogXCJyZWRub3RlLWhpbGFiL2RvdHMub2NyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNtYWxsIHlldCBwb3dlcmZ1bCBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIlF3ZW4vUXdlbjIuNS1WTC0zQi1JbnN0cnVjdFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJbWFnZS10ZXh0LXRvLXRleHQgbW9kZWwgd2l0aCBhZ2VudGljIGNhcGFiaWxpdGllcy5cIixcbiAgICAgICAgICAgIGlkOiBcIm1pY3Jvc29mdC9NYWdtYS04QlwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkxlYWRlcmJvYXJkIHRvIGV2YWx1YXRlIHZpc2lvbiBsYW5ndWFnZSBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJvcGVuY29tcGFzcy9vcGVuX3ZsbV9sZWFkZXJib2FyZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNvbXBhcmVzIG9iamVjdCBkZXRlY3Rpb24gY2FwYWJpbGl0aWVzIG9mIGRpZmZlcmVudCB2aXNpb24gbGFuZ3VhZ2UgbW9kZWxzLlwiLFxuICAgICAgICAgICAgaWQ6IFwic2VyZ2lvcGFuaWVnby92bG1fb2JqZWN0X3VuZGVyc3RhbmRpbmdcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdG8gY29tcGFyZSBkaWZmZXJlbnQgT0NSIG1vZGVscy5cIixcbiAgICAgICAgICAgIGlkOiBcInByaXRoaXZNTG1vZHMvTXVsdGltb2RhbC1PQ1JcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiSW1hZ2UtdGV4dC10by10ZXh0IG1vZGVscyB0YWtlIGluIGFuIGltYWdlIGFuZCB0ZXh0IHByb21wdCBhbmQgb3V0cHV0IHRleHQuIFRoZXNlIG1vZGVscyBhcmUgYWxzbyBjYWxsZWQgdmlzaW9uLWxhbmd1YWdlIG1vZGVscywgb3IgVkxNcy4gVGhlIGRpZmZlcmVuY2UgZnJvbSBpbWFnZS10by10ZXh0IG1vZGVscyBpcyB0aGF0IHRoZXNlIG1vZGVscyB0YWtlIGFuIGFkZGl0aW9uYWwgdGV4dCBpbnB1dCwgbm90IHJlc3RyaWN0aW5nIHRoZSBtb2RlbCB0byBjZXJ0YWluIHVzZSBjYXNlcyBsaWtlIGltYWdlIGNhcHRpb25pbmcsIGFuZCBtYXkgYWxzbyBiZSB0cmFpbmVkIHRvIGFjY2VwdCBhIGNvbnZlcnNhdGlvbiBhcyBpbnB1dC5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcInphaS1vcmcvR0xNLTQuNVZcIl0sXG4gICAgeW91dHViZUlkOiBcIklvR2FHZlUxQ0lnXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwiZmlsZW5hbWUiLCJ0eXBlIiwibGFiZWwiLCJjb250ZW50Iiwib3V0cHV0cyIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-text-to-text/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-3d/data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-3d/data.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A large dataset of over 10 million 3D objects.\",\n            id: \"allenai/objaverse-xl\"\n        },\n        {\n            description: \"A dataset of isolated object images for evaluating image-to-3D models.\",\n            id: \"dylanebert/iso3d\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-to-3d-image-input.png\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Result\",\n                content: \"image-to-3d-3d-output-filename.glb\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Fast image-to-3D mesh model by Tencent.\",\n            id: \"TencentARC/InstantMesh\"\n        },\n        {\n            description: \"3D world generation model.\",\n            id: \"tencent/HunyuanWorld-1\"\n        },\n        {\n            description: \"A scaled up image-to-3D mesh model derived from TripoSR.\",\n            id: \"hwjiang/Real3D\"\n        },\n        {\n            description: \"Consistent image-to-3d generation model.\",\n            id: \"stabilityai/stable-point-aware-3d\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"Leaderboard to evaluate image-to-3D models.\",\n            id: \"dylanebert/3d-arena\"\n        },\n        {\n            description: \"Image-to-3D demo with mesh outputs.\",\n            id: \"TencentARC/InstantMesh\"\n        },\n        {\n            description: \"Image-to-3D demo.\",\n            id: \"stabilityai/stable-point-aware-3d\"\n        },\n        {\n            description: \"Image-to-3D demo with mesh outputs.\",\n            id: \"hwjiang/Real3D\"\n        },\n        {\n            description: \"Image-to-3D demo with splat outputs.\",\n            id: \"dylanebert/LGM-mini\"\n        }\n    ],\n    summary: \"Image-to-3D models take in image input and produce 3D output.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXRvLTNkL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0lDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUSCxNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FJLFNBQVMsRUFBRTtJQUNYQyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYyxFQUFFO0lBQ2hCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvaW1hZ2UtdG8tM2QvZGF0YS5qcz9hNDg1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGFyZ2UgZGF0YXNldCBvZiBvdmVyIDEwIG1pbGxpb24gM0Qgb2JqZWN0cy5cIixcbiAgICAgICAgICAgIGlkOiBcImFsbGVuYWkvb2JqYXZlcnNlLXhsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZGF0YXNldCBvZiBpc29sYXRlZCBvYmplY3QgaW1hZ2VzIGZvciBldmFsdWF0aW5nIGltYWdlLXRvLTNEIG1vZGVscy5cIixcbiAgICAgICAgICAgIGlkOiBcImR5bGFuZWJlcnQvaXNvM2RcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiaW1hZ2UtdG8tM2QtaW1hZ2UtaW5wdXQucG5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJSZXN1bHRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcImltYWdlLXRvLTNkLTNkLW91dHB1dC1maWxlbmFtZS5nbGJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRmFzdCBpbWFnZS10by0zRCBtZXNoIG1vZGVsIGJ5IFRlbmNlbnQuXCIsXG4gICAgICAgICAgICBpZDogXCJUZW5jZW50QVJDL0luc3RhbnRNZXNoXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIjNEIHdvcmxkIGdlbmVyYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJ0ZW5jZW50L0h1bnl1YW5Xb3JsZC0xXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc2NhbGVkIHVwIGltYWdlLXRvLTNEIG1lc2ggbW9kZWwgZGVyaXZlZCBmcm9tIFRyaXBvU1IuXCIsXG4gICAgICAgICAgICBpZDogXCJod2ppYW5nL1JlYWwzRFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25zaXN0ZW50IGltYWdlLXRvLTNkIGdlbmVyYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJzdGFiaWxpdHlhaS9zdGFibGUtcG9pbnQtYXdhcmUtM2RcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJMZWFkZXJib2FyZCB0byBldmFsdWF0ZSBpbWFnZS10by0zRCBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJkeWxhbmViZXJ0LzNkLWFyZW5hXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkltYWdlLXRvLTNEIGRlbW8gd2l0aCBtZXNoIG91dHB1dHMuXCIsXG4gICAgICAgICAgICBpZDogXCJUZW5jZW50QVJDL0luc3RhbnRNZXNoXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkltYWdlLXRvLTNEIGRlbW8uXCIsXG4gICAgICAgICAgICBpZDogXCJzdGFiaWxpdHlhaS9zdGFibGUtcG9pbnQtYXdhcmUtM2RcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW1hZ2UtdG8tM0QgZGVtbyB3aXRoIG1lc2ggb3V0cHV0cy5cIixcbiAgICAgICAgICAgIGlkOiBcImh3amlhbmcvUmVhbDNEXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkltYWdlLXRvLTNEIGRlbW8gd2l0aCBzcGxhdCBvdXRwdXRzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZHlsYW5lYmVydC9MR00tbWluaVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJJbWFnZS10by0zRCBtb2RlbHMgdGFrZSBpbiBpbWFnZSBpbnB1dCBhbmQgcHJvZHVjZSAzRCBvdXRwdXQuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXSxcbiAgICB5b3V0dWJlSWQ6IFwiXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwiZmlsZW5hbWUiLCJ0eXBlIiwib3V0cHV0cyIsImxhYmVsIiwiY29udGVudCIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-3d/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-image/data.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-image/data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Synthetic dataset, for image relighting\",\n            id: \"VIDIT\"\n        },\n        {\n            description: \"Multiple images of celebrities, used for facial expression translation\",\n            id: \"huggan/CelebA-faces\"\n        },\n        {\n            description: \"12M image-caption pairs.\",\n            id: \"Spawning/PD12M\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-to-image-input.jpeg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"image-to-image-output.png\",\n                type: \"img\"\n            }\n        ]\n    },\n    isPlaceholder: false,\n    metrics: [\n        {\n            description: \"Peak Signal to Noise Ratio (PSNR) is an approximation of the human perception, considering the ratio of the absolute intensity with respect to the variations. Measured in dB, a high value indicates a high fidelity.\",\n            id: \"PSNR\"\n        },\n        {\n            description: \"Structural Similarity Index (SSIM) is a perceptual metric which compares the luminance, contrast and structure of two images. The values of SSIM range between -1 and 1, and higher values indicate closer resemblance to the original image.\",\n            id: \"SSIM\"\n        },\n        {\n            description: \"Inception Score (IS) is an analysis of the labels predicted by an image classification model when presented with a sample of the generated images.\",\n            id: \"IS\"\n        }\n    ],\n    models: [\n        {\n            description: \"An image-to-image model to improve image resolution.\",\n            id: \"fal/AuraSR-v2\"\n        },\n        {\n            description: \"Powerful image editing model.\",\n            id: \"black-forest-labs/FLUX.1-Kontext-dev\"\n        },\n        {\n            description: \"Virtual try-on model.\",\n            id: \"yisol/IDM-VTON\"\n        },\n        {\n            description: \"Image re-lighting model.\",\n            id: \"kontext-community/relighting-kontext-dev-lora-v3\"\n        },\n        {\n            description: \"Strong model for inpainting and outpainting.\",\n            id: \"black-forest-labs/FLUX.1-Fill-dev\"\n        },\n        {\n            description: \"Strong model for image editing using depth maps.\",\n            id: \"black-forest-labs/FLUX.1-Depth-dev-lora\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"Image editing application.\",\n            id: \"black-forest-labs/FLUX.1-Kontext-Dev\"\n        },\n        {\n            description: \"Image relighting application.\",\n            id: \"lllyasviel/iclight-v2-vary\"\n        },\n        {\n            description: \"An application for image upscaling.\",\n            id: \"jasperai/Flux.1-dev-Controlnet-Upscaler\"\n        }\n    ],\n    summary: \"Image-to-image is the task of transforming an input image through a variety of possible manipulations and enhancements, such as super-resolution, image inpainting, colorization, and more.\",\n    widgetModels: [\n        \"Qwen/Qwen-Image\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXRvLWltYWdlL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0lDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lGLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsZUFBZTtJQUNmQyxTQUFTO1FBQ0w7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFEsUUFBUTtRQUNKO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFFBQVE7UUFDSjtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUFrQjtJQUNqQ0MsV0FBVztBQUNmO0FBQ0EsaUVBQWVmLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvaW1hZ2UtdG8taW1hZ2UvZGF0YS5qcz9jMTVjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlN5bnRoZXRpYyBkYXRhc2V0LCBmb3IgaW1hZ2UgcmVsaWdodGluZ1wiLFxuICAgICAgICAgICAgaWQ6IFwiVklESVRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTXVsdGlwbGUgaW1hZ2VzIG9mIGNlbGVicml0aWVzLCB1c2VkIGZvciBmYWNpYWwgZXhwcmVzc2lvbiB0cmFuc2xhdGlvblwiLFxuICAgICAgICAgICAgaWQ6IFwiaHVnZ2FuL0NlbGViQS1mYWNlc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCIxMk0gaW1hZ2UtY2FwdGlvbiBwYWlycy5cIixcbiAgICAgICAgICAgIGlkOiBcIlNwYXduaW5nL1BEMTJNXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImltYWdlLXRvLWltYWdlLWlucHV0LmpwZWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImltYWdlLXRvLWltYWdlLW91dHB1dC5wbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIGlzUGxhY2Vob2xkZXI6IGZhbHNlLFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUGVhayBTaWduYWwgdG8gTm9pc2UgUmF0aW8gKFBTTlIpIGlzIGFuIGFwcHJveGltYXRpb24gb2YgdGhlIGh1bWFuIHBlcmNlcHRpb24sIGNvbnNpZGVyaW5nIHRoZSByYXRpbyBvZiB0aGUgYWJzb2x1dGUgaW50ZW5zaXR5IHdpdGggcmVzcGVjdCB0byB0aGUgdmFyaWF0aW9ucy4gTWVhc3VyZWQgaW4gZEIsIGEgaGlnaCB2YWx1ZSBpbmRpY2F0ZXMgYSBoaWdoIGZpZGVsaXR5LlwiLFxuICAgICAgICAgICAgaWQ6IFwiUFNOUlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdHJ1Y3R1cmFsIFNpbWlsYXJpdHkgSW5kZXggKFNTSU0pIGlzIGEgcGVyY2VwdHVhbCBtZXRyaWMgd2hpY2ggY29tcGFyZXMgdGhlIGx1bWluYW5jZSwgY29udHJhc3QgYW5kIHN0cnVjdHVyZSBvZiB0d28gaW1hZ2VzLiBUaGUgdmFsdWVzIG9mIFNTSU0gcmFuZ2UgYmV0d2VlbiAtMSBhbmQgMSwgYW5kIGhpZ2hlciB2YWx1ZXMgaW5kaWNhdGUgY2xvc2VyIHJlc2VtYmxhbmNlIHRvIHRoZSBvcmlnaW5hbCBpbWFnZS5cIixcbiAgICAgICAgICAgIGlkOiBcIlNTSU1cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW5jZXB0aW9uIFNjb3JlIChJUykgaXMgYW4gYW5hbHlzaXMgb2YgdGhlIGxhYmVscyBwcmVkaWN0ZWQgYnkgYW4gaW1hZ2UgY2xhc3NpZmljYXRpb24gbW9kZWwgd2hlbiBwcmVzZW50ZWQgd2l0aCBhIHNhbXBsZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIklTXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gaW1hZ2UtdG8taW1hZ2UgbW9kZWwgdG8gaW1wcm92ZSBpbWFnZSByZXNvbHV0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFsL0F1cmFTUi12MlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQb3dlcmZ1bCBpbWFnZSBlZGl0aW5nIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYmxhY2stZm9yZXN0LWxhYnMvRkxVWC4xLUtvbnRleHQtZGV2XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZpcnR1YWwgdHJ5LW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwieWlzb2wvSURNLVZUT05cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW1hZ2UgcmUtbGlnaHRpbmcgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJrb250ZXh0LWNvbW11bml0eS9yZWxpZ2h0aW5nLWtvbnRleHQtZGV2LWxvcmEtdjNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIG1vZGVsIGZvciBpbnBhaW50aW5nIGFuZCBvdXRwYWludGluZy5cIixcbiAgICAgICAgICAgIGlkOiBcImJsYWNrLWZvcmVzdC1sYWJzL0ZMVVguMS1GaWxsLWRldlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdHJvbmcgbW9kZWwgZm9yIGltYWdlIGVkaXRpbmcgdXNpbmcgZGVwdGggbWFwcy5cIixcbiAgICAgICAgICAgIGlkOiBcImJsYWNrLWZvcmVzdC1sYWJzL0ZMVVguMS1EZXB0aC1kZXYtbG9yYVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkltYWdlIGVkaXRpbmcgYXBwbGljYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJibGFjay1mb3Jlc3QtbGFicy9GTFVYLjEtS29udGV4dC1EZXZcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW1hZ2UgcmVsaWdodGluZyBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImxsbHlhc3ZpZWwvaWNsaWdodC12Mi12YXJ5XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIGZvciBpbWFnZSB1cHNjYWxpbmcuXCIsXG4gICAgICAgICAgICBpZDogXCJqYXNwZXJhaS9GbHV4LjEtZGV2LUNvbnRyb2xuZXQtVXBzY2FsZXJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiSW1hZ2UtdG8taW1hZ2UgaXMgdGhlIHRhc2sgb2YgdHJhbnNmb3JtaW5nIGFuIGlucHV0IGltYWdlIHRocm91Z2ggYSB2YXJpZXR5IG9mIHBvc3NpYmxlIG1hbmlwdWxhdGlvbnMgYW5kIGVuaGFuY2VtZW50cywgc3VjaCBhcyBzdXBlci1yZXNvbHV0aW9uLCBpbWFnZSBpbnBhaW50aW5nLCBjb2xvcml6YXRpb24sIGFuZCBtb3JlLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiUXdlbi9Rd2VuLUltYWdlXCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwiaXNQbGFjZWhvbGRlciIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-image/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-text/data.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-text/data.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Dataset from 12M image-text of Reddit\",\n            id: \"red_caps\"\n        },\n        {\n            // TODO write proper description\n            description: \"Dataset from 3.3M images of Google\",\n            id: \"datasets/conceptual_captions\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"savanna.jpg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Detailed description\",\n                content: \"a herd of giraffes and zebras grazing in a field\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Strong OCR model.\",\n            id: \"allenai/olmOCR-7B-0725\"\n        },\n        {\n            description: \"Powerful image captioning model.\",\n            id: \"fancyfeast/llama-joycaption-beta-one-hf-llava\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"SVG generator app from images.\",\n            id: \"multimodalart/OmniSVG-3B\"\n        },\n        {\n            description: \"An application that converts documents to markdown.\",\n            id: \"numind/NuMarkdown-8B-Thinking\"\n        },\n        {\n            description: \"An application that can caption images.\",\n            id: \"fancyfeast/joy-caption-beta-one\"\n        }\n    ],\n    summary: \"Image to text models output a text from a given image. Image captioning or optical character recognition can be considered as the most common applications of image to text.\",\n    widgetModels: [\n        \"Salesforce/blip-image-captioning-large\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2ltYWdlLXRvLXRleHQvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSSxnQ0FBZ0M7WUFDaENDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSSxnQ0FBZ0M7WUFDaENELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEgsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBSSxTQUFTLEVBQUU7SUFDWEMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBeUM7SUFDeERDLFdBQVc7QUFDZjtBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9pbWFnZS10by10ZXh0L2RhdGEuanM/MDVhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPIHdyaXRlIHByb3BlciBkZXNjcmlwdGlvblxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRGF0YXNldCBmcm9tIDEyTSBpbWFnZS10ZXh0IG9mIFJlZGRpdFwiLFxuICAgICAgICAgICAgaWQ6IFwicmVkX2NhcHNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyB3cml0ZSBwcm9wZXIgZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkRhdGFzZXQgZnJvbSAzLjNNIGltYWdlcyBvZiBHb29nbGVcIixcbiAgICAgICAgICAgIGlkOiBcImRhdGFzZXRzL2NvbmNlcHR1YWxfY2FwdGlvbnNcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwic2F2YW5uYS5qcGdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkRldGFpbGVkIGRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJhIGhlcmQgb2YgZ2lyYWZmZXMgYW5kIHplYnJhcyBncmF6aW5nIGluIGEgZmllbGRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIE9DUiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImFsbGVuYWkvb2xtT0NSLTdCLTA3MjVcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUG93ZXJmdWwgaW1hZ2UgY2FwdGlvbmluZyBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImZhbmN5ZmVhc3QvbGxhbWEtam95Y2FwdGlvbi1iZXRhLW9uZS1oZi1sbGF2YVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlNWRyBnZW5lcmF0b3IgYXBwIGZyb20gaW1hZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibXVsdGltb2RhbGFydC9PbW5pU1ZHLTNCXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY29udmVydHMgZG9jdW1lbnRzIHRvIG1hcmtkb3duLlwiLFxuICAgICAgICAgICAgaWQ6IFwibnVtaW5kL051TWFya2Rvd24tOEItVGhpbmtpbmdcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBjYW4gY2FwdGlvbiBpbWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJmYW5jeWZlYXN0L2pveS1jYXB0aW9uLWJldGEtb25lXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIkltYWdlIHRvIHRleHQgbW9kZWxzIG91dHB1dCBhIHRleHQgZnJvbSBhIGdpdmVuIGltYWdlLiBJbWFnZSBjYXB0aW9uaW5nIG9yIG9wdGljYWwgY2hhcmFjdGVyIHJlY29nbml0aW9uIGNhbiBiZSBjb25zaWRlcmVkIGFzIHRoZSBtb3N0IGNvbW1vbiBhcHBsaWNhdGlvbnMgb2YgaW1hZ2UgdG8gdGV4dC5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcIlNhbGVzZm9yY2UvYmxpcC1pbWFnZS1jYXB0aW9uaW5nLWxhcmdlXCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwibGFiZWwiLCJjb250ZW50IiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-text/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-video/data.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-video/data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A benchmark dataset for reference image controlled video generation.\",\n            id: \"ali-vilab/VACE-Benchmark\"\n        },\n        {\n            description: \"A dataset of video generation style preferences.\",\n            id: \"Rapidata/sora-video-generation-style-likert-scoring\"\n        },\n        {\n            description: \"A dataset with videos and captions throughout the videos.\",\n            id: \"BestWishYsh/ChronoMagic\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-to-video-input.jpg\",\n                type: \"img\"\n            },\n            {\n                label: \"Optional Text Prompt\",\n                content: \"This penguin is dancing\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"image-to-video-output.gif\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Fr\\xe9chet Video Distance (FVD) measures the perceptual similarity between the distributions of generated videos and a set of real videos, assessing overall visual quality and temporal coherence of the video generated from an input image.\",\n            id: \"fvd\"\n        },\n        {\n            description: \"CLIP Score measures the semantic similarity between a textual prompt (if provided alongside the input image) and the generated video frames. It evaluates how well the video's generated content and motion align with the textual description, conditioned on the initial image.\",\n            id: \"clip_score\"\n        },\n        {\n            description: \"First Frame Fidelity, often measured using LPIPS (Learned Perceptual Image Patch Similarity), PSNR, or SSIM, quantifies how closely the first frame of the generated video matches the input conditioning image.\",\n            id: \"lpips\"\n        },\n        {\n            description: \"Identity Preservation Score measures the consistency of identity (e.g., a person's face or a specific object's characteristics) between the input image and throughout the generated video frames, often calculated using features from specialized models like face recognition (e.g., ArcFace) or re-identification models.\",\n            id: \"identity_preservation\"\n        },\n        {\n            description: \"Motion Score evaluates the quality, realism, and temporal consistency of motion in the video generated from a static image. This can be based on optical flow analysis (e.g., smoothness, magnitude), consistency of object trajectories, or specific motion plausibility assessments.\",\n            id: \"motion_score\"\n        }\n    ],\n    models: [\n        {\n            description: \"LTX-Video, a 13B parameter model for high quality video generation\",\n            id: \"Lightricks/LTX-Video-0.9.7-dev\"\n        },\n        {\n            description: \"A 14B parameter model for reference image controlled video generation\",\n            id: \"Wan-AI/Wan2.1-VACE-14B\"\n        },\n        {\n            description: \"An image-to-video generation model using FramePack F1 methodology with Hunyuan-DiT architecture\",\n            id: \"lllyasviel/FramePack_F1_I2V_HY_20250503\"\n        },\n        {\n            description: \"A distilled version of the LTX-Video-0.9.7-dev model for faster inference\",\n            id: \"Lightricks/LTX-Video-0.9.7-distilled\"\n        },\n        {\n            description: \"An image-to-video generation model by Skywork AI, 14B parameters, producing 720p videos.\",\n            id: \"Skywork/SkyReels-V2-I2V-14B-720P\"\n        },\n        {\n            description: \"Image-to-video variant of Tencent's HunyuanVideo.\",\n            id: \"tencent/HunyuanVideo-I2V\"\n        },\n        {\n            description: \"A 14B parameter model for 720p image-to-video generation by Wan-AI.\",\n            id: \"Wan-AI/Wan2.1-I2V-14B-720P\"\n        },\n        {\n            description: \"A Diffusers version of the Wan2.1-I2V-14B-720P model for 720p image-to-video generation.\",\n            id: \"Wan-AI/Wan2.1-I2V-14B-720P-Diffusers\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application to generate videos fast.\",\n            id: \"Lightricks/ltx-video-distilled\"\n        },\n        {\n            description: \"Generate videos with the FramePack-F1\",\n            id: \"linoyts/FramePack-F1\"\n        },\n        {\n            description: \"Generate videos with the FramePack\",\n            id: \"lisonallen/framepack-i2v\"\n        },\n        {\n            description: \"Wan2.1 with CausVid LoRA\",\n            id: \"multimodalart/wan2-1-fast\"\n        },\n        {\n            description: \"A demo for Stable Video Diffusion\",\n            id: \"multimodalart/stable-video-diffusion\"\n        }\n    ],\n    summary: \"Image-to-video models take a still image as input and generate a video. These models can be guided by text prompts to influence the content and style of the output video.\",\n    widgetModels: [],\n    youtubeId: undefined\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-video/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TASKS_DATA: () => (/* binding */ TASKS_DATA),\n/* harmony export */   TASKS_MODEL_LIBRARIES: () => (/* binding */ TASKS_MODEL_LIBRARIES)\n/* harmony export */ });\n/* harmony import */ var _pipelines_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pipelines.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/pipelines.js\");\n/* harmony import */ var _any_to_any_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./any-to-any/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/any-to-any/data.js\");\n/* harmony import */ var _audio_classification_data_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-classification/data.js\");\n/* harmony import */ var _audio_to_audio_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio-to-audio/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/audio-to-audio/data.js\");\n/* harmony import */ var _automatic_speech_recognition_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./automatic-speech-recognition/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/automatic-speech-recognition/data.js\");\n/* harmony import */ var _document_question_answering_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./document-question-answering/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/document-question-answering/data.js\");\n/* harmony import */ var _feature_extraction_data_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feature-extraction/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/feature-extraction/data.js\");\n/* harmony import */ var _fill_mask_data_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fill-mask/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/fill-mask/data.js\");\n/* harmony import */ var _image_classification_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./image-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-classification/data.js\");\n/* harmony import */ var _image_feature_extraction_data_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image-feature-extraction/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-feature-extraction/data.js\");\n/* harmony import */ var _image_to_image_data_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./image-to-image/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-image/data.js\");\n/* harmony import */ var _image_to_text_data_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./image-to-text/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-text/data.js\");\n/* harmony import */ var _image_text_to_text_data_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./image-text-to-text/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-text-to-text/data.js\");\n/* harmony import */ var _image_segmentation_data_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./image-segmentation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-segmentation/data.js\");\n/* harmony import */ var _image_to_video_data_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./image-to-video/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-video/data.js\");\n/* harmony import */ var _mask_generation_data_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mask-generation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/mask-generation/data.js\");\n/* harmony import */ var _object_detection_data_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./object-detection/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/object-detection/data.js\");\n/* harmony import */ var _depth_estimation_data_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./depth-estimation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/depth-estimation/data.js\");\n/* harmony import */ var _placeholder_data_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./placeholder/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/placeholder/data.js\");\n/* harmony import */ var _reinforcement_learning_data_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./reinforcement-learning/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/reinforcement-learning/data.js\");\n/* harmony import */ var _question_answering_data_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./question-answering/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/question-answering/data.js\");\n/* harmony import */ var _sentence_similarity_data_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./sentence-similarity/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/sentence-similarity/data.js\");\n/* harmony import */ var _summarization_data_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./summarization/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/summarization/data.js\");\n/* harmony import */ var _table_question_answering_data_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./table-question-answering/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/table-question-answering/data.js\");\n/* harmony import */ var _tabular_classification_data_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tabular-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-classification/data.js\");\n/* harmony import */ var _tabular_regression_data_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./tabular-regression/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-regression/data.js\");\n/* harmony import */ var _text_to_image_data_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./text-to-image/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-image/data.js\");\n/* harmony import */ var _text_to_speech_data_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./text-to-speech/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-speech/data.js\");\n/* harmony import */ var _token_classification_data_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./token-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/token-classification/data.js\");\n/* harmony import */ var _translation_data_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./translation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/translation/data.js\");\n/* harmony import */ var _text_classification_data_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./text-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-classification/data.js\");\n/* harmony import */ var _text_generation_data_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./text-generation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-generation/data.js\");\n/* harmony import */ var _text_ranking_data_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./text-ranking/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-ranking/data.js\");\n/* harmony import */ var _text_to_video_data_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./text-to-video/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-video/data.js\");\n/* harmony import */ var _unconditional_image_generation_data_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./unconditional-image-generation/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/unconditional-image-generation/data.js\");\n/* harmony import */ var _video_classification_data_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./video-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-classification/data.js\");\n/* harmony import */ var _visual_document_retrieval_data_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./visual-document-retrieval/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-document-retrieval/data.js\");\n/* harmony import */ var _visual_question_answering_data_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./visual-question-answering/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-question-answering/data.js\");\n/* harmony import */ var _zero_shot_classification_data_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./zero-shot-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-classification/data.js\");\n/* harmony import */ var _zero_shot_image_classification_data_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./zero-shot-image-classification/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-image-classification/data.js\");\n/* harmony import */ var _zero_shot_object_detection_data_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./zero-shot-object-detection/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-object-detection/data.js\");\n/* harmony import */ var _image_to_3d_data_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./image-to-3d/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/image-to-3d/data.js\");\n/* harmony import */ var _text_to_3d_data_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./text-to-3d/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-3d/data.js\");\n/* harmony import */ var _keypoint_detection_data_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./keypoint-detection/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/keypoint-detection/data.js\");\n/* harmony import */ var _video_text_to_text_data_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./video-text-to-text/data.js */ \"(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-text-to-text/data.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Model libraries compatible with each ML task\n */ const TASKS_MODEL_LIBRARIES = {\n    \"audio-classification\": [\n        \"speechbrain\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"audio-to-audio\": [\n        \"asteroid\",\n        \"fairseq\",\n        \"speechbrain\"\n    ],\n    \"automatic-speech-recognition\": [\n        \"espnet\",\n        \"nemo\",\n        \"speechbrain\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"audio-text-to-text\": [],\n    \"depth-estimation\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"document-question-answering\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"feature-extraction\": [\n        \"sentence-transformers\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"fill-mask\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"graph-ml\": [\n        \"transformers\"\n    ],\n    \"image-classification\": [\n        \"keras\",\n        \"timm\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"image-feature-extraction\": [\n        \"timm\",\n        \"transformers\"\n    ],\n    \"image-segmentation\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"image-text-to-text\": [\n        \"transformers\"\n    ],\n    \"image-to-image\": [\n        \"diffusers\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"image-to-text\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"image-to-video\": [\n        \"diffusers\"\n    ],\n    \"keypoint-detection\": [\n        \"transformers\"\n    ],\n    \"video-classification\": [\n        \"transformers\"\n    ],\n    \"mask-generation\": [\n        \"transformers\"\n    ],\n    \"multiple-choice\": [\n        \"transformers\"\n    ],\n    \"object-detection\": [\n        \"transformers\",\n        \"transformers.js\",\n        \"ultralytics\"\n    ],\n    other: [],\n    \"question-answering\": [\n        \"adapter-transformers\",\n        \"allennlp\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    robotics: [],\n    \"reinforcement-learning\": [\n        \"transformers\",\n        \"stable-baselines3\",\n        \"ml-agents\",\n        \"sample-factory\"\n    ],\n    \"sentence-similarity\": [\n        \"sentence-transformers\",\n        \"spacy\",\n        \"transformers.js\"\n    ],\n    summarization: [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"table-question-answering\": [\n        \"transformers\"\n    ],\n    \"table-to-text\": [\n        \"transformers\"\n    ],\n    \"tabular-classification\": [\n        \"sklearn\"\n    ],\n    \"tabular-regression\": [\n        \"sklearn\"\n    ],\n    \"tabular-to-text\": [\n        \"transformers\"\n    ],\n    \"text-classification\": [\n        \"adapter-transformers\",\n        \"setfit\",\n        \"spacy\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"text-generation\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"text-ranking\": [\n        \"sentence-transformers\",\n        \"transformers\"\n    ],\n    \"text-retrieval\": [],\n    \"text-to-image\": [\n        \"diffusers\"\n    ],\n    \"text-to-speech\": [\n        \"espnet\",\n        \"tensorflowtts\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"text-to-audio\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"text-to-video\": [\n        \"diffusers\"\n    ],\n    \"time-series-forecasting\": [],\n    \"token-classification\": [\n        \"adapter-transformers\",\n        \"flair\",\n        \"spacy\",\n        \"span-marker\",\n        \"stanza\",\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    translation: [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"unconditional-image-generation\": [\n        \"diffusers\"\n    ],\n    \"video-text-to-text\": [\n        \"transformers\"\n    ],\n    \"visual-question-answering\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"voice-activity-detection\": [],\n    \"zero-shot-classification\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"zero-shot-image-classification\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"zero-shot-object-detection\": [\n        \"transformers\",\n        \"transformers.js\"\n    ],\n    \"text-to-3d\": [\n        \"diffusers\"\n    ],\n    \"image-to-3d\": [\n        \"diffusers\"\n    ],\n    \"any-to-any\": [\n        \"transformers\"\n    ],\n    \"visual-document-retrieval\": [\n        \"transformers\"\n    ],\n    \"video-to-video\": [\n        \"diffusers\"\n    ]\n};\n/**\n * Return the whole TaskData object for a certain task.\n * If the partialTaskData argument is left undefined,\n * the default placeholder data will be used.\n */ function getData(type, partialTaskData = _placeholder_data_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]) {\n    return {\n        ...partialTaskData,\n        id: type,\n        label: _pipelines_js__WEBPACK_IMPORTED_MODULE_0__.PIPELINE_DATA[type].name,\n        libraries: TASKS_MODEL_LIBRARIES[type]\n    };\n}\n// To make comparisons easier, task order is the same as in const.ts\n// Tasks set to undefined won't have an associated task page.\n// Tasks that call getData() without the second argument will\n// have a \"placeholder\" page.\nconst TASKS_DATA = {\n    \"any-to-any\": getData(\"any-to-any\", _any_to_any_data_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n    \"audio-classification\": getData(\"audio-classification\", _audio_classification_data_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n    \"audio-to-audio\": getData(\"audio-to-audio\", _audio_to_audio_data_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n    \"audio-text-to-text\": getData(\"audio-text-to-text\", _placeholder_data_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n    \"automatic-speech-recognition\": getData(\"automatic-speech-recognition\", _automatic_speech_recognition_data_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n    \"depth-estimation\": getData(\"depth-estimation\", _depth_estimation_data_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]),\n    \"document-question-answering\": getData(\"document-question-answering\", _document_question_answering_data_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n    \"visual-document-retrieval\": getData(\"visual-document-retrieval\", _visual_document_retrieval_data_js__WEBPACK_IMPORTED_MODULE_36__[\"default\"]),\n    \"feature-extraction\": getData(\"feature-extraction\", _feature_extraction_data_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n    \"fill-mask\": getData(\"fill-mask\", _fill_mask_data_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n    \"graph-ml\": undefined,\n    \"image-classification\": getData(\"image-classification\", _image_classification_data_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n    \"image-feature-extraction\": getData(\"image-feature-extraction\", _image_feature_extraction_data_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n    \"image-segmentation\": getData(\"image-segmentation\", _image_segmentation_data_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n    \"image-to-image\": getData(\"image-to-image\", _image_to_image_data_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n    \"image-text-to-text\": getData(\"image-text-to-text\", _image_text_to_text_data_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n    \"image-to-text\": getData(\"image-to-text\", _image_to_text_data_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n    \"image-to-video\": getData(\"image-to-video\", _image_to_video_data_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n    \"keypoint-detection\": getData(\"keypoint-detection\", _keypoint_detection_data_js__WEBPACK_IMPORTED_MODULE_43__[\"default\"]),\n    \"mask-generation\": getData(\"mask-generation\", _mask_generation_data_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n    \"multiple-choice\": undefined,\n    \"object-detection\": getData(\"object-detection\", _object_detection_data_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n    \"video-classification\": getData(\"video-classification\", _video_classification_data_js__WEBPACK_IMPORTED_MODULE_35__[\"default\"]),\n    other: undefined,\n    \"question-answering\": getData(\"question-answering\", _question_answering_data_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"]),\n    \"reinforcement-learning\": getData(\"reinforcement-learning\", _reinforcement_learning_data_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"]),\n    robotics: undefined,\n    \"sentence-similarity\": getData(\"sentence-similarity\", _sentence_similarity_data_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"]),\n    summarization: getData(\"summarization\", _summarization_data_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"]),\n    \"table-question-answering\": getData(\"table-question-answering\", _table_question_answering_data_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"]),\n    \"table-to-text\": undefined,\n    \"tabular-classification\": getData(\"tabular-classification\", _tabular_classification_data_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"]),\n    \"tabular-regression\": getData(\"tabular-regression\", _tabular_regression_data_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"]),\n    \"tabular-to-text\": undefined,\n    \"text-classification\": getData(\"text-classification\", _text_classification_data_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"]),\n    \"text-generation\": getData(\"text-generation\", _text_generation_data_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]),\n    \"text-ranking\": getData(\"text-ranking\", _text_ranking_data_js__WEBPACK_IMPORTED_MODULE_32__[\"default\"]),\n    \"text-retrieval\": undefined,\n    \"text-to-image\": getData(\"text-to-image\", _text_to_image_data_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"]),\n    \"text-to-speech\": getData(\"text-to-speech\", _text_to_speech_data_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"]),\n    \"text-to-audio\": undefined,\n    \"text-to-video\": getData(\"text-to-video\", _text_to_video_data_js__WEBPACK_IMPORTED_MODULE_33__[\"default\"]),\n    \"time-series-forecasting\": undefined,\n    \"token-classification\": getData(\"token-classification\", _token_classification_data_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"]),\n    translation: getData(\"translation\", _translation_data_js__WEBPACK_IMPORTED_MODULE_29__[\"default\"]),\n    \"unconditional-image-generation\": getData(\"unconditional-image-generation\", _unconditional_image_generation_data_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"]),\n    \"video-text-to-text\": getData(\"video-text-to-text\", _video_text_to_text_data_js__WEBPACK_IMPORTED_MODULE_44__[\"default\"]),\n    \"video-to-video\": getData(\"video-to-video\", _placeholder_data_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n    \"visual-question-answering\": getData(\"visual-question-answering\", _visual_question_answering_data_js__WEBPACK_IMPORTED_MODULE_37__[\"default\"]),\n    \"voice-activity-detection\": undefined,\n    \"zero-shot-classification\": getData(\"zero-shot-classification\", _zero_shot_classification_data_js__WEBPACK_IMPORTED_MODULE_38__[\"default\"]),\n    \"zero-shot-image-classification\": getData(\"zero-shot-image-classification\", _zero_shot_image_classification_data_js__WEBPACK_IMPORTED_MODULE_39__[\"default\"]),\n    \"zero-shot-object-detection\": getData(\"zero-shot-object-detection\", _zero_shot_object_detection_data_js__WEBPACK_IMPORTED_MODULE_40__[\"default\"]),\n    \"text-to-3d\": getData(\"text-to-3d\", _text_to_3d_data_js__WEBPACK_IMPORTED_MODULE_42__[\"default\"]),\n    \"image-to-3d\": getData(\"image-to-3d\", _image_to_3d_data_js__WEBPACK_IMPORTED_MODULE_41__[\"default\"])\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/keypoint-detection/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/keypoint-detection/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A dataset of hand keypoints of over 500k examples.\",\n            id: \"Vincent-luo/hagrid-mediapipe-hands\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"keypoint-detection-input.png\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"keypoint-detection-output.png\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A robust keypoint detection model.\",\n            id: \"magic-leap-community/superpoint\"\n        },\n        {\n            description: \"A robust keypoint matching model.\",\n            id: \"magic-leap-community/superglue_outdoor\"\n        },\n        {\n            description: \"Strong keypoint detection model used to detect human pose.\",\n            id: \"qualcomm/RTMPose-Body2d\"\n        },\n        {\n            description: \"Powerful keypoint matching model.\",\n            id: \"ETH-CVG/lightglue_disk\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that detects hand keypoints in real-time.\",\n            id: \"datasciencedojo/Hand-Keypoint-Detection-Realtime\"\n        },\n        {\n            description: \"An application for keypoint detection and matching.\",\n            id: \"ETH-CVG/LightGlue\"\n        }\n    ],\n    summary: \"Keypoint detection is the task of identifying meaningful distinctive points or features in an image.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2tleXBvaW50LWRldGVjdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lGLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUyxFQUFFO0lBQ1hDLFFBQVE7UUFDSjtZQUNJUixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsU0FBUztJQUNUQyxjQUFjLEVBQUU7SUFDaEJDLFdBQVc7QUFDZjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL2tleXBvaW50LWRldGVjdGlvbi9kYXRhLmpzP2VkOTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkYXRhc2V0IG9mIGhhbmQga2V5cG9pbnRzIG9mIG92ZXIgNTAwayBleGFtcGxlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIlZpbmNlbnQtbHVvL2hhZ3JpZC1tZWRpYXBpcGUtaGFuZHNcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwia2V5cG9pbnQtZGV0ZWN0aW9uLWlucHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwia2V5cG9pbnQtZGV0ZWN0aW9uLW91dHB1dC5wbmdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCBrZXlwb2ludCBkZXRlY3Rpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJtYWdpYy1sZWFwLWNvbW11bml0eS9zdXBlcnBvaW50XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcm9idXN0IGtleXBvaW50IG1hdGNoaW5nIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWFnaWMtbGVhcC1jb21tdW5pdHkvc3VwZXJnbHVlX291dGRvb3JcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIGtleXBvaW50IGRldGVjdGlvbiBtb2RlbCB1c2VkIHRvIGRldGVjdCBodW1hbiBwb3NlLlwiLFxuICAgICAgICAgICAgaWQ6IFwicXVhbGNvbW0vUlRNUG9zZS1Cb2R5MmRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUG93ZXJmdWwga2V5cG9pbnQgbWF0Y2hpbmcgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJFVEgtQ1ZHL2xpZ2h0Z2x1ZV9kaXNrXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBkZXRlY3RzIGhhbmQga2V5cG9pbnRzIGluIHJlYWwtdGltZS5cIixcbiAgICAgICAgICAgIGlkOiBcImRhdGFzY2llbmNlZG9qby9IYW5kLUtleXBvaW50LURldGVjdGlvbi1SZWFsdGltZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiBmb3Iga2V5cG9pbnQgZGV0ZWN0aW9uIGFuZCBtYXRjaGluZy5cIixcbiAgICAgICAgICAgIGlkOiBcIkVUSC1DVkcvTGlnaHRHbHVlXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIktleXBvaW50IGRldGVjdGlvbiBpcyB0aGUgdGFzayBvZiBpZGVudGlmeWluZyBtZWFuaW5nZnVsIGRpc3RpbmN0aXZlIHBvaW50cyBvciBmZWF0dXJlcyBpbiBhbiBpbWFnZS5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJvdXRwdXRzIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/keypoint-detection/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/mask-generation/data.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/mask-generation/data.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Widely used benchmark dataset for multiple Vision tasks.\",\n            id: \"merve/coco2017\"\n        },\n        {\n            description: \"Medical Imaging dataset of the Human Brain for segmentation and mask generating tasks\",\n            id: \"rocky93/BraTS_segmentation\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"mask-generation-input.png\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"mask-generation-output.png\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"IoU is used to measure the overlap between predicted mask and the ground truth mask.\",\n            id: \"Intersection over Union (IoU)\"\n        }\n    ],\n    models: [\n        {\n            description: \"Small yet powerful mask generation model.\",\n            id: \"Zigeng/SlimSAM-uniform-50\"\n        },\n        {\n            description: \"Very strong mask generation model.\",\n            id: \"facebook/sam2-hiera-large\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that combines a mask generation model with a zero-shot object detection model for text-guided image segmentation.\",\n            id: \"merve/OWLSAM2\"\n        },\n        {\n            description: \"An application that compares the performance of a large and a small mask generation model.\",\n            id: \"merve/slimsam\"\n        },\n        {\n            description: \"An application based on an improved mask generation model.\",\n            id: \"SkalskiP/segment-anything-model-2\"\n        },\n        {\n            description: \"An application to remove objects from videos using mask generation models.\",\n            id: \"SkalskiP/SAM_and_ProPainter\"\n        }\n    ],\n    summary: \"Mask generation is the task of generating masks that identify a specific object or region of interest in a given image. Masks are often used in segmentation tasks, where they provide a precise way to isolate the object of interest for further processing or analysis.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL21hc2stZ2VuZXJhdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUYsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRSxTQUFTO1FBQ0w7WUFDSVAsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNETyxRQUFRO1FBQ0o7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFNBQVM7SUFDVEMsY0FBYyxFQUFFO0lBQ2hCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9tYXNrLWdlbmVyYXRpb24vZGF0YS5qcz9lMzUwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIldpZGVseSB1c2VkIGJlbmNobWFyayBkYXRhc2V0IGZvciBtdWx0aXBsZSBWaXNpb24gdGFza3MuXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9jb2NvMjAxN1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNZWRpY2FsIEltYWdpbmcgZGF0YXNldCBvZiB0aGUgSHVtYW4gQnJhaW4gZm9yIHNlZ21lbnRhdGlvbiBhbmQgbWFzayBnZW5lcmF0aW5nIHRhc2tzXCIsXG4gICAgICAgICAgICBpZDogXCJyb2NreTkzL0JyYVRTX3NlZ21lbnRhdGlvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJtYXNrLWdlbmVyYXRpb24taW5wdXQucG5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJtYXNrLWdlbmVyYXRpb24tb3V0cHV0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJb1UgaXMgdXNlZCB0byBtZWFzdXJlIHRoZSBvdmVybGFwIGJldHdlZW4gcHJlZGljdGVkIG1hc2sgYW5kIHRoZSBncm91bmQgdHJ1dGggbWFzay5cIixcbiAgICAgICAgICAgIGlkOiBcIkludGVyc2VjdGlvbiBvdmVyIFVuaW9uIChJb1UpXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU21hbGwgeWV0IHBvd2VyZnVsIG1hc2sgZ2VuZXJhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIlppZ2VuZy9TbGltU0FNLXVuaWZvcm0tNTBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVmVyeSBzdHJvbmcgbWFzayBnZW5lcmF0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFjZWJvb2svc2FtMi1oaWVyYS1sYXJnZVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY29tYmluZXMgYSBtYXNrIGdlbmVyYXRpb24gbW9kZWwgd2l0aCBhIHplcm8tc2hvdCBvYmplY3QgZGV0ZWN0aW9uIG1vZGVsIGZvciB0ZXh0LWd1aWRlZCBpbWFnZSBzZWdtZW50YXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9PV0xTQU0yXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY29tcGFyZXMgdGhlIHBlcmZvcm1hbmNlIG9mIGEgbGFyZ2UgYW5kIGEgc21hbGwgbWFzayBnZW5lcmF0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWVydmUvc2xpbXNhbVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiBiYXNlZCBvbiBhbiBpbXByb3ZlZCBtYXNrIGdlbmVyYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJTa2Fsc2tpUC9zZWdtZW50LWFueXRoaW5nLW1vZGVsLTJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdG8gcmVtb3ZlIG9iamVjdHMgZnJvbSB2aWRlb3MgdXNpbmcgbWFzayBnZW5lcmF0aW9uIG1vZGVscy5cIixcbiAgICAgICAgICAgIGlkOiBcIlNrYWxza2lQL1NBTV9hbmRfUHJvUGFpbnRlclwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJNYXNrIGdlbmVyYXRpb24gaXMgdGhlIHRhc2sgb2YgZ2VuZXJhdGluZyBtYXNrcyB0aGF0IGlkZW50aWZ5IGEgc3BlY2lmaWMgb2JqZWN0IG9yIHJlZ2lvbiBvZiBpbnRlcmVzdCBpbiBhIGdpdmVuIGltYWdlLiBNYXNrcyBhcmUgb2Z0ZW4gdXNlZCBpbiBzZWdtZW50YXRpb24gdGFza3MsIHdoZXJlIHRoZXkgcHJvdmlkZSBhIHByZWNpc2Ugd2F5IHRvIGlzb2xhdGUgdGhlIG9iamVjdCBvZiBpbnRlcmVzdCBmb3IgZnVydGhlciBwcm9jZXNzaW5nIG9yIGFuYWx5c2lzLlwiLFxuICAgIHdpZGdldE1vZGVsczogW10sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/mask-generation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/object-detection/data.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/object-detection/data.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Widely used benchmark dataset for multiple vision tasks.\",\n            id: \"merve/coco2017\"\n        },\n        {\n            description: \"Multi-task computer vision benchmark.\",\n            id: \"merve/pascal-voc\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"object-detection-input.jpg\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"object-detection-output.jpg\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The Average Precision (AP) metric is the Area Under the PR Curve (AUC-PR). It is calculated for each class separately\",\n            id: \"Average Precision\"\n        },\n        {\n            description: \"The Mean Average Precision (mAP) metric is the overall average of the AP values\",\n            id: \"Mean Average Precision\"\n        },\n        {\n            description: \"The APα metric is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\"\n        }\n    ],\n    models: [\n        {\n            description: \"Solid object detection model pre-trained on the COCO 2017 dataset.\",\n            id: \"facebook/detr-resnet-50\"\n        },\n        {\n            description: \"Accurate object detection model.\",\n            id: \"IDEA-Research/dab-detr-resnet-50\"\n        },\n        {\n            description: \"Fast and accurate object detection model.\",\n            id: \"PekingU/rtdetr_v2_r50vd\"\n        },\n        {\n            description: \"Object detection model for low-lying objects.\",\n            id: \"StephanST/WALDO30\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"Real-time object detection demo.\",\n            id: \"Roboflow/RF-DETR\"\n        },\n        {\n            description: \"An application that contains various object detection models to try from.\",\n            id: \"Gradio-Blocks/Object-Detection-With-DETR-and-YOLOS\"\n        },\n        {\n            description: \"A cutting-edge object detection application.\",\n            id: \"sunsmarterjieleaf/yolov12\"\n        },\n        {\n            description: \"An object tracking, segmentation and inpainting application.\",\n            id: \"VIPLab/Track-Anything\"\n        },\n        {\n            description: \"Very fast object tracking application based on object detection.\",\n            id: \"merve/RT-DETR-tracking-coco\"\n        }\n    ],\n    summary: \"Object Detection models allow users to identify objects of certain defined classes. Object detection models receive an image as input and output the images with bounding boxes and labels on detected objects.\",\n    widgetModels: [\n        \"facebook/detr-resnet-50\"\n    ],\n    youtubeId: \"WdAeKSOpxhw\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL29iamVjdC1kZXRlY3Rpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lGLFVBQVU7Z0JBQ1ZDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUztRQUNMO1lBQ0lQLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RPLFFBQVE7UUFDSjtZQUNJUixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBMEI7SUFDekNDLFdBQVc7QUFDZjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL29iamVjdC1kZXRlY3Rpb24vZGF0YS5qcz9hZjVjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIldpZGVseSB1c2VkIGJlbmNobWFyayBkYXRhc2V0IGZvciBtdWx0aXBsZSB2aXNpb24gdGFza3MuXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9jb2NvMjAxN1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNdWx0aS10YXNrIGNvbXB1dGVyIHZpc2lvbiBiZW5jaG1hcmsuXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9wYXNjYWwtdm9jXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcIm9iamVjdC1kZXRlY3Rpb24taW5wdXQuanBnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJvYmplY3QtZGV0ZWN0aW9uLW91dHB1dC5qcGdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIEF2ZXJhZ2UgUHJlY2lzaW9uIChBUCkgbWV0cmljIGlzIHRoZSBBcmVhIFVuZGVyIHRoZSBQUiBDdXJ2ZSAoQVVDLVBSKS4gSXQgaXMgY2FsY3VsYXRlZCBmb3IgZWFjaCBjbGFzcyBzZXBhcmF0ZWx5XCIsXG4gICAgICAgICAgICBpZDogXCJBdmVyYWdlIFByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgTWVhbiBBdmVyYWdlIFByZWNpc2lvbiAobUFQKSBtZXRyaWMgaXMgdGhlIG92ZXJhbGwgYXZlcmFnZSBvZiB0aGUgQVAgdmFsdWVzXCIsXG4gICAgICAgICAgICBpZDogXCJNZWFuIEF2ZXJhZ2UgUHJlY2lzaW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBBUM6xIG1ldHJpYyBpcyB0aGUgQXZlcmFnZSBQcmVjaXNpb24gYXQgdGhlIElvVSB0aHJlc2hvbGQgb2YgYSDOsSB2YWx1ZSwgZm9yIGV4YW1wbGUsIEFQNTAgYW5kIEFQNzVcIixcbiAgICAgICAgICAgIGlkOiBcIkFQzrFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTb2xpZCBvYmplY3QgZGV0ZWN0aW9uIG1vZGVsIHByZS10cmFpbmVkIG9uIHRoZSBDT0NPIDIwMTcgZGF0YXNldC5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL2RldHItcmVzbmV0LTUwXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFjY3VyYXRlIG9iamVjdCBkZXRlY3Rpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJJREVBLVJlc2VhcmNoL2RhYi1kZXRyLXJlc25ldC01MFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGYXN0IGFuZCBhY2N1cmF0ZSBvYmplY3QgZGV0ZWN0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiUGVraW5nVS9ydGRldHJfdjJfcjUwdmRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiT2JqZWN0IGRldGVjdGlvbiBtb2RlbCBmb3IgbG93LWx5aW5nIG9iamVjdHMuXCIsXG4gICAgICAgICAgICBpZDogXCJTdGVwaGFuU1QvV0FMRE8zMFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlJlYWwtdGltZSBvYmplY3QgZGV0ZWN0aW9uIGRlbW8uXCIsXG4gICAgICAgICAgICBpZDogXCJSb2JvZmxvdy9SRi1ERVRSXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY29udGFpbnMgdmFyaW91cyBvYmplY3QgZGV0ZWN0aW9uIG1vZGVscyB0byB0cnkgZnJvbS5cIixcbiAgICAgICAgICAgIGlkOiBcIkdyYWRpby1CbG9ja3MvT2JqZWN0LURldGVjdGlvbi1XaXRoLURFVFItYW5kLVlPTE9TXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgY3V0dGluZy1lZGdlIG9iamVjdCBkZXRlY3Rpb24gYXBwbGljYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJzdW5zbWFydGVyamllbGVhZi95b2xvdjEyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIG9iamVjdCB0cmFja2luZywgc2VnbWVudGF0aW9uIGFuZCBpbnBhaW50aW5nIGFwcGxpY2F0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiVklQTGFiL1RyYWNrLUFueXRoaW5nXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZlcnkgZmFzdCBvYmplY3QgdHJhY2tpbmcgYXBwbGljYXRpb24gYmFzZWQgb24gb2JqZWN0IGRldGVjdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIm1lcnZlL1JULURFVFItdHJhY2tpbmctY29jb1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJPYmplY3QgRGV0ZWN0aW9uIG1vZGVscyBhbGxvdyB1c2VycyB0byBpZGVudGlmeSBvYmplY3RzIG9mIGNlcnRhaW4gZGVmaW5lZCBjbGFzc2VzLiBPYmplY3QgZGV0ZWN0aW9uIG1vZGVscyByZWNlaXZlIGFuIGltYWdlIGFzIGlucHV0IGFuZCBvdXRwdXQgdGhlIGltYWdlcyB3aXRoIGJvdW5kaW5nIGJveGVzIGFuZCBsYWJlbHMgb24gZGV0ZWN0ZWQgb2JqZWN0cy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcImZhY2Vib29rL2RldHItcmVzbmV0LTUwXCJdLFxuICAgIHlvdXR1YmVJZDogXCJXZEFlS1NPcHhod1wiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/object-detection/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/placeholder/data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/placeholder/data.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [],\n    demo: {\n        inputs: [],\n        outputs: []\n    },\n    isPlaceholder: true,\n    metrics: [],\n    models: [],\n    spaces: [],\n    summary: \"\",\n    widgetModels: [],\n    youtubeId: undefined,\n    /// If this is a subtask, link to the most general task ID\n    /// (eg, text-generation is the canonical ID of text-simplification)\n    canonicalId: undefined\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3BsYWNlaG9sZGVyL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVSxFQUFFO0lBQ1pDLE1BQU07UUFDRkMsUUFBUSxFQUFFO1FBQ1ZDLFNBQVMsRUFBRTtJQUNmO0lBQ0FDLGVBQWU7SUFDZkMsU0FBUyxFQUFFO0lBQ1hDLFFBQVEsRUFBRTtJQUNWQyxRQUFRLEVBQUU7SUFDVkMsU0FBUztJQUNUQyxjQUFjLEVBQUU7SUFDaEJDLFdBQVdDO0lBQ1gsMERBQTBEO0lBQzFELG9FQUFvRTtJQUNwRUMsYUFBYUQ7QUFDakI7QUFDQSxpRUFBZVosUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9wbGFjZWhvbGRlci9kYXRhLmpzPzJhMmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgb3V0cHV0czogW10sXG4gICAgfSxcbiAgICBpc1BsYWNlaG9sZGVyOiB0cnVlLFxuICAgIG1ldHJpY3M6IFtdLFxuICAgIG1vZGVsczogW10sXG4gICAgc3BhY2VzOiBbXSxcbiAgICBzdW1tYXJ5OiBcIlwiLFxuICAgIHdpZGdldE1vZGVsczogW10sXG4gICAgeW91dHViZUlkOiB1bmRlZmluZWQsXG4gICAgLy8vIElmIHRoaXMgaXMgYSBzdWJ0YXNrLCBsaW5rIHRvIHRoZSBtb3N0IGdlbmVyYWwgdGFzayBJRFxuICAgIC8vLyAoZWcsIHRleHQtZ2VuZXJhdGlvbiBpcyB0aGUgY2Fub25pY2FsIElEIG9mIHRleHQtc2ltcGxpZmljYXRpb24pXG4gICAgY2Fub25pY2FsSWQ6IHVuZGVmaW5lZCxcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVtbyIsImlucHV0cyIsIm91dHB1dHMiLCJpc1BsYWNlaG9sZGVyIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiLCJ1bmRlZmluZWQiLCJjYW5vbmljYWxJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/placeholder/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/question-answering/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/question-answering/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"A famous question answering dataset based on English articles from Wikipedia.\",\n            id: \"squad_v2\"\n        },\n        {\n            // TODO write proper description\n            description: \"A dataset of aggregated anonymized actual queries issued to the Google search engine.\",\n            id: \"natural_questions\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Question\",\n                content: \"Which name is also used to describe the Amazon rainforest in English?\",\n                type: \"text\"\n            },\n            {\n                label: \"Context\",\n                content: \"The Amazon rainforest, also known in English as Amazonia or the Amazon Jungle\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"Amazonia\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Exact Match is a metric based on the strict character match of the predicted answer and the right answer. For answers predicted correctly, the Exact Match will be 1. Even if only one character is different, Exact Match will be 0\",\n            id: \"exact-match\"\n        },\n        {\n            description: \" The F1-Score metric is useful if we value both false positives and false negatives equally. The F1-Score is calculated on each word in the predicted sequence against the correct answer\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"A robust baseline model for most question answering domains.\",\n            id: \"deepset/roberta-base-squad2\"\n        },\n        {\n            description: \"Small yet robust model that can answer questions.\",\n            id: \"distilbert/distilbert-base-cased-distilled-squad\"\n        },\n        {\n            description: \"A special model that can answer questions from tables.\",\n            id: \"google/tapas-base-finetuned-wtq\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can answer a long question from Wikipedia.\",\n            id: \"deepset/wikipedia-assistant\"\n        }\n    ],\n    summary: \"Question Answering models can retrieve the answer to a question from a given text, which is useful for searching for an answer in a document. Some question answering models can generate answers without context!\",\n    widgetModels: [\n        \"deepset/roberta-base-squad2\"\n    ],\n    youtubeId: \"ajPx5LwJD-I\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3F1ZXN0aW9uLWFuc3dlcmluZy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJLGdDQUFnQztZQUNoQ0MsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJLGdDQUFnQztZQUNoQ0QsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lGLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUgsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRSxTQUFTO1FBQ0w7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RRLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUE4QjtJQUM3Q0MsV0FBVztBQUNmO0FBQ0EsaUVBQWVmLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvcXVlc3Rpb24tYW5zd2VyaW5nL2RhdGEuanM/ZmRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUT0RPIHdyaXRlIHByb3BlciBkZXNjcmlwdGlvblxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBmYW1vdXMgcXVlc3Rpb24gYW5zd2VyaW5nIGRhdGFzZXQgYmFzZWQgb24gRW5nbGlzaCBhcnRpY2xlcyBmcm9tIFdpa2lwZWRpYS5cIixcbiAgICAgICAgICAgIGlkOiBcInNxdWFkX3YyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gd3JpdGUgcHJvcGVyIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGRhdGFzZXQgb2YgYWdncmVnYXRlZCBhbm9ueW1pemVkIGFjdHVhbCBxdWVyaWVzIGlzc3VlZCB0byB0aGUgR29vZ2xlIHNlYXJjaCBlbmdpbmUuXCIsXG4gICAgICAgICAgICBpZDogXCJuYXR1cmFsX3F1ZXN0aW9uc1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJRdWVzdGlvblwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiV2hpY2ggbmFtZSBpcyBhbHNvIHVzZWQgdG8gZGVzY3JpYmUgdGhlIEFtYXpvbiByYWluZm9yZXN0IGluIEVuZ2xpc2g/XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNvbnRleHRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlRoZSBBbWF6b24gcmFpbmZvcmVzdCwgYWxzbyBrbm93biBpbiBFbmdsaXNoIGFzIEFtYXpvbmlhIG9yIHRoZSBBbWF6b24gSnVuZ2xlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQW5zd2VyXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJBbWF6b25pYVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRXhhY3QgTWF0Y2ggaXMgYSBtZXRyaWMgYmFzZWQgb24gdGhlIHN0cmljdCBjaGFyYWN0ZXIgbWF0Y2ggb2YgdGhlIHByZWRpY3RlZCBhbnN3ZXIgYW5kIHRoZSByaWdodCBhbnN3ZXIuIEZvciBhbnN3ZXJzIHByZWRpY3RlZCBjb3JyZWN0bHksIHRoZSBFeGFjdCBNYXRjaCB3aWxsIGJlIDEuIEV2ZW4gaWYgb25seSBvbmUgY2hhcmFjdGVyIGlzIGRpZmZlcmVudCwgRXhhY3QgTWF0Y2ggd2lsbCBiZSAwXCIsXG4gICAgICAgICAgICBpZDogXCJleGFjdC1tYXRjaFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCIgVGhlIEYxLVNjb3JlIG1ldHJpYyBpcyB1c2VmdWwgaWYgd2UgdmFsdWUgYm90aCBmYWxzZSBwb3NpdGl2ZXMgYW5kIGZhbHNlIG5lZ2F0aXZlcyBlcXVhbGx5LiBUaGUgRjEtU2NvcmUgaXMgY2FsY3VsYXRlZCBvbiBlYWNoIHdvcmQgaW4gdGhlIHByZWRpY3RlZCBzZXF1ZW5jZSBhZ2FpbnN0IHRoZSBjb3JyZWN0IGFuc3dlclwiLFxuICAgICAgICAgICAgaWQ6IFwiZjFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCBiYXNlbGluZSBtb2RlbCBmb3IgbW9zdCBxdWVzdGlvbiBhbnN3ZXJpbmcgZG9tYWlucy5cIixcbiAgICAgICAgICAgIGlkOiBcImRlZXBzZXQvcm9iZXJ0YS1iYXNlLXNxdWFkMlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTbWFsbCB5ZXQgcm9idXN0IG1vZGVsIHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMuXCIsXG4gICAgICAgICAgICBpZDogXCJkaXN0aWxiZXJ0L2Rpc3RpbGJlcnQtYmFzZS1jYXNlZC1kaXN0aWxsZWQtc3F1YWRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzcGVjaWFsIG1vZGVsIHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgZnJvbSB0YWJsZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJnb29nbGUvdGFwYXMtYmFzZS1maW5ldHVuZWQtd3RxXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBjYW4gYW5zd2VyIGEgbG9uZyBxdWVzdGlvbiBmcm9tIFdpa2lwZWRpYS5cIixcbiAgICAgICAgICAgIGlkOiBcImRlZXBzZXQvd2lraXBlZGlhLWFzc2lzdGFudFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJRdWVzdGlvbiBBbnN3ZXJpbmcgbW9kZWxzIGNhbiByZXRyaWV2ZSB0aGUgYW5zd2VyIHRvIGEgcXVlc3Rpb24gZnJvbSBhIGdpdmVuIHRleHQsIHdoaWNoIGlzIHVzZWZ1bCBmb3Igc2VhcmNoaW5nIGZvciBhbiBhbnN3ZXIgaW4gYSBkb2N1bWVudC4gU29tZSBxdWVzdGlvbiBhbnN3ZXJpbmcgbW9kZWxzIGNhbiBnZW5lcmF0ZSBhbnN3ZXJzIHdpdGhvdXQgY29udGV4dCFcIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcImRlZXBzZXQvcm9iZXJ0YS1iYXNlLXNxdWFkMlwiXSxcbiAgICB5b3V0dWJlSWQ6IFwiYWpQeDVMd0pELUlcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/question-answering/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/reinforcement-learning/data.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/reinforcement-learning/data.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A curation of widely used datasets for Data Driven Deep Reinforcement Learning (D4RL)\",\n            id: \"edbeeching/decision_transformer_gym_replay\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"State\",\n                content: \"Red traffic light, pedestrians are about to pass.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Action\",\n                content: \"Stop the car.\",\n                type: \"text\"\n            },\n            {\n                label: \"Next State\",\n                content: \"Yellow light, pedestrians have crossed.\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Accumulated reward across all time steps discounted by a factor that ranges between 0 and 1 and determines how much the agent optimizes for future relative to immediate rewards. Measures how good is the policy ultimately found by a given algorithm considering uncertainty over the future.\",\n            id: \"Discounted Total Reward\"\n        },\n        {\n            description: \"Average return obtained after running the policy for a certain number of evaluation episodes. As opposed to total reward, mean reward considers how much reward a given algorithm receives while learning.\",\n            id: \"Mean Reward\"\n        },\n        {\n            description: \"Measures how good a given algorithm is after a predefined time. Some algorithms may be guaranteed to converge to optimal behavior across many time steps. However, an agent that reaches an acceptable level of optimality after a given time horizon may be preferable to one that ultimately reaches optimality but takes a long time.\",\n            id: \"Level of Performance After Some Time\"\n        }\n    ],\n    models: [\n        {\n            description: \"A Reinforcement Learning model trained on expert data from the Gym Hopper environment\",\n            id: \"edbeeching/decision-transformer-gym-hopper-expert\"\n        },\n        {\n            description: \"A PPO agent playing seals/CartPole-v0 using the stable-baselines3 library and the RL Zoo.\",\n            id: \"HumanCompatibleAI/ppo-seals-CartPole-v0\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application for a cute puppy agent learning to catch a stick.\",\n            id: \"ThomasSimonini/Huggy\"\n        },\n        {\n            description: \"An application to play Snowball Fight with a reinforcement learning agent.\",\n            id: \"ThomasSimonini/SnowballFight\"\n        }\n    ],\n    summary: \"Reinforcement learning is the computational approach of learning from action by interacting with an environment through trial and error and receiving rewards (negative or positive) as feedback\",\n    widgetModels: [],\n    youtubeId: \"q0BiUn5LiBc\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3JlaW5mb3JjZW1lbnQtbGVhcm5pbmcvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJSCxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUYsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRSxTQUFTO1FBQ0w7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFEsUUFBUTtRQUNKO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFNBQVM7SUFDVEMsY0FBYyxFQUFFO0lBQ2hCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWYsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy9yZWluZm9yY2VtZW50LWxlYXJuaW5nL2RhdGEuanM/MWJiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGN1cmF0aW9uIG9mIHdpZGVseSB1c2VkIGRhdGFzZXRzIGZvciBEYXRhIERyaXZlbiBEZWVwIFJlaW5mb3JjZW1lbnQgTGVhcm5pbmcgKEQ0UkwpXCIsXG4gICAgICAgICAgICBpZDogXCJlZGJlZWNoaW5nL2RlY2lzaW9uX3RyYW5zZm9ybWVyX2d5bV9yZXBsYXlcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiU3RhdGVcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlJlZCB0cmFmZmljIGxpZ2h0LCBwZWRlc3RyaWFucyBhcmUgYWJvdXQgdG8gcGFzcy5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJBY3Rpb25cIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlN0b3AgdGhlIGNhci5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTmV4dCBTdGF0ZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiWWVsbG93IGxpZ2h0LCBwZWRlc3RyaWFucyBoYXZlIGNyb3NzZWQuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBY2N1bXVsYXRlZCByZXdhcmQgYWNyb3NzIGFsbCB0aW1lIHN0ZXBzIGRpc2NvdW50ZWQgYnkgYSBmYWN0b3IgdGhhdCByYW5nZXMgYmV0d2VlbiAwIGFuZCAxIGFuZCBkZXRlcm1pbmVzIGhvdyBtdWNoIHRoZSBhZ2VudCBvcHRpbWl6ZXMgZm9yIGZ1dHVyZSByZWxhdGl2ZSB0byBpbW1lZGlhdGUgcmV3YXJkcy4gTWVhc3VyZXMgaG93IGdvb2QgaXMgdGhlIHBvbGljeSB1bHRpbWF0ZWx5IGZvdW5kIGJ5IGEgZ2l2ZW4gYWxnb3JpdGhtIGNvbnNpZGVyaW5nIHVuY2VydGFpbnR5IG92ZXIgdGhlIGZ1dHVyZS5cIixcbiAgICAgICAgICAgIGlkOiBcIkRpc2NvdW50ZWQgVG90YWwgUmV3YXJkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkF2ZXJhZ2UgcmV0dXJuIG9idGFpbmVkIGFmdGVyIHJ1bm5pbmcgdGhlIHBvbGljeSBmb3IgYSBjZXJ0YWluIG51bWJlciBvZiBldmFsdWF0aW9uIGVwaXNvZGVzLiBBcyBvcHBvc2VkIHRvIHRvdGFsIHJld2FyZCwgbWVhbiByZXdhcmQgY29uc2lkZXJzIGhvdyBtdWNoIHJld2FyZCBhIGdpdmVuIGFsZ29yaXRobSByZWNlaXZlcyB3aGlsZSBsZWFybmluZy5cIixcbiAgICAgICAgICAgIGlkOiBcIk1lYW4gUmV3YXJkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1lYXN1cmVzIGhvdyBnb29kIGEgZ2l2ZW4gYWxnb3JpdGhtIGlzIGFmdGVyIGEgcHJlZGVmaW5lZCB0aW1lLiBTb21lIGFsZ29yaXRobXMgbWF5IGJlIGd1YXJhbnRlZWQgdG8gY29udmVyZ2UgdG8gb3B0aW1hbCBiZWhhdmlvciBhY3Jvc3MgbWFueSB0aW1lIHN0ZXBzLiBIb3dldmVyLCBhbiBhZ2VudCB0aGF0IHJlYWNoZXMgYW4gYWNjZXB0YWJsZSBsZXZlbCBvZiBvcHRpbWFsaXR5IGFmdGVyIGEgZ2l2ZW4gdGltZSBob3Jpem9uIG1heSBiZSBwcmVmZXJhYmxlIHRvIG9uZSB0aGF0IHVsdGltYXRlbHkgcmVhY2hlcyBvcHRpbWFsaXR5IGJ1dCB0YWtlcyBhIGxvbmcgdGltZS5cIixcbiAgICAgICAgICAgIGlkOiBcIkxldmVsIG9mIFBlcmZvcm1hbmNlIEFmdGVyIFNvbWUgVGltZVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgUmVpbmZvcmNlbWVudCBMZWFybmluZyBtb2RlbCB0cmFpbmVkIG9uIGV4cGVydCBkYXRhIGZyb20gdGhlIEd5bSBIb3BwZXIgZW52aXJvbm1lbnRcIixcbiAgICAgICAgICAgIGlkOiBcImVkYmVlY2hpbmcvZGVjaXNpb24tdHJhbnNmb3JtZXItZ3ltLWhvcHBlci1leHBlcnRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBQUE8gYWdlbnQgcGxheWluZyBzZWFscy9DYXJ0UG9sZS12MCB1c2luZyB0aGUgc3RhYmxlLWJhc2VsaW5lczMgbGlicmFyeSBhbmQgdGhlIFJMIFpvby5cIixcbiAgICAgICAgICAgIGlkOiBcIkh1bWFuQ29tcGF0aWJsZUFJL3Bwby1zZWFscy1DYXJ0UG9sZS12MFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIGZvciBhIGN1dGUgcHVwcHkgYWdlbnQgbGVhcm5pbmcgdG8gY2F0Y2ggYSBzdGljay5cIixcbiAgICAgICAgICAgIGlkOiBcIlRob21hc1NpbW9uaW5pL0h1Z2d5XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRvIHBsYXkgU25vd2JhbGwgRmlnaHQgd2l0aCBhIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgYWdlbnQuXCIsXG4gICAgICAgICAgICBpZDogXCJUaG9tYXNTaW1vbmluaS9Tbm93YmFsbEZpZ2h0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgaXMgdGhlIGNvbXB1dGF0aW9uYWwgYXBwcm9hY2ggb2YgbGVhcm5pbmcgZnJvbSBhY3Rpb24gYnkgaW50ZXJhY3Rpbmcgd2l0aCBhbiBlbnZpcm9ubWVudCB0aHJvdWdoIHRyaWFsIGFuZCBlcnJvciBhbmQgcmVjZWl2aW5nIHJld2FyZHMgKG5lZ2F0aXZlIG9yIHBvc2l0aXZlKSBhcyBmZWVkYmFja1wiLFxuICAgIHdpZGdldE1vZGVsczogW10sXG4gICAgeW91dHViZUlkOiBcInEwQmlVbjVMaUJjXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwibGFiZWwiLCJjb250ZW50IiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/reinforcement-learning/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/sentence-similarity/data.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/sentence-similarity/data.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Bing queries with relevant passages from various web sources.\",\n            id: \"microsoft/ms_marco\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Source sentence\",\n                content: \"Machine learning is so easy.\",\n                type: \"text\"\n            },\n            {\n                label: \"Sentences to compare to\",\n                content: \"Deep learning is so straightforward.\",\n                type: \"text\"\n            },\n            {\n                label: \"\",\n                content: \"This is so difficult, like rocket science.\",\n                type: \"text\"\n            },\n            {\n                label: \"\",\n                content: \"I can't believe how much I struggled with this.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Deep learning is so straightforward.\",\n                        score: 0.623\n                    },\n                    {\n                        label: \"This is so difficult, like rocket science.\",\n                        score: 0.413\n                    },\n                    {\n                        label: \"I can't believe how much I struggled with this.\",\n                        score: 0.256\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Reciprocal Rank is a measure used to rank the relevancy of documents given a set of documents. Reciprocal Rank is the reciprocal of the rank of the document retrieved, meaning, if the rank is 3, the Reciprocal Rank is 0.33. If the rank is 1, the Reciprocal Rank is 1\",\n            id: \"Mean Reciprocal Rank\"\n        },\n        {\n            description: \"The similarity of the embeddings is evaluated mainly on cosine similarity. It is calculated as the cosine of the angle between two vectors. It is particularly useful when your texts are not the same length\",\n            id: \"Cosine Similarity\"\n        }\n    ],\n    models: [\n        {\n            description: \"This model works well for sentences and paragraphs and can be used for clustering/grouping and semantic searches.\",\n            id: \"sentence-transformers/all-mpnet-base-v2\"\n        },\n        {\n            description: \"A multilingual robust sentence similarity model.\",\n            id: \"BAAI/bge-m3\"\n        },\n        {\n            description: \"A robust sentence similarity model.\",\n            id: \"HIT-TMG/KaLM-embedding-multilingual-mini-instruct-v1.5\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that leverages sentence similarity to answer questions from YouTube videos.\",\n            id: \"Gradio-Blocks/Ask_Questions_To_YouTube_Videos\"\n        },\n        {\n            description: \"An application that retrieves relevant PubMed abstracts for a given online article which can be used as further references.\",\n            id: \"Gradio-Blocks/pubmed-abstract-retriever\"\n        },\n        {\n            description: \"An application that leverages sentence similarity to summarize text.\",\n            id: \"nickmuchi/article-text-summarizer\"\n        },\n        {\n            description: \"A guide that explains how Sentence Transformers can be used for semantic search.\",\n            id: \"sentence-transformers/Sentence_Transformers_for_semantic_search\"\n        }\n    ],\n    summary: \"Sentence Similarity is the task of determining how similar two texts are. Sentence similarity models convert input texts into vectors (embeddings) that capture semantic information and calculate how close (similar) they are between them. This task is particularly useful for information retrieval and clustering/grouping.\",\n    widgetModels: [\n        \"BAAI/bge-small-en-v1.5\"\n    ],\n    youtubeId: \"VCZq5AkbNEU\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3NlbnRlbmNlLXNpbWlsYXJpdHkvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lGLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtZQUNBO2dCQUNJRixPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUYsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJRCxNQUFNO2dCQUNORSxNQUFNO29CQUNGO3dCQUNJSixPQUFPO3dCQUNQSyxPQUFPO29CQUNYO29CQUNBO3dCQUNJTCxPQUFPO3dCQUNQSyxPQUFPO29CQUNYO29CQUNBO3dCQUNJTCxPQUFPO3dCQUNQSyxPQUFPO29CQUNYO2lCQUNIO1lBQ0w7U0FDSDtJQUNMO0lBQ0FDLFNBQVM7UUFDTDtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsUUFBUTtRQUNKO1lBQ0lYLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFFBQVE7UUFDSjtZQUNJWixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RZLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQXlCO0lBQ3hDQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWpCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3Mvc2VudGVuY2Utc2ltaWxhcml0eS9kYXRhLmpzPzNkZmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmluZyBxdWVyaWVzIHdpdGggcmVsZXZhbnQgcGFzc2FnZXMgZnJvbSB2YXJpb3VzIHdlYiBzb3VyY2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWljcm9zb2Z0L21zX21hcmNvXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlNvdXJjZSBzZW50ZW5jZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTWFjaGluZSBsZWFybmluZyBpcyBzbyBlYXN5LlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJTZW50ZW5jZXMgdG8gY29tcGFyZSB0b1wiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiRGVlcCBsZWFybmluZyBpcyBzbyBzdHJhaWdodGZvcndhcmQuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiVGhpcyBpcyBzbyBkaWZmaWN1bHQsIGxpa2Ugcm9ja2V0IHNjaWVuY2UuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiSSBjYW4ndCBiZWxpZXZlIGhvdyBtdWNoIEkgc3RydWdnbGVkIHdpdGggdGhpcy5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEZWVwIGxlYXJuaW5nIGlzIHNvIHN0cmFpZ2h0Zm9yd2FyZC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjYyMyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVGhpcyBpcyBzbyBkaWZmaWN1bHQsIGxpa2Ugcm9ja2V0IHNjaWVuY2UuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC40MTMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkkgY2FuJ3QgYmVsaWV2ZSBob3cgbXVjaCBJIHN0cnVnZ2xlZCB3aXRoIHRoaXMuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4yNTYsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlJlY2lwcm9jYWwgUmFuayBpcyBhIG1lYXN1cmUgdXNlZCB0byByYW5rIHRoZSByZWxldmFuY3kgb2YgZG9jdW1lbnRzIGdpdmVuIGEgc2V0IG9mIGRvY3VtZW50cy4gUmVjaXByb2NhbCBSYW5rIGlzIHRoZSByZWNpcHJvY2FsIG9mIHRoZSByYW5rIG9mIHRoZSBkb2N1bWVudCByZXRyaWV2ZWQsIG1lYW5pbmcsIGlmIHRoZSByYW5rIGlzIDMsIHRoZSBSZWNpcHJvY2FsIFJhbmsgaXMgMC4zMy4gSWYgdGhlIHJhbmsgaXMgMSwgdGhlIFJlY2lwcm9jYWwgUmFuayBpcyAxXCIsXG4gICAgICAgICAgICBpZDogXCJNZWFuIFJlY2lwcm9jYWwgUmFua1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgc2ltaWxhcml0eSBvZiB0aGUgZW1iZWRkaW5ncyBpcyBldmFsdWF0ZWQgbWFpbmx5IG9uIGNvc2luZSBzaW1pbGFyaXR5LiBJdCBpcyBjYWxjdWxhdGVkIGFzIHRoZSBjb3NpbmUgb2YgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIHZlY3RvcnMuIEl0IGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgd2hlbiB5b3VyIHRleHRzIGFyZSBub3QgdGhlIHNhbWUgbGVuZ3RoXCIsXG4gICAgICAgICAgICBpZDogXCJDb3NpbmUgU2ltaWxhcml0eVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgbW9kZWwgd29ya3Mgd2VsbCBmb3Igc2VudGVuY2VzIGFuZCBwYXJhZ3JhcGhzIGFuZCBjYW4gYmUgdXNlZCBmb3IgY2x1c3RlcmluZy9ncm91cGluZyBhbmQgc2VtYW50aWMgc2VhcmNoZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJzZW50ZW5jZS10cmFuc2Zvcm1lcnMvYWxsLW1wbmV0LWJhc2UtdjJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBtdWx0aWxpbmd1YWwgcm9idXN0IHNlbnRlbmNlIHNpbWlsYXJpdHkgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJCQUFJL2JnZS1tM1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCBzZW50ZW5jZSBzaW1pbGFyaXR5IG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSElULVRNRy9LYUxNLWVtYmVkZGluZy1tdWx0aWxpbmd1YWwtbWluaS1pbnN0cnVjdC12MS41XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBsZXZlcmFnZXMgc2VudGVuY2Ugc2ltaWxhcml0eSB0byBhbnN3ZXIgcXVlc3Rpb25zIGZyb20gWW91VHViZSB2aWRlb3MuXCIsXG4gICAgICAgICAgICBpZDogXCJHcmFkaW8tQmxvY2tzL0Fza19RdWVzdGlvbnNfVG9fWW91VHViZV9WaWRlb3NcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCByZXRyaWV2ZXMgcmVsZXZhbnQgUHViTWVkIGFic3RyYWN0cyBmb3IgYSBnaXZlbiBvbmxpbmUgYXJ0aWNsZSB3aGljaCBjYW4gYmUgdXNlZCBhcyBmdXJ0aGVyIHJlZmVyZW5jZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJHcmFkaW8tQmxvY2tzL3B1Ym1lZC1hYnN0cmFjdC1yZXRyaWV2ZXJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBsZXZlcmFnZXMgc2VudGVuY2Ugc2ltaWxhcml0eSB0byBzdW1tYXJpemUgdGV4dC5cIixcbiAgICAgICAgICAgIGlkOiBcIm5pY2ttdWNoaS9hcnRpY2xlLXRleHQtc3VtbWFyaXplclwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGd1aWRlIHRoYXQgZXhwbGFpbnMgaG93IFNlbnRlbmNlIFRyYW5zZm9ybWVycyBjYW4gYmUgdXNlZCBmb3Igc2VtYW50aWMgc2VhcmNoLlwiLFxuICAgICAgICAgICAgaWQ6IFwic2VudGVuY2UtdHJhbnNmb3JtZXJzL1NlbnRlbmNlX1RyYW5zZm9ybWVyc19mb3Jfc2VtYW50aWNfc2VhcmNoXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlNlbnRlbmNlIFNpbWlsYXJpdHkgaXMgdGhlIHRhc2sgb2YgZGV0ZXJtaW5pbmcgaG93IHNpbWlsYXIgdHdvIHRleHRzIGFyZS4gU2VudGVuY2Ugc2ltaWxhcml0eSBtb2RlbHMgY29udmVydCBpbnB1dCB0ZXh0cyBpbnRvIHZlY3RvcnMgKGVtYmVkZGluZ3MpIHRoYXQgY2FwdHVyZSBzZW1hbnRpYyBpbmZvcm1hdGlvbiBhbmQgY2FsY3VsYXRlIGhvdyBjbG9zZSAoc2ltaWxhcikgdGhleSBhcmUgYmV0d2VlbiB0aGVtLiBUaGlzIHRhc2sgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgaW5mb3JtYXRpb24gcmV0cmlldmFsIGFuZCBjbHVzdGVyaW5nL2dyb3VwaW5nLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiQkFBSS9iZ2Utc21hbGwtZW4tdjEuNVwiXSxcbiAgICB5b3V0dWJlSWQ6IFwiVkNacTVBa2JORVVcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsImRhdGEiLCJzY29yZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/sentence-similarity/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/summarization/data.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/summarization/data.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    canonicalId: \"text-generation\",\n    datasets: [\n        {\n            description: \"News articles in five different languages along with their summaries. Widely used for benchmarking multilingual summarization models.\",\n            id: \"mlsum\"\n        },\n        {\n            description: \"English conversations and their summaries. Useful for benchmarking conversational agents.\",\n            id: \"samsum\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres. Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. It was the first structure to reach a height of 300 metres.\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The generated sequence is compared against its summary, and the overlap of tokens are counted. ROUGE-N refers to overlap of N subsequent tokens, ROUGE-1 refers to overlap of single tokens and ROUGE-2 is the overlap of two subsequent tokens.\",\n            id: \"rouge\"\n        }\n    ],\n    models: [\n        {\n            description: \"A strong summarization model trained on English news articles. Excels at generating factual summaries.\",\n            id: \"facebook/bart-large-cnn\"\n        },\n        {\n            description: \"A summarization model trained on medical articles.\",\n            id: \"Falconsai/medical_summarization\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can summarize long paragraphs.\",\n            id: \"pszemraj/summarize-long-text\"\n        },\n        {\n            description: \"A much needed summarization application for terms and conditions.\",\n            id: \"ml6team/distilbart-tos-summarizer-tosdr\"\n        },\n        {\n            description: \"An application that summarizes long documents.\",\n            id: \"pszemraj/document-summarization\"\n        },\n        {\n            description: \"An application that can detect errors in abstractive summarization.\",\n            id: \"ml6team/post-processing-summarization\"\n        }\n    ],\n    summary: \"Summarization is the task of producing a shorter version of a document while preserving its important information. Some models can extract text from the original input, while other models can generate entirely new text.\",\n    widgetModels: [\n        \"facebook/bart-large-cnn\"\n    ],\n    youtubeId: \"yHnr5Dk2zCI\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3N1bW1hcml6YXRpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxhQUFhO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUgsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRSxTQUFTO1FBQ0w7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUSxRQUFRO1FBQ0o7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFFBQVE7UUFDSjtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQTBCO0lBQ3pDQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3Mvc3VtbWFyaXphdGlvbi9kYXRhLmpzPzNjYzUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgY2Fub25pY2FsSWQ6IFwidGV4dC1nZW5lcmF0aW9uXCIsXG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTmV3cyBhcnRpY2xlcyBpbiBmaXZlIGRpZmZlcmVudCBsYW5ndWFnZXMgYWxvbmcgd2l0aCB0aGVpciBzdW1tYXJpZXMuIFdpZGVseSB1c2VkIGZvciBiZW5jaG1hcmtpbmcgbXVsdGlsaW5ndWFsIHN1bW1hcml6YXRpb24gbW9kZWxzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWxzdW1cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRW5nbGlzaCBjb252ZXJzYXRpb25zIGFuZCB0aGVpciBzdW1tYXJpZXMuIFVzZWZ1bCBmb3IgYmVuY2htYXJraW5nIGNvbnZlcnNhdGlvbmFsIGFnZW50cy5cIixcbiAgICAgICAgICAgIGlkOiBcInNhbXN1bVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiVGhlIHRvd2VyIGlzIDMyNCBtZXRyZXMgKDEsMDYzIGZ0KSB0YWxsLCBhYm91dCB0aGUgc2FtZSBoZWlnaHQgYXMgYW4gODEtc3RvcmV5IGJ1aWxkaW5nLCBhbmQgdGhlIHRhbGxlc3Qgc3RydWN0dXJlIGluIFBhcmlzLiBJdHMgYmFzZSBpcyBzcXVhcmUsIG1lYXN1cmluZyAxMjUgbWV0cmVzICg0MTAgZnQpIG9uIGVhY2ggc2lkZS4gSXQgd2FzIHRoZSBmaXJzdCBzdHJ1Y3R1cmUgdG8gcmVhY2ggYSBoZWlnaHQgb2YgMzAwIG1ldHJlcy4gRXhjbHVkaW5nIHRyYW5zbWl0dGVycywgdGhlIEVpZmZlbCBUb3dlciBpcyB0aGUgc2Vjb25kIHRhbGxlc3QgZnJlZS1zdGFuZGluZyBzdHJ1Y3R1cmUgaW4gRnJhbmNlIGFmdGVyIHRoZSBNaWxsYXUgVmlhZHVjdC5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJPdXRwdXRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlRoZSB0b3dlciBpcyAzMjQgbWV0cmVzICgxLDA2MyBmdCkgdGFsbCwgYWJvdXQgdGhlIHNhbWUgaGVpZ2h0IGFzIGFuIDgxLXN0b3JleSBidWlsZGluZy4gSXQgd2FzIHRoZSBmaXJzdCBzdHJ1Y3R1cmUgdG8gcmVhY2ggYSBoZWlnaHQgb2YgMzAwIG1ldHJlcy5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBnZW5lcmF0ZWQgc2VxdWVuY2UgaXMgY29tcGFyZWQgYWdhaW5zdCBpdHMgc3VtbWFyeSwgYW5kIHRoZSBvdmVybGFwIG9mIHRva2VucyBhcmUgY291bnRlZC4gUk9VR0UtTiByZWZlcnMgdG8gb3ZlcmxhcCBvZiBOIHN1YnNlcXVlbnQgdG9rZW5zLCBST1VHRS0xIHJlZmVycyB0byBvdmVybGFwIG9mIHNpbmdsZSB0b2tlbnMgYW5kIFJPVUdFLTIgaXMgdGhlIG92ZXJsYXAgb2YgdHdvIHN1YnNlcXVlbnQgdG9rZW5zLlwiLFxuICAgICAgICAgICAgaWQ6IFwicm91Z2VcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHN0cm9uZyBzdW1tYXJpemF0aW9uIG1vZGVsIHRyYWluZWQgb24gRW5nbGlzaCBuZXdzIGFydGljbGVzLiBFeGNlbHMgYXQgZ2VuZXJhdGluZyBmYWN0dWFsIHN1bW1hcmllcy5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL2JhcnQtbGFyZ2UtY25uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3VtbWFyaXphdGlvbiBtb2RlbCB0cmFpbmVkIG9uIG1lZGljYWwgYXJ0aWNsZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJGYWxjb25zYWkvbWVkaWNhbF9zdW1tYXJpemF0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBjYW4gc3VtbWFyaXplIGxvbmcgcGFyYWdyYXBocy5cIixcbiAgICAgICAgICAgIGlkOiBcInBzemVtcmFqL3N1bW1hcml6ZS1sb25nLXRleHRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBtdWNoIG5lZWRlZCBzdW1tYXJpemF0aW9uIGFwcGxpY2F0aW9uIGZvciB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cIixcbiAgICAgICAgICAgIGlkOiBcIm1sNnRlYW0vZGlzdGlsYmFydC10b3Mtc3VtbWFyaXplci10b3NkclwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IHN1bW1hcml6ZXMgbG9uZyBkb2N1bWVudHMuXCIsXG4gICAgICAgICAgICBpZDogXCJwc3plbXJhai9kb2N1bWVudC1zdW1tYXJpemF0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGRldGVjdCBlcnJvcnMgaW4gYWJzdHJhY3RpdmUgc3VtbWFyaXphdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIm1sNnRlYW0vcG9zdC1wcm9jZXNzaW5nLXN1bW1hcml6YXRpb25cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiU3VtbWFyaXphdGlvbiBpcyB0aGUgdGFzayBvZiBwcm9kdWNpbmcgYSBzaG9ydGVyIHZlcnNpb24gb2YgYSBkb2N1bWVudCB3aGlsZSBwcmVzZXJ2aW5nIGl0cyBpbXBvcnRhbnQgaW5mb3JtYXRpb24uIFNvbWUgbW9kZWxzIGNhbiBleHRyYWN0IHRleHQgZnJvbSB0aGUgb3JpZ2luYWwgaW5wdXQsIHdoaWxlIG90aGVyIG1vZGVscyBjYW4gZ2VuZXJhdGUgZW50aXJlbHkgbmV3IHRleHQuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJmYWNlYm9vay9iYXJ0LWxhcmdlLWNublwiXSxcbiAgICB5b3V0dWJlSWQ6IFwieUhucjVEazJ6Q0lcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImNhbm9uaWNhbElkIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJvdXRwdXRzIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/summarization/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/table-question-answering/data.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/table-question-answering/data.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"The WikiTableQuestions dataset is a large-scale dataset for the task of question answering on semi-structured tables.\",\n            id: \"wikitablequestions\"\n        },\n        {\n            description: \"WikiSQL is a dataset of 80654 hand-annotated examples of questions and SQL queries distributed across 24241 tables from Wikipedia.\",\n            id: \"wikisql\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\n                        \"Rank\",\n                        \"Name\",\n                        \"No.of reigns\",\n                        \"Combined days\"\n                    ],\n                    [\n                        \"1\",\n                        \"lou Thesz\",\n                        \"3\",\n                        \"3749\"\n                    ],\n                    [\n                        \"2\",\n                        \"Ric Flair\",\n                        \"8\",\n                        \"3103\"\n                    ],\n                    [\n                        \"3\",\n                        \"Harley Race\",\n                        \"7\",\n                        \"1799\"\n                    ]\n                ],\n                type: \"tabular\"\n            },\n            {\n                label: \"Question\",\n                content: \"What is the number of reigns for Harley Race?\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Result\",\n                content: \"7\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Checks whether the predicted answer(s) is the same as the ground-truth answer(s).\",\n            id: \"Denotation Accuracy\"\n        }\n    ],\n    models: [\n        {\n            description: \"A table question answering model that is capable of neural SQL execution, i.e., employ TAPEX to execute a SQL query on a given table.\",\n            id: \"microsoft/tapex-base\"\n        },\n        {\n            description: \"A robust table question answering model.\",\n            id: \"google/tapas-base-finetuned-wtq\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that answers questions based on table CSV files.\",\n            id: \"katanaml/table-query\"\n        }\n    ],\n    summary: \"Table Question Answering (Table QA) is the answering a question about an information on a given table.\",\n    widgetModels: [\n        \"google/tapas-base-finetuned-wtq\"\n    ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RhYmxlLXF1ZXN0aW9uLWFuc3dlcmluZy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87b0JBQ0g7d0JBQUM7d0JBQVE7d0JBQVE7d0JBQWdCO3FCQUFnQjtvQkFDakQ7d0JBQUM7d0JBQUs7d0JBQWE7d0JBQUs7cUJBQU87b0JBQy9CO3dCQUFDO3dCQUFLO3dCQUFhO3dCQUFLO3FCQUFPO29CQUMvQjt3QkFBQzt3QkFBSzt3QkFBZTt3QkFBSztxQkFBTztpQkFDcEM7Z0JBQ0RDLE1BQU07WUFDVjtZQUNBO2dCQUFFQyxPQUFPO2dCQUFZQyxTQUFTO2dCQUFpREYsTUFBTTtZQUFPO1NBQy9GO1FBQ0RHLFNBQVM7WUFBQztnQkFBRUYsT0FBTztnQkFBVUMsU0FBUztnQkFBS0YsTUFBTTtZQUFPO1NBQUU7SUFDOUQ7SUFDQUksU0FBUztRQUNMO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUFrQztBQUNyRDtBQUNBLGlFQUFlZixRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RhYmxlLXF1ZXN0aW9uLWFuc3dlcmluZy9kYXRhLmpzP2YxNTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIFdpa2lUYWJsZVF1ZXN0aW9ucyBkYXRhc2V0IGlzIGEgbGFyZ2Utc2NhbGUgZGF0YXNldCBmb3IgdGhlIHRhc2sgb2YgcXVlc3Rpb24gYW5zd2VyaW5nIG9uIHNlbWktc3RydWN0dXJlZCB0YWJsZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJ3aWtpdGFibGVxdWVzdGlvbnNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiV2lraVNRTCBpcyBhIGRhdGFzZXQgb2YgODA2NTQgaGFuZC1hbm5vdGF0ZWQgZXhhbXBsZXMgb2YgcXVlc3Rpb25zIGFuZCBTUUwgcXVlcmllcyBkaXN0cmlidXRlZCBhY3Jvc3MgMjQyNDEgdGFibGVzIGZyb20gV2lraXBlZGlhLlwiLFxuICAgICAgICAgICAgaWQ6IFwid2lraXNxbFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWJsZTogW1xuICAgICAgICAgICAgICAgICAgICBbXCJSYW5rXCIsIFwiTmFtZVwiLCBcIk5vLm9mIHJlaWduc1wiLCBcIkNvbWJpbmVkIGRheXNcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcIjFcIiwgXCJsb3UgVGhlc3pcIiwgXCIzXCIsIFwiMzc0OVwiXSxcbiAgICAgICAgICAgICAgICAgICAgW1wiMlwiLCBcIlJpYyBGbGFpclwiLCBcIjhcIiwgXCIzMTAzXCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCIzXCIsIFwiSGFybGV5IFJhY2VcIiwgXCI3XCIsIFwiMTc5OVwiXSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGFidWxhclwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbGFiZWw6IFwiUXVlc3Rpb25cIiwgY29udGVudDogXCJXaGF0IGlzIHRoZSBudW1iZXIgb2YgcmVpZ25zIGZvciBIYXJsZXkgUmFjZT9cIiwgdHlwZTogXCJ0ZXh0XCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW3sgbGFiZWw6IFwiUmVzdWx0XCIsIGNvbnRlbnQ6IFwiN1wiLCB0eXBlOiBcInRleHRcIiB9XSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ2hlY2tzIHdoZXRoZXIgdGhlIHByZWRpY3RlZCBhbnN3ZXIocykgaXMgdGhlIHNhbWUgYXMgdGhlIGdyb3VuZC10cnV0aCBhbnN3ZXIocykuXCIsXG4gICAgICAgICAgICBpZDogXCJEZW5vdGF0aW9uIEFjY3VyYWN5XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSB0YWJsZSBxdWVzdGlvbiBhbnN3ZXJpbmcgbW9kZWwgdGhhdCBpcyBjYXBhYmxlIG9mIG5ldXJhbCBTUUwgZXhlY3V0aW9uLCBpLmUuLCBlbXBsb3kgVEFQRVggdG8gZXhlY3V0ZSBhIFNRTCBxdWVyeSBvbiBhIGdpdmVuIHRhYmxlLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWljcm9zb2Z0L3RhcGV4LWJhc2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgdGFibGUgcXVlc3Rpb24gYW5zd2VyaW5nIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlL3RhcGFzLWJhc2UtZmluZXR1bmVkLXd0cVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgYW5zd2VycyBxdWVzdGlvbnMgYmFzZWQgb24gdGFibGUgQ1NWIGZpbGVzLlwiLFxuICAgICAgICAgICAgaWQ6IFwia2F0YW5hbWwvdGFibGUtcXVlcnlcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVGFibGUgUXVlc3Rpb24gQW5zd2VyaW5nIChUYWJsZSBRQSkgaXMgdGhlIGFuc3dlcmluZyBhIHF1ZXN0aW9uIGFib3V0IGFuIGluZm9ybWF0aW9uIG9uIGEgZ2l2ZW4gdGFibGUuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJnb29nbGUvdGFwYXMtYmFzZS1maW5ldHVuZWQtd3RxXCJdLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsInRhYmxlIiwidHlwZSIsImxhYmVsIiwiY29udGVudCIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/table-question-answering/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-classification/data.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-classification/data.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A comprehensive curation of datasets covering all benchmarks.\",\n            id: \"inria-soda/tabular-benchmark\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\n                        \"Glucose\",\n                        \"Blood Pressure \",\n                        \"Skin Thickness\",\n                        \"Insulin\",\n                        \"BMI\"\n                    ],\n                    [\n                        \"148\",\n                        \"72\",\n                        \"35\",\n                        \"0\",\n                        \"33.6\"\n                    ],\n                    [\n                        \"150\",\n                        \"50\",\n                        \"30\",\n                        \"0\",\n                        \"35.1\"\n                    ],\n                    [\n                        \"141\",\n                        \"60\",\n                        \"29\",\n                        \"1\",\n                        \"39.2\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ],\n        outputs: [\n            {\n                table: [\n                    [\n                        \"Diabetes\"\n                    ],\n                    [\n                        \"1\"\n                    ],\n                    [\n                        \"1\"\n                    ],\n                    [\n                        \"0\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"Breast cancer prediction model based on decision trees.\",\n            id: \"scikit-learn/cancer-prediction-trees\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can predict defective products on a production line.\",\n            id: \"scikit-learn/tabular-playground\"\n        },\n        {\n            description: \"An application that compares various tabular classification techniques on different datasets.\",\n            id: \"scikit-learn/classification\"\n        }\n    ],\n    summary: \"Tabular classification is the task of classifying a target category (a group) based on set of attributes.\",\n    widgetModels: [\n        \"scikit-learn/tabular-playground\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RhYnVsYXItY2xhc3NpZmljYXRpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztvQkFDSDt3QkFBQzt3QkFBVzt3QkFBbUI7d0JBQWtCO3dCQUFXO3FCQUFNO29CQUNsRTt3QkFBQzt3QkFBTzt3QkFBTTt3QkFBTTt3QkFBSztxQkFBTztvQkFDaEM7d0JBQUM7d0JBQU87d0JBQU07d0JBQU07d0JBQUs7cUJBQU87b0JBQ2hDO3dCQUFDO3dCQUFPO3dCQUFNO3dCQUFNO3dCQUFLO3FCQUFPO2lCQUNuQztnQkFDREMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJRixPQUFPO29CQUFDO3dCQUFDO3FCQUFXO29CQUFFO3dCQUFDO3FCQUFJO29CQUFFO3dCQUFDO3FCQUFJO29CQUFFO3dCQUFDO3FCQUFJO2lCQUFDO2dCQUMxQ0MsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRSxTQUFTO1FBQ0w7WUFDSVAsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNETyxRQUFRO1FBQ0o7WUFDSVIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUSxRQUFRO1FBQ0o7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQWtDO0lBQ2pEQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy90YWJ1bGFyLWNsYXNzaWZpY2F0aW9uL2RhdGEuanM/MDQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGNvbXByZWhlbnNpdmUgY3VyYXRpb24gb2YgZGF0YXNldHMgY292ZXJpbmcgYWxsIGJlbmNobWFya3MuXCIsXG4gICAgICAgICAgICBpZDogXCJpbnJpYS1zb2RhL3RhYnVsYXItYmVuY2htYXJrXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRhYmxlOiBbXG4gICAgICAgICAgICAgICAgICAgIFtcIkdsdWNvc2VcIiwgXCJCbG9vZCBQcmVzc3VyZSBcIiwgXCJTa2luIFRoaWNrbmVzc1wiLCBcIkluc3VsaW5cIiwgXCJCTUlcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcIjE0OFwiLCBcIjcyXCIsIFwiMzVcIiwgXCIwXCIsIFwiMzMuNlwiXSxcbiAgICAgICAgICAgICAgICAgICAgW1wiMTUwXCIsIFwiNTBcIiwgXCIzMFwiLCBcIjBcIiwgXCIzNS4xXCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCIxNDFcIiwgXCI2MFwiLCBcIjI5XCIsIFwiMVwiLCBcIjM5LjJcIl0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRhYnVsYXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWJsZTogW1tcIkRpYWJldGVzXCJdLCBbXCIxXCJdLCBbXCIxXCJdLCBbXCIwXCJdXSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRhYnVsYXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwiYWNjdXJhY3lcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJyZWNhbGxcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJwcmVjaXNpb25cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJmMVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkJyZWFzdCBjYW5jZXIgcHJlZGljdGlvbiBtb2RlbCBiYXNlZCBvbiBkZWNpc2lvbiB0cmVlcy5cIixcbiAgICAgICAgICAgIGlkOiBcInNjaWtpdC1sZWFybi9jYW5jZXItcHJlZGljdGlvbi10cmVlc1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIHByZWRpY3QgZGVmZWN0aXZlIHByb2R1Y3RzIG9uIGEgcHJvZHVjdGlvbiBsaW5lLlwiLFxuICAgICAgICAgICAgaWQ6IFwic2Npa2l0LWxlYXJuL3RhYnVsYXItcGxheWdyb3VuZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNvbXBhcmVzIHZhcmlvdXMgdGFidWxhciBjbGFzc2lmaWNhdGlvbiB0ZWNobmlxdWVzIG9uIGRpZmZlcmVudCBkYXRhc2V0cy5cIixcbiAgICAgICAgICAgIGlkOiBcInNjaWtpdC1sZWFybi9jbGFzc2lmaWNhdGlvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUYWJ1bGFyIGNsYXNzaWZpY2F0aW9uIGlzIHRoZSB0YXNrIG9mIGNsYXNzaWZ5aW5nIGEgdGFyZ2V0IGNhdGVnb3J5IChhIGdyb3VwKSBiYXNlZCBvbiBzZXQgb2YgYXR0cmlidXRlcy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcInNjaWtpdC1sZWFybi90YWJ1bGFyLXBsYXlncm91bmRcIl0sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsInRhYmxlIiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-regression/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-regression/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A comprehensive curation of datasets covering all benchmarks.\",\n            id: \"inria-soda/tabular-benchmark\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\n                        \"Car Name\",\n                        \"Horsepower\",\n                        \"Weight\"\n                    ],\n                    [\n                        \"ford torino\",\n                        \"140\",\n                        \"3,449\"\n                    ],\n                    [\n                        \"amc hornet\",\n                        \"97\",\n                        \"2,774\"\n                    ],\n                    [\n                        \"toyota corolla\",\n                        \"65\",\n                        \"1,773\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ],\n        outputs: [\n            {\n                table: [\n                    [\n                        \"MPG (miles per gallon)\"\n                    ],\n                    [\n                        \"17\"\n                    ],\n                    [\n                        \"18\"\n                    ],\n                    [\n                        \"31\"\n                    ]\n                ],\n                type: \"tabular\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"mse\"\n        },\n        {\n            description: \"Coefficient of determination (or R-squared) is a measure of how well the model fits the data. Higher R-squared is considered a better fit.\",\n            id: \"r-squared\"\n        }\n    ],\n    models: [\n        {\n            description: \"Fish weight prediction based on length measurements and species.\",\n            id: \"scikit-learn/Fish-Weight\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can predict weight of a fish based on set of attributes.\",\n            id: \"scikit-learn/fish-weight-prediction\"\n        }\n    ],\n    summary: \"Tabular regression is the task of predicting a numerical value given a set of attributes.\",\n    widgetModels: [\n        \"scikit-learn/Fish-Weight\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RhYnVsYXItcmVncmVzc2lvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO29CQUNIO3dCQUFDO3dCQUFZO3dCQUFjO3FCQUFTO29CQUNwQzt3QkFBQzt3QkFBZTt3QkFBTztxQkFBUTtvQkFDL0I7d0JBQUM7d0JBQWM7d0JBQU07cUJBQVE7b0JBQzdCO3dCQUFDO3dCQUFrQjt3QkFBTTtxQkFBUTtpQkFDcEM7Z0JBQ0RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUYsT0FBTztvQkFBQzt3QkFBQztxQkFBeUI7b0JBQUU7d0JBQUM7cUJBQUs7b0JBQUU7d0JBQUM7cUJBQUs7b0JBQUU7d0JBQUM7cUJBQUs7aUJBQUM7Z0JBQzNEQyxNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FFLFNBQVM7UUFDTDtZQUNJUCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRE8sUUFBUTtRQUNKO1lBQ0lSLGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFEsUUFBUTtRQUNKO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBMkI7SUFDMUNDLFdBQVc7QUFDZjtBQUNBLGlFQUFlZCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RhYnVsYXItcmVncmVzc2lvbi9kYXRhLmpzPzVkNGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBjb21wcmVoZW5zaXZlIGN1cmF0aW9uIG9mIGRhdGFzZXRzIGNvdmVyaW5nIGFsbCBiZW5jaG1hcmtzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW5yaWEtc29kYS90YWJ1bGFyLWJlbmNobWFya1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWJsZTogW1xuICAgICAgICAgICAgICAgICAgICBbXCJDYXIgTmFtZVwiLCBcIkhvcnNlcG93ZXJcIiwgXCJXZWlnaHRcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcImZvcmQgdG9yaW5vXCIsIFwiMTQwXCIsIFwiMyw0NDlcIl0sXG4gICAgICAgICAgICAgICAgICAgIFtcImFtYyBob3JuZXRcIiwgXCI5N1wiLCBcIjIsNzc0XCJdLFxuICAgICAgICAgICAgICAgICAgICBbXCJ0b3lvdGEgY29yb2xsYVwiLCBcIjY1XCIsIFwiMSw3NzNcIl0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRhYnVsYXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YWJsZTogW1tcIk1QRyAobWlsZXMgcGVyIGdhbGxvbilcIl0sIFtcIjE3XCJdLCBbXCIxOFwiXSwgW1wiMzFcIl1dLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGFidWxhclwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJtc2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29lZmZpY2llbnQgb2YgZGV0ZXJtaW5hdGlvbiAob3IgUi1zcXVhcmVkKSBpcyBhIG1lYXN1cmUgb2YgaG93IHdlbGwgdGhlIG1vZGVsIGZpdHMgdGhlIGRhdGEuIEhpZ2hlciBSLXNxdWFyZWQgaXMgY29uc2lkZXJlZCBhIGJldHRlciBmaXQuXCIsXG4gICAgICAgICAgICBpZDogXCJyLXNxdWFyZWRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGaXNoIHdlaWdodCBwcmVkaWN0aW9uIGJhc2VkIG9uIGxlbmd0aCBtZWFzdXJlbWVudHMgYW5kIHNwZWNpZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJzY2lraXQtbGVhcm4vRmlzaC1XZWlnaHRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiBwcmVkaWN0IHdlaWdodCBvZiBhIGZpc2ggYmFzZWQgb24gc2V0IG9mIGF0dHJpYnV0ZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJzY2lraXQtbGVhcm4vZmlzaC13ZWlnaHQtcHJlZGljdGlvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUYWJ1bGFyIHJlZ3Jlc3Npb24gaXMgdGhlIHRhc2sgb2YgcHJlZGljdGluZyBhIG51bWVyaWNhbCB2YWx1ZSBnaXZlbiBhIHNldCBvZiBhdHRyaWJ1dGVzLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wic2Npa2l0LWxlYXJuL0Zpc2gtV2VpZ2h0XCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJ0YWJsZSIsInR5cGUiLCJvdXRwdXRzIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/tabular-regression/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-classification/data.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-classification/data.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset used to benchmark multiple variants of text classification.\",\n            id: \"nyu-mll/glue\"\n        },\n        {\n            description: \"A text classification dataset used to benchmark natural language inference models\",\n            id: \"stanfordnlp/snli\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"I love Hugging Face!\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"POSITIVE\",\n                        score: 0.9\n                    },\n                    {\n                        label: \"NEUTRAL\",\n                        score: 0.1\n                    },\n                    {\n                        label: \"NEGATIVE\",\n                        score: 0.0\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"The F1 metric is the harmonic mean of the precision and recall. It can be calculated as: F1 = 2 * (precision * recall) / (precision + recall)\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"A robust model trained for sentiment analysis.\",\n            id: \"distilbert/distilbert-base-uncased-finetuned-sst-2-english\"\n        },\n        {\n            description: \"A sentiment analysis model specialized in financial sentiment.\",\n            id: \"ProsusAI/finbert\"\n        },\n        {\n            description: \"A sentiment analysis model specialized in analyzing tweets.\",\n            id: \"cardiffnlp/twitter-roberta-base-sentiment-latest\"\n        },\n        {\n            description: \"A model that can classify languages.\",\n            id: \"papluca/xlm-roberta-base-language-detection\"\n        },\n        {\n            description: \"A model that can classify text generation attacks.\",\n            id: \"meta-llama/Prompt-Guard-86M\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can classify financial sentiment.\",\n            id: \"IoannisTr/Tech_Stocks_Trading_Assistant\"\n        },\n        {\n            description: \"A dashboard that contains various text classification tasks.\",\n            id: \"miesnerjacob/Multi-task-NLP\"\n        },\n        {\n            description: \"An application that analyzes user reviews in healthcare.\",\n            id: \"spacy/healthsea-demo\"\n        }\n    ],\n    summary: \"Text Classification is the task of assigning a label or class to a given text. Some use cases are sentiment analysis, natural language inference, and assessing grammatical correctness.\",\n    widgetModels: [\n        \"distilbert/distilbert-base-uncased-finetuned-sst-2-english\"\n    ],\n    youtubeId: \"leNG9fN9FQU\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtY2xhc3NpZmljYXRpb24vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lELE1BQU07Z0JBQ05FLE1BQU07b0JBQ0Y7d0JBQ0lKLE9BQU87d0JBQ1BLLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lMLE9BQU87d0JBQ1BLLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lMLE9BQU87d0JBQ1BLLE9BQU87b0JBQ1g7aUJBQ0g7WUFDTDtTQUNIO0lBQ0w7SUFDQUMsU0FBUztRQUNMO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsUUFBUTtRQUNKO1lBQ0lYLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxRQUFRO1FBQ0o7WUFDSVosYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFksU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBNkQ7SUFDNUVDLFdBQVc7QUFDZjtBQUNBLGlFQUFlakIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy90ZXh0LWNsYXNzaWZpY2F0aW9uL2RhdGEuanM/YmU0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHdpZGVseSB1c2VkIGRhdGFzZXQgdXNlZCB0byBiZW5jaG1hcmsgbXVsdGlwbGUgdmFyaWFudHMgb2YgdGV4dCBjbGFzc2lmaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIm55dS1tbGwvZ2x1ZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHRleHQgY2xhc3NpZmljYXRpb24gZGF0YXNldCB1c2VkIHRvIGJlbmNobWFyayBuYXR1cmFsIGxhbmd1YWdlIGluZmVyZW5jZSBtb2RlbHNcIixcbiAgICAgICAgICAgIGlkOiBcInN0YW5mb3JkbmxwL3NubGlcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiSW5wdXRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkkgbG92ZSBIdWdnaW5nIEZhY2UhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjaGFydFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUE9TSVRJVkVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIk5FVVRSQUxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIk5FR0FUSVZFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4wLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcImFjY3VyYWN5XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwicmVjYWxsXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwicHJlY2lzaW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBGMSBtZXRyaWMgaXMgdGhlIGhhcm1vbmljIG1lYW4gb2YgdGhlIHByZWNpc2lvbiBhbmQgcmVjYWxsLiBJdCBjYW4gYmUgY2FsY3VsYXRlZCBhczogRjEgPSAyICogKHByZWNpc2lvbiAqIHJlY2FsbCkgLyAocHJlY2lzaW9uICsgcmVjYWxsKVwiLFxuICAgICAgICAgICAgaWQ6IFwiZjFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCBtb2RlbCB0cmFpbmVkIGZvciBzZW50aW1lbnQgYW5hbHlzaXMuXCIsXG4gICAgICAgICAgICBpZDogXCJkaXN0aWxiZXJ0L2Rpc3RpbGJlcnQtYmFzZS11bmNhc2VkLWZpbmV0dW5lZC1zc3QtMi1lbmdsaXNoXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc2VudGltZW50IGFuYWx5c2lzIG1vZGVsIHNwZWNpYWxpemVkIGluIGZpbmFuY2lhbCBzZW50aW1lbnQuXCIsXG4gICAgICAgICAgICBpZDogXCJQcm9zdXNBSS9maW5iZXJ0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc2VudGltZW50IGFuYWx5c2lzIG1vZGVsIHNwZWNpYWxpemVkIGluIGFuYWx5emluZyB0d2VldHMuXCIsXG4gICAgICAgICAgICBpZDogXCJjYXJkaWZmbmxwL3R3aXR0ZXItcm9iZXJ0YS1iYXNlLXNlbnRpbWVudC1sYXRlc3RcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBtb2RlbCB0aGF0IGNhbiBjbGFzc2lmeSBsYW5ndWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJwYXBsdWNhL3hsbS1yb2JlcnRhLWJhc2UtbGFuZ3VhZ2UtZGV0ZWN0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbW9kZWwgdGhhdCBjYW4gY2xhc3NpZnkgdGV4dCBnZW5lcmF0aW9uIGF0dGFja3MuXCIsXG4gICAgICAgICAgICBpZDogXCJtZXRhLWxsYW1hL1Byb21wdC1HdWFyZC04Nk1cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiBjbGFzc2lmeSBmaW5hbmNpYWwgc2VudGltZW50LlwiLFxuICAgICAgICAgICAgaWQ6IFwiSW9hbm5pc1RyL1RlY2hfU3RvY2tzX1RyYWRpbmdfQXNzaXN0YW50XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZGFzaGJvYXJkIHRoYXQgY29udGFpbnMgdmFyaW91cyB0ZXh0IGNsYXNzaWZpY2F0aW9uIHRhc2tzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibWllc25lcmphY29iL011bHRpLXRhc2stTkxQXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgYW5hbHl6ZXMgdXNlciByZXZpZXdzIGluIGhlYWx0aGNhcmUuXCIsXG4gICAgICAgICAgICBpZDogXCJzcGFjeS9oZWFsdGhzZWEtZGVtb1wiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUZXh0IENsYXNzaWZpY2F0aW9uIGlzIHRoZSB0YXNrIG9mIGFzc2lnbmluZyBhIGxhYmVsIG9yIGNsYXNzIHRvIGEgZ2l2ZW4gdGV4dC4gU29tZSB1c2UgY2FzZXMgYXJlIHNlbnRpbWVudCBhbmFseXNpcywgbmF0dXJhbCBsYW5ndWFnZSBpbmZlcmVuY2UsIGFuZCBhc3Nlc3NpbmcgZ3JhbW1hdGljYWwgY29ycmVjdG5lc3MuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJkaXN0aWxiZXJ0L2Rpc3RpbGJlcnQtYmFzZS11bmNhc2VkLWZpbmV0dW5lZC1zc3QtMi1lbmdsaXNoXCJdLFxuICAgIHlvdXR1YmVJZDogXCJsZU5HOWZOOUZRVVwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJvdXRwdXRzIiwiZGF0YSIsInNjb3JlIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-generation/data.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-generation/data.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Multilingual dataset used to evaluate text generation models.\",\n            id: \"CohereForAI/Global-MMLU\"\n        },\n        {\n            description: \"High quality multilingual data used to train text-generation models.\",\n            id: \"HuggingFaceFW/fineweb-2\"\n        },\n        {\n            description: \"Truly open-source, curated and cleaned dialogue dataset.\",\n            id: \"HuggingFaceH4/ultrachat_200k\"\n        },\n        {\n            description: \"A reasoning dataset.\",\n            id: \"open-r1/OpenThoughts-114k-math\"\n        },\n        {\n            description: \"A multilingual instruction dataset with preference ratings on responses.\",\n            id: \"allenai/tulu-3-sft-mixture\"\n        },\n        {\n            description: \"A large synthetic dataset for alignment of text generation models.\",\n            id: \"HuggingFaceTB/smoltalk\"\n        },\n        {\n            description: \"A dataset made for training text generation models solving math questions.\",\n            id: \"HuggingFaceTB/finemath\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"Once upon a time,\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"Once upon a time, we knew that our ancestors were on the verge of extinction. The great explorers and poets of the Old World, from Alexander the Great to Chaucer, are dead and gone. A good many of our ancient explorers and poets have\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Cross Entropy is a metric that calculates the difference between two probability distributions. Each probability distribution is the distribution of predicted words\",\n            id: \"Cross Entropy\"\n        },\n        {\n            description: \"The Perplexity metric is the exponential of the cross-entropy loss. It evaluates the probabilities assigned to the next word by the model. Lower perplexity indicates better performance\",\n            id: \"Perplexity\"\n        }\n    ],\n    models: [\n        {\n            description: \"A text-generation model trained to follow instructions.\",\n            id: \"google/gemma-2-2b-it\"\n        },\n        {\n            description: \"Powerful text generation model for coding.\",\n            id: \"Qwen/Qwen3-Coder-480B-A35B-Instruct\"\n        },\n        {\n            description: \"Great text generation model with top-notch tool calling capabilities.\",\n            id: \"openai/gpt-oss-120b\"\n        },\n        {\n            description: \"Powerful text generation model.\",\n            id: \"zai-org/GLM-4.5\"\n        },\n        {\n            description: \"A powerful small model with reasoning capabilities.\",\n            id: \"Qwen/Qwen3-4B-Thinking-2507\"\n        },\n        {\n            description: \"Strong conversational model that supports very long instructions.\",\n            id: \"Qwen/Qwen2.5-7B-Instruct-1M\"\n        },\n        {\n            description: \"Text generation model used to write code.\",\n            id: \"Qwen/Qwen2.5-Coder-32B-Instruct\"\n        },\n        {\n            description: \"Powerful reasoning based open large language model.\",\n            id: \"deepseek-ai/DeepSeek-R1\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that writes and executes code from text instructions and supports many models.\",\n            id: \"akhaliq/anycoder\"\n        },\n        {\n            description: \"An application that builds websites from natural language prompts.\",\n            id: \"enzostvs/deepsite\"\n        },\n        {\n            description: \"A leaderboard for comparing chain-of-thought performance of models.\",\n            id: \"logikon/open_cot_leaderboard\"\n        },\n        {\n            description: \"An text generation based application based on a very powerful LLaMA2 model.\",\n            id: \"ysharma/Explore_llamav2_with_TGI\"\n        },\n        {\n            description: \"An text generation based application to converse with Zephyr model.\",\n            id: \"HuggingFaceH4/zephyr-chat\"\n        },\n        {\n            description: \"A leaderboard that ranks text generation models based on blind votes from people.\",\n            id: \"lmsys/chatbot-arena-leaderboard\"\n        },\n        {\n            description: \"An chatbot to converse with a very powerful text generation model.\",\n            id: \"mlabonne/phixtral-chat\"\n        }\n    ],\n    summary: \"Generating text is the task of generating new text given another text. These models can, for example, fill in incomplete text or paraphrase.\",\n    widgetModels: [\n        \"mistralai/Mistral-Nemo-Instruct-2407\"\n    ],\n    youtubeId: \"e9gNEAlsOvU\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-generation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-ranking/data.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-ranking/data.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Bing queries with relevant passages from various web sources.\",\n            id: \"microsoft/ms_marco\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Source sentence\",\n                content: \"Machine learning is so easy.\",\n                type: \"text\"\n            },\n            {\n                label: \"Sentences to compare to\",\n                content: \"Deep learning is so straightforward.\",\n                type: \"text\"\n            },\n            {\n                label: \"\",\n                content: \"This is so difficult, like rocket science.\",\n                type: \"text\"\n            },\n            {\n                label: \"\",\n                content: \"I can't believe how much I struggled with this.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Deep learning is so straightforward.\",\n                        score: 2.2006407\n                    },\n                    {\n                        label: \"This is so difficult, like rocket science.\",\n                        score: -6.2634873\n                    },\n                    {\n                        label: \"I can't believe how much I struggled with this.\",\n                        score: -10.251488\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Discounted Cumulative Gain (DCG) measures the gain, or usefulness, of search results discounted by their position. The normalization is done by dividing the DCG by the ideal DCG, which is the DCG of the perfect ranking.\",\n            id: \"Normalized Discounted Cumulative Gain\"\n        },\n        {\n            description: \"Reciprocal Rank is a measure used to rank the relevancy of documents given a set of documents. Reciprocal Rank is the reciprocal of the rank of the document retrieved, meaning, if the rank is 3, the Reciprocal Rank is 0.33. If the rank is 1, the Reciprocal Rank is 1\",\n            id: \"Mean Reciprocal Rank\"\n        },\n        {\n            description: \"Mean Average Precision (mAP) is the overall average of the Average Precision (AP) values, where AP is the Area Under the PR Curve (AUC-PR)\",\n            id: \"Mean Average Precision\"\n        }\n    ],\n    models: [\n        {\n            description: \"An extremely efficient text ranking model trained on a web search dataset.\",\n            id: \"cross-encoder/ms-marco-MiniLM-L6-v2\"\n        },\n        {\n            description: \"A strong multilingual text reranker model.\",\n            id: \"Alibaba-NLP/gte-multilingual-reranker-base\"\n        },\n        {\n            description: \"An efficient text ranking model that punches above its weight.\",\n            id: \"Alibaba-NLP/gte-reranker-modernbert-base\"\n        }\n    ],\n    spaces: [],\n    summary: \"Text Ranking is the task of ranking a set of texts based on their relevance to a query. Text ranking models are trained on large datasets of queries and relevant documents to learn how to rank documents based on their relevance to the query. This task is particularly useful for search engines and information retrieval systems.\",\n    widgetModels: [\n        \"cross-encoder/ms-marco-MiniLM-L6-v2\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtcmFua2luZy9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUYsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lGLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtZQUNBO2dCQUNJRixPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lELE1BQU07Z0JBQ05FLE1BQU07b0JBQ0Y7d0JBQ0lKLE9BQU87d0JBQ1BLLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lMLE9BQU87d0JBQ1BLLE9BQU8sQ0FBQztvQkFDWjtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTyxDQUFDO29CQUNaO2lCQUNIO1lBQ0w7U0FDSDtJQUNMO0lBQ0FDLFNBQVM7UUFDTDtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsUUFBUSxFQUFFO0lBQ1ZDLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQXNDO0lBQ3JEQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWpCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdGV4dC1yYW5raW5nL2RhdGEuanM/ZWVlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJCaW5nIHF1ZXJpZXMgd2l0aCByZWxldmFudCBwYXNzYWdlcyBmcm9tIHZhcmlvdXMgd2ViIHNvdXJjZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJtaWNyb3NvZnQvbXNfbWFyY29cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiU291cmNlIHNlbnRlbmNlXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJNYWNoaW5lIGxlYXJuaW5nIGlzIHNvIGVhc3kuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlNlbnRlbmNlcyB0byBjb21wYXJlIHRvXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJEZWVwIGxlYXJuaW5nIGlzIHNvIHN0cmFpZ2h0Zm9yd2FyZC5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJUaGlzIGlzIHNvIGRpZmZpY3VsdCwgbGlrZSByb2NrZXQgc2NpZW5jZS5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJJIGNhbid0IGJlbGlldmUgaG93IG11Y2ggSSBzdHJ1Z2dsZWQgd2l0aCB0aGlzLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hhcnRcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkRlZXAgbGVhcm5pbmcgaXMgc28gc3RyYWlnaHRmb3J3YXJkLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDIuMjAwNjQwNyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiVGhpcyBpcyBzbyBkaWZmaWN1bHQsIGxpa2Ugcm9ja2V0IHNjaWVuY2UuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogLTYuMjYzNDg3MyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiSSBjYW4ndCBiZWxpZXZlIGhvdyBtdWNoIEkgc3RydWdnbGVkIHdpdGggdGhpcy5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAtMTAuMjUxNDg4LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEaXNjb3VudGVkIEN1bXVsYXRpdmUgR2FpbiAoRENHKSBtZWFzdXJlcyB0aGUgZ2Fpbiwgb3IgdXNlZnVsbmVzcywgb2Ygc2VhcmNoIHJlc3VsdHMgZGlzY291bnRlZCBieSB0aGVpciBwb3NpdGlvbi4gVGhlIG5vcm1hbGl6YXRpb24gaXMgZG9uZSBieSBkaXZpZGluZyB0aGUgRENHIGJ5IHRoZSBpZGVhbCBEQ0csIHdoaWNoIGlzIHRoZSBEQ0cgb2YgdGhlIHBlcmZlY3QgcmFua2luZy5cIixcbiAgICAgICAgICAgIGlkOiBcIk5vcm1hbGl6ZWQgRGlzY291bnRlZCBDdW11bGF0aXZlIEdhaW5cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUmVjaXByb2NhbCBSYW5rIGlzIGEgbWVhc3VyZSB1c2VkIHRvIHJhbmsgdGhlIHJlbGV2YW5jeSBvZiBkb2N1bWVudHMgZ2l2ZW4gYSBzZXQgb2YgZG9jdW1lbnRzLiBSZWNpcHJvY2FsIFJhbmsgaXMgdGhlIHJlY2lwcm9jYWwgb2YgdGhlIHJhbmsgb2YgdGhlIGRvY3VtZW50IHJldHJpZXZlZCwgbWVhbmluZywgaWYgdGhlIHJhbmsgaXMgMywgdGhlIFJlY2lwcm9jYWwgUmFuayBpcyAwLjMzLiBJZiB0aGUgcmFuayBpcyAxLCB0aGUgUmVjaXByb2NhbCBSYW5rIGlzIDFcIixcbiAgICAgICAgICAgIGlkOiBcIk1lYW4gUmVjaXByb2NhbCBSYW5rXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1lYW4gQXZlcmFnZSBQcmVjaXNpb24gKG1BUCkgaXMgdGhlIG92ZXJhbGwgYXZlcmFnZSBvZiB0aGUgQXZlcmFnZSBQcmVjaXNpb24gKEFQKSB2YWx1ZXMsIHdoZXJlIEFQIGlzIHRoZSBBcmVhIFVuZGVyIHRoZSBQUiBDdXJ2ZSAoQVVDLVBSKVwiLFxuICAgICAgICAgICAgaWQ6IFwiTWVhbiBBdmVyYWdlIFByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGV4dHJlbWVseSBlZmZpY2llbnQgdGV4dCByYW5raW5nIG1vZGVsIHRyYWluZWQgb24gYSB3ZWIgc2VhcmNoIGRhdGFzZXQuXCIsXG4gICAgICAgICAgICBpZDogXCJjcm9zcy1lbmNvZGVyL21zLW1hcmNvLU1pbmlMTS1MNi12MlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHN0cm9uZyBtdWx0aWxpbmd1YWwgdGV4dCByZXJhbmtlciBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIkFsaWJhYmEtTkxQL2d0ZS1tdWx0aWxpbmd1YWwtcmVyYW5rZXItYmFzZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBlZmZpY2llbnQgdGV4dCByYW5raW5nIG1vZGVsIHRoYXQgcHVuY2hlcyBhYm92ZSBpdHMgd2VpZ2h0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiQWxpYmFiYS1OTFAvZ3RlLXJlcmFua2VyLW1vZGVybmJlcnQtYmFzZVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXSxcbiAgICBzdW1tYXJ5OiBcIlRleHQgUmFua2luZyBpcyB0aGUgdGFzayBvZiByYW5raW5nIGEgc2V0IG9mIHRleHRzIGJhc2VkIG9uIHRoZWlyIHJlbGV2YW5jZSB0byBhIHF1ZXJ5LiBUZXh0IHJhbmtpbmcgbW9kZWxzIGFyZSB0cmFpbmVkIG9uIGxhcmdlIGRhdGFzZXRzIG9mIHF1ZXJpZXMgYW5kIHJlbGV2YW50IGRvY3VtZW50cyB0byBsZWFybiBob3cgdG8gcmFuayBkb2N1bWVudHMgYmFzZWQgb24gdGhlaXIgcmVsZXZhbmNlIHRvIHRoZSBxdWVyeS4gVGhpcyB0YXNrIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNlYXJjaCBlbmdpbmVzIGFuZCBpbmZvcm1hdGlvbiByZXRyaWV2YWwgc3lzdGVtcy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcImNyb3NzLWVuY29kZXIvbXMtbWFyY28tTWluaUxNLUw2LXYyXCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsImRhdGEiLCJzY29yZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-ranking/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-3d/data.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-3d/data.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A large dataset of over 10 million 3D objects.\",\n            id: \"allenai/objaverse-xl\"\n        },\n        {\n            description: \"Descriptive captions for 3D objects in Objaverse.\",\n            id: \"tiange/Cap3D\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Prompt\",\n                content: \"a cat statue\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Result\",\n                content: \"text-to-3d-3d-output-filename.glb\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Text-to-3D mesh model by OpenAI\",\n            id: \"openai/shap-e\"\n        },\n        {\n            description: \"Generative 3D gaussian splatting model.\",\n            id: \"ashawkey/LGM\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"Text-to-3D demo with mesh outputs.\",\n            id: \"hysts/Shap-E\"\n        },\n        {\n            description: \"Text/image-to-3D demo with splat outputs.\",\n            id: \"ashawkey/LGM\"\n        }\n    ],\n    summary: \"Text-to-3D models take in text input and produce 3D output.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtdG8tM2QvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lILE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUyxFQUFFO0lBQ1hDLFFBQVE7UUFDSjtZQUNJVCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxTQUFTO0lBQ1RDLGNBQWMsRUFBRTtJQUNoQkMsV0FBVztBQUNmO0FBQ0EsaUVBQWVmLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdGV4dC10by0zZC9kYXRhLmpzPzQ2MDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBsYXJnZSBkYXRhc2V0IG9mIG92ZXIgMTAgbWlsbGlvbiAzRCBvYmplY3RzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYWxsZW5haS9vYmphdmVyc2UteGxcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRGVzY3JpcHRpdmUgY2FwdGlvbnMgZm9yIDNEIG9iamVjdHMgaW4gT2JqYXZlcnNlLlwiLFxuICAgICAgICAgICAgaWQ6IFwidGlhbmdlL0NhcDNEXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIlByb21wdFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiYSBjYXQgc3RhdHVlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJ0ZXh0LXRvLTNkLTNkLW91dHB1dC1maWxlbmFtZS5nbGJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGV4dC10by0zRCBtZXNoIG1vZGVsIGJ5IE9wZW5BSVwiLFxuICAgICAgICAgICAgaWQ6IFwib3BlbmFpL3NoYXAtZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHZW5lcmF0aXZlIDNEIGdhdXNzaWFuIHNwbGF0dGluZyBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcImFzaGF3a2V5L0xHTVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRleHQtdG8tM0QgZGVtbyB3aXRoIG1lc2ggb3V0cHV0cy5cIixcbiAgICAgICAgICAgIGlkOiBcImh5c3RzL1NoYXAtRVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUZXh0L2ltYWdlLXRvLTNEIGRlbW8gd2l0aCBzcGxhdCBvdXRwdXRzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYXNoYXdrZXkvTEdNXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlRleHQtdG8tM0QgbW9kZWxzIHRha2UgaW4gdGV4dCBpbnB1dCBhbmQgcHJvZHVjZSAzRCBvdXRwdXQuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXSxcbiAgICB5b3V0dWJlSWQ6IFwiXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwibGFiZWwiLCJjb250ZW50IiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-3d/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-image/data.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-image/data.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"RedCaps is a large-scale dataset of 12M image-text pairs collected from Reddit.\",\n            id: \"red_caps\"\n        },\n        {\n            description: \"Conceptual Captions is a dataset consisting of ~3.3M images annotated with captions.\",\n            id: \"conceptual_captions\"\n        },\n        {\n            description: \"12M image-caption pairs.\",\n            id: \"Spawning/PD12M\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"A city above clouds, pastel colors, Victorian style\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"image.jpeg\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The Inception Score (IS) measure assesses diversity and meaningfulness. It uses a generated image sample to predict its label. A higher score signifies more diverse and meaningful images.\",\n            id: \"IS\"\n        },\n        {\n            description: \"The Fr\\xe9chet Inception Distance (FID) calculates the distance between distributions between synthetic and real samples. A lower FID score indicates better similarity between the distributions of real and generated images.\",\n            id: \"FID\"\n        },\n        {\n            description: \"R-precision assesses how the generated image aligns with the provided text description. It uses the generated images as queries to retrieve relevant text descriptions. The top 'r' relevant descriptions are selected and used to calculate R-precision as r/R, where 'R' is the number of ground truth descriptions associated with the generated images. A higher R-precision value indicates a better model.\",\n            id: \"R-Precision\"\n        }\n    ],\n    models: [\n        {\n            description: \"One of the most powerful image generation models that can generate realistic outputs.\",\n            id: \"black-forest-labs/FLUX.1-Krea-dev\"\n        },\n        {\n            description: \"A powerful image generation model.\",\n            id: \"Qwen/Qwen-Image\"\n        },\n        {\n            description: \"Powerful and fast image generation model.\",\n            id: \"ByteDance/SDXL-Lightning\"\n        },\n        {\n            description: \"A powerful text-to-image model.\",\n            id: \"ByteDance/Hyper-SD\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A powerful text-to-image application.\",\n            id: \"stabilityai/stable-diffusion-3-medium\"\n        },\n        {\n            description: \"A text-to-image application to generate comics.\",\n            id: \"jbilcke-hf/ai-comic-factory\"\n        },\n        {\n            description: \"An application to match multiple custom image generation models.\",\n            id: \"multimodalart/flux-lora-lab\"\n        },\n        {\n            description: \"A powerful yet very fast image generation application.\",\n            id: \"latent-consistency/lcm-lora-for-sdxl\"\n        },\n        {\n            description: \"A gallery to explore various text-to-image models.\",\n            id: \"multimodalart/LoraTheExplorer\"\n        },\n        {\n            description: \"An application for `text-to-image`, `image-to-image` and image inpainting.\",\n            id: \"ArtGAN/Stable-Diffusion-ControlNet-WebUI\"\n        },\n        {\n            description: \"An application to generate realistic images given photos of a person and a prompt.\",\n            id: \"InstantX/InstantID\"\n        }\n    ],\n    summary: \"Text-to-image is the task of generating images from input text. These pipelines can also be used to modify and edit images based on text prompts.\",\n    widgetModels: [\n        \"black-forest-labs/FLUX.1-dev\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtdG8taW1hZ2UvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUMsVUFBVTtnQkFDVkYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRyxTQUFTO1FBQ0w7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsUUFBUTtRQUNKO1lBQ0lYLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBK0I7SUFDOUNDLFdBQVc7QUFDZjtBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy90ZXh0LXRvLWltYWdlL2RhdGEuanM/OWZjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJSZWRDYXBzIGlzIGEgbGFyZ2Utc2NhbGUgZGF0YXNldCBvZiAxMk0gaW1hZ2UtdGV4dCBwYWlycyBjb2xsZWN0ZWQgZnJvbSBSZWRkaXQuXCIsXG4gICAgICAgICAgICBpZDogXCJyZWRfY2Fwc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25jZXB0dWFsIENhcHRpb25zIGlzIGEgZGF0YXNldCBjb25zaXN0aW5nIG9mIH4zLjNNIGltYWdlcyBhbm5vdGF0ZWQgd2l0aCBjYXB0aW9ucy5cIixcbiAgICAgICAgICAgIGlkOiBcImNvbmNlcHR1YWxfY2FwdGlvbnNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiMTJNIGltYWdlLWNhcHRpb24gcGFpcnMuXCIsXG4gICAgICAgICAgICBpZDogXCJTcGF3bmluZy9QRDEyTVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiQSBjaXR5IGFib3ZlIGNsb3VkcywgcGFzdGVsIGNvbG9ycywgVmljdG9yaWFuIHN0eWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiaW1hZ2UuanBlZ1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgSW5jZXB0aW9uIFNjb3JlIChJUykgbWVhc3VyZSBhc3Nlc3NlcyBkaXZlcnNpdHkgYW5kIG1lYW5pbmdmdWxuZXNzLiBJdCB1c2VzIGEgZ2VuZXJhdGVkIGltYWdlIHNhbXBsZSB0byBwcmVkaWN0IGl0cyBsYWJlbC4gQSBoaWdoZXIgc2NvcmUgc2lnbmlmaWVzIG1vcmUgZGl2ZXJzZSBhbmQgbWVhbmluZ2Z1bCBpbWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJJU1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgRnLDqWNoZXQgSW5jZXB0aW9uIERpc3RhbmNlIChGSUQpIGNhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gZGlzdHJpYnV0aW9ucyBiZXR3ZWVuIHN5bnRoZXRpYyBhbmQgcmVhbCBzYW1wbGVzLiBBIGxvd2VyIEZJRCBzY29yZSBpbmRpY2F0ZXMgYmV0dGVyIHNpbWlsYXJpdHkgYmV0d2VlbiB0aGUgZGlzdHJpYnV0aW9ucyBvZiByZWFsIGFuZCBnZW5lcmF0ZWQgaW1hZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiRklEXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlItcHJlY2lzaW9uIGFzc2Vzc2VzIGhvdyB0aGUgZ2VuZXJhdGVkIGltYWdlIGFsaWducyB3aXRoIHRoZSBwcm92aWRlZCB0ZXh0IGRlc2NyaXB0aW9uLiBJdCB1c2VzIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFzIHF1ZXJpZXMgdG8gcmV0cmlldmUgcmVsZXZhbnQgdGV4dCBkZXNjcmlwdGlvbnMuIFRoZSB0b3AgJ3InIHJlbGV2YW50IGRlc2NyaXB0aW9ucyBhcmUgc2VsZWN0ZWQgYW5kIHVzZWQgdG8gY2FsY3VsYXRlIFItcHJlY2lzaW9uIGFzIHIvUiwgd2hlcmUgJ1InIGlzIHRoZSBudW1iZXIgb2YgZ3JvdW5kIHRydXRoIGRlc2NyaXB0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIGdlbmVyYXRlZCBpbWFnZXMuIEEgaGlnaGVyIFItcHJlY2lzaW9uIHZhbHVlIGluZGljYXRlcyBhIGJldHRlciBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIlItUHJlY2lzaW9uXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiT25lIG9mIHRoZSBtb3N0IHBvd2VyZnVsIGltYWdlIGdlbmVyYXRpb24gbW9kZWxzIHRoYXQgY2FuIGdlbmVyYXRlIHJlYWxpc3RpYyBvdXRwdXRzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiYmxhY2stZm9yZXN0LWxhYnMvRkxVWC4xLUtyZWEtZGV2XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcG93ZXJmdWwgaW1hZ2UgZ2VuZXJhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIlF3ZW4vUXdlbi1JbWFnZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQb3dlcmZ1bCBhbmQgZmFzdCBpbWFnZSBnZW5lcmF0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiQnl0ZURhbmNlL1NEWEwtTGlnaHRuaW5nXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcG93ZXJmdWwgdGV4dC10by1pbWFnZSBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIkJ5dGVEYW5jZS9IeXBlci1TRFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcG93ZXJmdWwgdGV4dC10by1pbWFnZSBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcInN0YWJpbGl0eWFpL3N0YWJsZS1kaWZmdXNpb24tMy1tZWRpdW1cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSB0ZXh0LXRvLWltYWdlIGFwcGxpY2F0aW9uIHRvIGdlbmVyYXRlIGNvbWljcy5cIixcbiAgICAgICAgICAgIGlkOiBcImpiaWxja2UtaGYvYWktY29taWMtZmFjdG9yeVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0byBtYXRjaCBtdWx0aXBsZSBjdXN0b20gaW1hZ2UgZ2VuZXJhdGlvbiBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJtdWx0aW1vZGFsYXJ0L2ZsdXgtbG9yYS1sYWJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBwb3dlcmZ1bCB5ZXQgdmVyeSBmYXN0IGltYWdlIGdlbmVyYXRpb24gYXBwbGljYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJsYXRlbnQtY29uc2lzdGVuY3kvbGNtLWxvcmEtZm9yLXNkeGxcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBnYWxsZXJ5IHRvIGV4cGxvcmUgdmFyaW91cyB0ZXh0LXRvLWltYWdlIG1vZGVscy5cIixcbiAgICAgICAgICAgIGlkOiBcIm11bHRpbW9kYWxhcnQvTG9yYVRoZUV4cGxvcmVyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIGZvciBgdGV4dC10by1pbWFnZWAsIGBpbWFnZS10by1pbWFnZWAgYW5kIGltYWdlIGlucGFpbnRpbmcuXCIsXG4gICAgICAgICAgICBpZDogXCJBcnRHQU4vU3RhYmxlLURpZmZ1c2lvbi1Db250cm9sTmV0LVdlYlVJXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRvIGdlbmVyYXRlIHJlYWxpc3RpYyBpbWFnZXMgZ2l2ZW4gcGhvdG9zIG9mIGEgcGVyc29uIGFuZCBhIHByb21wdC5cIixcbiAgICAgICAgICAgIGlkOiBcIkluc3RhbnRYL0luc3RhbnRJRFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUZXh0LXRvLWltYWdlIGlzIHRoZSB0YXNrIG9mIGdlbmVyYXRpbmcgaW1hZ2VzIGZyb20gaW5wdXQgdGV4dC4gVGhlc2UgcGlwZWxpbmVzIGNhbiBhbHNvIGJlIHVzZWQgdG8gbW9kaWZ5IGFuZCBlZGl0IGltYWdlcyBiYXNlZCBvbiB0ZXh0IHByb21wdHMuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJibGFjay1mb3Jlc3QtbGFicy9GTFVYLjEtZGV2XCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsImZpbGVuYW1lIiwibWV0cmljcyIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-image/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-speech/data.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-speech/data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    canonicalId: \"text-to-audio\",\n    datasets: [\n        {\n            description: \"10K hours of multi-speaker English dataset.\",\n            id: \"parler-tts/mls_eng_10k\"\n        },\n        {\n            description: \"Multi-speaker English dataset.\",\n            id: \"mythicinfinity/libritts_r\"\n        },\n        {\n            description: \"Multi-lingual dataset.\",\n            id: \"facebook/multilingual_librispeech\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"I love audio models on the Hub!\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"audio.wav\",\n                type: \"audio\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The Mel Cepstral Distortion (MCD) metric is used to calculate the quality of generated speech.\",\n            id: \"mel cepstral distortion\"\n        }\n    ],\n    models: [\n        {\n            description: \"Small yet powerful TTS model.\",\n            id: \"KittenML/kitten-tts-nano-0.1\"\n        },\n        {\n            description: \"Bleeding edge TTS model.\",\n            id: \"ResembleAI/chatterbox\"\n        },\n        {\n            description: \"A massively multi-lingual TTS model.\",\n            id: \"fishaudio/fish-speech-1.5\"\n        },\n        {\n            description: \"A text-to-dialogue model.\",\n            id: \"nari-labs/Dia-1.6B-0626\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application for generate high quality speech in different languages.\",\n            id: \"hexgrad/Kokoro-TTS\"\n        },\n        {\n            description: \"A multilingual text-to-speech application.\",\n            id: \"fishaudio/fish-speech-1\"\n        },\n        {\n            description: \"Performant TTS application.\",\n            id: \"ResembleAI/Chatterbox\"\n        },\n        {\n            description: \"An application to compare different TTS models.\",\n            id: \"TTS-AGI/TTS-Arena-V2\"\n        },\n        {\n            description: \"An application that generates podcast episodes.\",\n            id: \"ngxson/kokoro-podcast-generator\"\n        }\n    ],\n    summary: \"Text-to-Speech (TTS) is the task of generating natural sounding speech given text input. TTS models can be extended to have a single model that generates speech for multiple speakers and multiple languages.\",\n    widgetModels: [\n        \"suno/bark\"\n    ],\n    youtubeId: \"NW62DpzJ274\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtdG8tc3BlZWNoL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsYUFBYTtJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUMsVUFBVTtnQkFDVkYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRyxTQUFTO1FBQ0w7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQVk7SUFDM0JDLFdBQVc7QUFDZjtBQUNBLGlFQUFlakIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy90ZXh0LXRvLXNwZWVjaC9kYXRhLmpzPzcyNjYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgY2Fub25pY2FsSWQ6IFwidGV4dC10by1hdWRpb1wiLFxuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIjEwSyBob3VycyBvZiBtdWx0aS1zcGVha2VyIEVuZ2xpc2ggZGF0YXNldC5cIixcbiAgICAgICAgICAgIGlkOiBcInBhcmxlci10dHMvbWxzX2VuZ18xMGtcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTXVsdGktc3BlYWtlciBFbmdsaXNoIGRhdGFzZXQuXCIsXG4gICAgICAgICAgICBpZDogXCJteXRoaWNpbmZpbml0eS9saWJyaXR0c19yXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk11bHRpLWxpbmd1YWwgZGF0YXNldC5cIixcbiAgICAgICAgICAgIGlkOiBcImZhY2Vib29rL211bHRpbGluZ3VhbF9saWJyaXNwZWVjaFwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiSSBsb3ZlIGF1ZGlvIG1vZGVscyBvbiB0aGUgSHViIVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImF1ZGlvLndhdlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXVkaW9cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBNZWwgQ2Vwc3RyYWwgRGlzdG9ydGlvbiAoTUNEKSBtZXRyaWMgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHF1YWxpdHkgb2YgZ2VuZXJhdGVkIHNwZWVjaC5cIixcbiAgICAgICAgICAgIGlkOiBcIm1lbCBjZXBzdHJhbCBkaXN0b3J0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU21hbGwgeWV0IHBvd2VyZnVsIFRUUyBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIktpdHRlbk1ML2tpdHRlbi10dHMtbmFuby0wLjFcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmxlZWRpbmcgZWRnZSBUVFMgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJSZXNlbWJsZUFJL2NoYXR0ZXJib3hcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBtYXNzaXZlbHkgbXVsdGktbGluZ3VhbCBUVFMgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmaXNoYXVkaW8vZmlzaC1zcGVlY2gtMS41XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdGV4dC10by1kaWFsb2d1ZSBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIm5hcmktbGFicy9EaWEtMS42Qi0wNjI2XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gZm9yIGdlbmVyYXRlIGhpZ2ggcXVhbGl0eSBzcGVlY2ggaW4gZGlmZmVyZW50IGxhbmd1YWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcImhleGdyYWQvS29rb3JvLVRUU1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIG11bHRpbGluZ3VhbCB0ZXh0LXRvLXNwZWVjaCBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImZpc2hhdWRpby9maXNoLXNwZWVjaC0xXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlBlcmZvcm1hbnQgVFRTIGFwcGxpY2F0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiUmVzZW1ibGVBSS9DaGF0dGVyYm94XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRvIGNvbXBhcmUgZGlmZmVyZW50IFRUUyBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJUVFMtQUdJL1RUUy1BcmVuYS1WMlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGdlbmVyYXRlcyBwb2RjYXN0IGVwaXNvZGVzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibmd4c29uL2tva29yby1wb2RjYXN0LWdlbmVyYXRvclwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUZXh0LXRvLVNwZWVjaCAoVFRTKSBpcyB0aGUgdGFzayBvZiBnZW5lcmF0aW5nIG5hdHVyYWwgc291bmRpbmcgc3BlZWNoIGdpdmVuIHRleHQgaW5wdXQuIFRUUyBtb2RlbHMgY2FuIGJlIGV4dGVuZGVkIHRvIGhhdmUgYSBzaW5nbGUgbW9kZWwgdGhhdCBnZW5lcmF0ZXMgc3BlZWNoIGZvciBtdWx0aXBsZSBzcGVha2VycyBhbmQgbXVsdGlwbGUgbGFuZ3VhZ2VzLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wic3Vuby9iYXJrXCJdLFxuICAgIHlvdXR1YmVJZDogXCJOVzYyRHB6SjI3NFwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiY2Fub25pY2FsSWQiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwibGFiZWwiLCJjb250ZW50IiwidHlwZSIsIm91dHB1dHMiLCJmaWxlbmFtZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-speech/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-video/data.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-video/data.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Microsoft Research Video to Text is a large-scale dataset for open domain video captioning\",\n            id: \"iejMac/CLIP-MSR-VTT\"\n        },\n        {\n            description: \"UCF101 Human Actions dataset consists of 13,320 video clips from YouTube, with 101 classes.\",\n            id: \"quchenyuan/UCF101-ZIP\"\n        },\n        {\n            description: \"A high-quality dataset for human action recognition in YouTube videos.\",\n            id: \"nateraw/kinetics\"\n        },\n        {\n            description: \"A dataset of video clips of humans performing pre-defined basic actions with everyday objects.\",\n            id: \"HuggingFaceM4/something_something_v2\"\n        },\n        {\n            description: \"This dataset consists of text-video pairs and contains noisy samples with irrelevant video descriptions\",\n            id: \"HuggingFaceM4/webvid\"\n        },\n        {\n            description: \"A dataset of short Flickr videos for the temporal localization of events with descriptions.\",\n            id: \"iejMac/CLIP-DiDeMo\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"Darth Vader is surfing on the waves.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"text-to-video-output.gif\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Inception Score uses an image classification model that predicts class labels and evaluates how distinct and diverse the images are. A higher score indicates better video generation.\",\n            id: \"is\"\n        },\n        {\n            description: \"Frechet Inception Distance uses an image classification model to obtain image embeddings. The metric compares mean and standard deviation of the embeddings of real and generated images. A smaller score indicates better video generation.\",\n            id: \"fid\"\n        },\n        {\n            description: \"Frechet Video Distance uses a model that captures coherence for changes in frames and the quality of each frame. A smaller score indicates better video generation.\",\n            id: \"fvd\"\n        },\n        {\n            description: \"CLIPSIM measures similarity between video frames and text using an image-text similarity model. A higher score indicates better video generation.\",\n            id: \"clipsim\"\n        }\n    ],\n    models: [\n        {\n            description: \"A strong model for consistent video generation.\",\n            id: \"tencent/HunyuanVideo\"\n        },\n        {\n            description: \"A text-to-video model with high fidelity motion and strong prompt adherence.\",\n            id: \"Lightricks/LTX-Video\"\n        },\n        {\n            description: \"A text-to-video model focusing on physics-aware applications like robotics.\",\n            id: \"nvidia/Cosmos-1.0-Diffusion-7B-Text2World\"\n        },\n        {\n            description: \"Very fast model for video generation.\",\n            id: \"Lightricks/LTX-Video-0.9.8-13B-distilled\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that generates video from text.\",\n            id: \"VideoCrafter/VideoCrafter\"\n        },\n        {\n            description: \"Consistent video generation application.\",\n            id: \"Wan-AI/Wan2.1\"\n        },\n        {\n            description: \"A cutting edge video generation application.\",\n            id: \"Pyramid-Flow/pyramid-flow\"\n        }\n    ],\n    summary: \"Text-to-video models can be used in any application that requires generating consistent sequence of images from text. \",\n    widgetModels: [\n        \"Wan-AI/Wan2.2-TI2V-5B\"\n    ],\n    youtubeId: undefined\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RleHQtdG8tdmlkZW8vZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUMsVUFBVTtnQkFDVkYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBRyxTQUFTO1FBQ0w7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVSxRQUFRO1FBQ0o7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFcsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBd0I7SUFDdkNDLFdBQVdDO0FBQ2Y7QUFDQSxpRUFBZWpCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdGV4dC10by12aWRlby9kYXRhLmpzPzU1ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTWljcm9zb2Z0IFJlc2VhcmNoIFZpZGVvIHRvIFRleHQgaXMgYSBsYXJnZS1zY2FsZSBkYXRhc2V0IGZvciBvcGVuIGRvbWFpbiB2aWRlbyBjYXB0aW9uaW5nXCIsXG4gICAgICAgICAgICBpZDogXCJpZWpNYWMvQ0xJUC1NU1ItVlRUXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlVDRjEwMSBIdW1hbiBBY3Rpb25zIGRhdGFzZXQgY29uc2lzdHMgb2YgMTMsMzIwIHZpZGVvIGNsaXBzIGZyb20gWW91VHViZSwgd2l0aCAxMDEgY2xhc3Nlcy5cIixcbiAgICAgICAgICAgIGlkOiBcInF1Y2hlbnl1YW4vVUNGMTAxLVpJUFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGhpZ2gtcXVhbGl0eSBkYXRhc2V0IGZvciBodW1hbiBhY3Rpb24gcmVjb2duaXRpb24gaW4gWW91VHViZSB2aWRlb3MuXCIsXG4gICAgICAgICAgICBpZDogXCJuYXRlcmF3L2tpbmV0aWNzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZGF0YXNldCBvZiB2aWRlbyBjbGlwcyBvZiBodW1hbnMgcGVyZm9ybWluZyBwcmUtZGVmaW5lZCBiYXNpYyBhY3Rpb25zIHdpdGggZXZlcnlkYXkgb2JqZWN0cy5cIixcbiAgICAgICAgICAgIGlkOiBcIkh1Z2dpbmdGYWNlTTQvc29tZXRoaW5nX3NvbWV0aGluZ192MlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGlzIGRhdGFzZXQgY29uc2lzdHMgb2YgdGV4dC12aWRlbyBwYWlycyBhbmQgY29udGFpbnMgbm9pc3kgc2FtcGxlcyB3aXRoIGlycmVsZXZhbnQgdmlkZW8gZGVzY3JpcHRpb25zXCIsXG4gICAgICAgICAgICBpZDogXCJIdWdnaW5nRmFjZU00L3dlYnZpZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGRhdGFzZXQgb2Ygc2hvcnQgRmxpY2tyIHZpZGVvcyBmb3IgdGhlIHRlbXBvcmFsIGxvY2FsaXphdGlvbiBvZiBldmVudHMgd2l0aCBkZXNjcmlwdGlvbnMuXCIsXG4gICAgICAgICAgICBpZDogXCJpZWpNYWMvQ0xJUC1EaURlTW9cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiSW5wdXRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIkRhcnRoIFZhZGVyIGlzIHN1cmZpbmcgb24gdGhlIHdhdmVzLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcInRleHQtdG8tdmlkZW8tb3V0cHV0LmdpZlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1nXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJbmNlcHRpb24gU2NvcmUgdXNlcyBhbiBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbCB0aGF0IHByZWRpY3RzIGNsYXNzIGxhYmVscyBhbmQgZXZhbHVhdGVzIGhvdyBkaXN0aW5jdCBhbmQgZGl2ZXJzZSB0aGUgaW1hZ2VzIGFyZS4gQSBoaWdoZXIgc2NvcmUgaW5kaWNhdGVzIGJldHRlciB2aWRlbyBnZW5lcmF0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaXNcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRnJlY2hldCBJbmNlcHRpb24gRGlzdGFuY2UgdXNlcyBhbiBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbCB0byBvYnRhaW4gaW1hZ2UgZW1iZWRkaW5ncy4gVGhlIG1ldHJpYyBjb21wYXJlcyBtZWFuIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gb2YgdGhlIGVtYmVkZGluZ3Mgb2YgcmVhbCBhbmQgZ2VuZXJhdGVkIGltYWdlcy4gQSBzbWFsbGVyIHNjb3JlIGluZGljYXRlcyBiZXR0ZXIgdmlkZW8gZ2VuZXJhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImZpZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGcmVjaGV0IFZpZGVvIERpc3RhbmNlIHVzZXMgYSBtb2RlbCB0aGF0IGNhcHR1cmVzIGNvaGVyZW5jZSBmb3IgY2hhbmdlcyBpbiBmcmFtZXMgYW5kIHRoZSBxdWFsaXR5IG9mIGVhY2ggZnJhbWUuIEEgc21hbGxlciBzY29yZSBpbmRpY2F0ZXMgYmV0dGVyIHZpZGVvIGdlbmVyYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJmdmRcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ0xJUFNJTSBtZWFzdXJlcyBzaW1pbGFyaXR5IGJldHdlZW4gdmlkZW8gZnJhbWVzIGFuZCB0ZXh0IHVzaW5nIGFuIGltYWdlLXRleHQgc2ltaWxhcml0eSBtb2RlbC4gQSBoaWdoZXIgc2NvcmUgaW5kaWNhdGVzIGJldHRlciB2aWRlbyBnZW5lcmF0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwiY2xpcHNpbVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3Ryb25nIG1vZGVsIGZvciBjb25zaXN0ZW50IHZpZGVvIGdlbmVyYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJ0ZW5jZW50L0h1bnl1YW5WaWRlb1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHRleHQtdG8tdmlkZW8gbW9kZWwgd2l0aCBoaWdoIGZpZGVsaXR5IG1vdGlvbiBhbmQgc3Ryb25nIHByb21wdCBhZGhlcmVuY2UuXCIsXG4gICAgICAgICAgICBpZDogXCJMaWdodHJpY2tzL0xUWC1WaWRlb1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHRleHQtdG8tdmlkZW8gbW9kZWwgZm9jdXNpbmcgb24gcGh5c2ljcy1hd2FyZSBhcHBsaWNhdGlvbnMgbGlrZSByb2JvdGljcy5cIixcbiAgICAgICAgICAgIGlkOiBcIm52aWRpYS9Db3Ntb3MtMS4wLURpZmZ1c2lvbi03Qi1UZXh0MldvcmxkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZlcnkgZmFzdCBtb2RlbCBmb3IgdmlkZW8gZ2VuZXJhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIkxpZ2h0cmlja3MvTFRYLVZpZGVvLTAuOS44LTEzQi1kaXN0aWxsZWRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGdlbmVyYXRlcyB2aWRlbyBmcm9tIHRleHQuXCIsXG4gICAgICAgICAgICBpZDogXCJWaWRlb0NyYWZ0ZXIvVmlkZW9DcmFmdGVyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbnNpc3RlbnQgdmlkZW8gZ2VuZXJhdGlvbiBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIldhbi1BSS9XYW4yLjFcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBjdXR0aW5nIGVkZ2UgdmlkZW8gZ2VuZXJhdGlvbiBhcHBsaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIlB5cmFtaWQtRmxvdy9weXJhbWlkLWZsb3dcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVGV4dC10by12aWRlbyBtb2RlbHMgY2FuIGJlIHVzZWQgaW4gYW55IGFwcGxpY2F0aW9uIHRoYXQgcmVxdWlyZXMgZ2VuZXJhdGluZyBjb25zaXN0ZW50IHNlcXVlbmNlIG9mIGltYWdlcyBmcm9tIHRleHQuIFwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiV2FuLUFJL1dhbjIuMi1USTJWLTVCXCJdLFxuICAgIHlvdXR1YmVJZDogdW5kZWZpbmVkLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImxhYmVsIiwiY29udGVudCIsInR5cGUiLCJvdXRwdXRzIiwiZmlsZW5hbWUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/text-to-video/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/token-classification/data.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/token-classification/data.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset useful to benchmark named entity recognition models.\",\n            id: \"eriktks/conll2003\"\n        },\n        {\n            description: \"A multilingual dataset of Wikipedia articles annotated for named entity recognition in over 150 different languages.\",\n            id: \"unimelb-nlp/wikiann\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"My name is Omar and I live in Z\\xfcrich.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                text: \"My name is Omar and I live in Z\\xfcrich.\",\n                tokens: [\n                    {\n                        type: \"PERSON\",\n                        start: 11,\n                        end: 15\n                    },\n                    {\n                        type: \"GPE\",\n                        start: 30,\n                        end: 36\n                    }\n                ],\n                type: \"text-with-tokens\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            description: \"A robust performance model to identify people, locations, organizations and names of miscellaneous entities.\",\n            id: \"dslim/bert-base-NER\"\n        },\n        {\n            description: \"A strong model to identify people, locations, organizations and names in multiple languages.\",\n            id: \"FacebookAI/xlm-roberta-large-finetuned-conll03-english\"\n        },\n        {\n            description: \"A token classification model specialized on medical entity recognition.\",\n            id: \"blaze999/Medical-NER\"\n        },\n        {\n            description: \"Flair models are typically the state of the art in named entity recognition tasks.\",\n            id: \"flair/ner-english\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can recognizes entities, extracts noun chunks and recognizes various linguistic features of each token.\",\n            id: \"spacy/gradio_pipeline_visualizer\"\n        }\n    ],\n    summary: \"Token classification is a natural language understanding task in which a label is assigned to some tokens in a text. Some popular token classification subtasks are Named Entity Recognition (NER) and Part-of-Speech (PoS) tagging. NER models could be trained to identify specific entities in a text, such as dates, individuals and places; and PoS tagging would identify, for example, which words in a text are verbs, nouns, and punctuation marks.\",\n    widgetModels: [\n        \"FacebookAI/xlm-roberta-large-finetuned-conll03-english\"\n    ],\n    youtubeId: \"wVHdVlPScxA\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3Rva2VuLWNsYXNzaWZpY2F0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0lDLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1NBQ0g7UUFDREMsU0FBUztZQUNMO2dCQUNJQyxNQUFNO2dCQUNOQyxRQUFRO29CQUNKO3dCQUNJSCxNQUFNO3dCQUNOSSxPQUFPO3dCQUNQQyxLQUFLO29CQUNUO29CQUNBO3dCQUNJTCxNQUFNO3dCQUNOSSxPQUFPO3dCQUNQQyxLQUFLO29CQUNUO2lCQUNIO2dCQUNETCxNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FNLFNBQVM7UUFDTDtZQUNJWixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RZLFFBQVE7UUFDSjtZQUNJYixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RhLFFBQVE7UUFDSjtZQUNJZCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RjLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQXlEO0lBQ3hFQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZW5CLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdG9rZW4tY2xhc3NpZmljYXRpb24vZGF0YS5qcz8xYWY1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgd2lkZWx5IHVzZWQgZGF0YXNldCB1c2VmdWwgdG8gYmVuY2htYXJrIG5hbWVkIGVudGl0eSByZWNvZ25pdGlvbiBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJlcmlrdGtzL2NvbmxsMjAwM1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIG11bHRpbGluZ3VhbCBkYXRhc2V0IG9mIFdpa2lwZWRpYSBhcnRpY2xlcyBhbm5vdGF0ZWQgZm9yIG5hbWVkIGVudGl0eSByZWNvZ25pdGlvbiBpbiBvdmVyIDE1MCBkaWZmZXJlbnQgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwidW5pbWVsYi1ubHAvd2lraWFublwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTXkgbmFtZSBpcyBPbWFyIGFuZCBJIGxpdmUgaW4gWsO8cmljaC5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIk15IG5hbWUgaXMgT21hciBhbmQgSSBsaXZlIGluIFrDvHJpY2guXCIsXG4gICAgICAgICAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUEVSU09OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogMTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IDE1LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIkdQRVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IDMwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiAzNixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC13aXRoLXRva2Vuc1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJhY2N1cmFjeVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcInJlY2FsbFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcInByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcImYxXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSByb2J1c3QgcGVyZm9ybWFuY2UgbW9kZWwgdG8gaWRlbnRpZnkgcGVvcGxlLCBsb2NhdGlvbnMsIG9yZ2FuaXphdGlvbnMgYW5kIG5hbWVzIG9mIG1pc2NlbGxhbmVvdXMgZW50aXRpZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJkc2xpbS9iZXJ0LWJhc2UtTkVSXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgc3Ryb25nIG1vZGVsIHRvIGlkZW50aWZ5IHBlb3BsZSwgbG9jYXRpb25zLCBvcmdhbml6YXRpb25zIGFuZCBuYW1lcyBpbiBtdWx0aXBsZSBsYW5ndWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJGYWNlYm9va0FJL3hsbS1yb2JlcnRhLWxhcmdlLWZpbmV0dW5lZC1jb25sbDAzLWVuZ2xpc2hcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSB0b2tlbiBjbGFzc2lmaWNhdGlvbiBtb2RlbCBzcGVjaWFsaXplZCBvbiBtZWRpY2FsIGVudGl0eSByZWNvZ25pdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImJsYXplOTk5L01lZGljYWwtTkVSXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkZsYWlyIG1vZGVscyBhcmUgdHlwaWNhbGx5IHRoZSBzdGF0ZSBvZiB0aGUgYXJ0IGluIG5hbWVkIGVudGl0eSByZWNvZ25pdGlvbiB0YXNrcy5cIixcbiAgICAgICAgICAgIGlkOiBcImZsYWlyL25lci1lbmdsaXNoXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBjYW4gcmVjb2duaXplcyBlbnRpdGllcywgZXh0cmFjdHMgbm91biBjaHVua3MgYW5kIHJlY29nbml6ZXMgdmFyaW91cyBsaW5ndWlzdGljIGZlYXR1cmVzIG9mIGVhY2ggdG9rZW4uXCIsXG4gICAgICAgICAgICBpZDogXCJzcGFjeS9ncmFkaW9fcGlwZWxpbmVfdmlzdWFsaXplclwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3VtbWFyeTogXCJUb2tlbiBjbGFzc2lmaWNhdGlvbiBpcyBhIG5hdHVyYWwgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyB0YXNrIGluIHdoaWNoIGEgbGFiZWwgaXMgYXNzaWduZWQgdG8gc29tZSB0b2tlbnMgaW4gYSB0ZXh0LiBTb21lIHBvcHVsYXIgdG9rZW4gY2xhc3NpZmljYXRpb24gc3VidGFza3MgYXJlIE5hbWVkIEVudGl0eSBSZWNvZ25pdGlvbiAoTkVSKSBhbmQgUGFydC1vZi1TcGVlY2ggKFBvUykgdGFnZ2luZy4gTkVSIG1vZGVscyBjb3VsZCBiZSB0cmFpbmVkIHRvIGlkZW50aWZ5IHNwZWNpZmljIGVudGl0aWVzIGluIGEgdGV4dCwgc3VjaCBhcyBkYXRlcywgaW5kaXZpZHVhbHMgYW5kIHBsYWNlczsgYW5kIFBvUyB0YWdnaW5nIHdvdWxkIGlkZW50aWZ5LCBmb3IgZXhhbXBsZSwgd2hpY2ggd29yZHMgaW4gYSB0ZXh0IGFyZSB2ZXJicywgbm91bnMsIGFuZCBwdW5jdHVhdGlvbiBtYXJrcy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcIkZhY2Vib29rQUkveGxtLXJvYmVydGEtbGFyZ2UtZmluZXR1bmVkLWNvbmxsMDMtZW5nbGlzaFwiXSxcbiAgICB5b3V0dWJlSWQ6IFwid1ZIZFZsUFNjeEFcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsInRleHQiLCJ0b2tlbnMiLCJzdGFydCIsImVuZCIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/token-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/translation/data.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/translation/data.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    canonicalId: \"text-generation\",\n    datasets: [\n        {\n            description: \"A dataset of copyright-free books translated into 16 different languages.\",\n            id: \"Helsinki-NLP/opus_books\"\n        },\n        {\n            description: \"An example of translation between programming languages. This dataset consists of functions in Java and C#.\",\n            id: \"google/code_x_glue_cc_code_to_code_trans\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"My name is Omar and I live in Z\\xfcrich.\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"Mein Name ist Omar und ich wohne in Z\\xfcrich.\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"BLEU score is calculated by counting the number of shared single or subsequent tokens between the generated sequence and the reference. Subsequent n tokens are called “n-grams”. Unigram refers to a single token while bi-gram refers to token pairs and n-grams refer to n subsequent tokens. The score ranges from 0 to 1, where 1 means the translation perfectly matched and 0 did not match at all\",\n            id: \"bleu\"\n        },\n        {\n            description: \"\",\n            id: \"sacrebleu\"\n        }\n    ],\n    models: [\n        {\n            description: \"Very powerful model that can translate many languages between each other, especially low-resource languages.\",\n            id: \"facebook/nllb-200-1.3B\"\n        },\n        {\n            description: \"A general-purpose Transformer that can be used to translate from English to German, French, or Romanian.\",\n            id: \"google-t5/t5-base\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can translate between 100 languages.\",\n            id: \"Iker/Translate-100-languages\"\n        },\n        {\n            description: \"An application that can translate between many languages.\",\n            id: \"Geonmo/nllb-translation-demo\"\n        }\n    ],\n    summary: \"Translation is the task of converting text from one language to another.\",\n    widgetModels: [\n        \"facebook/mbart-large-50-many-to-many-mmt\"\n    ],\n    youtubeId: \"1JvfrvZgi6c\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3RyYW5zbGF0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsYUFBYTtJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lILE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUUsU0FBUztRQUNMO1lBQ0lSLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUSxRQUFRO1FBQ0o7WUFDSVQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RTLFFBQVE7UUFDSjtZQUNJVixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBMkM7SUFDMURDLFdBQVc7QUFDZjtBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy90cmFuc2xhdGlvbi9kYXRhLmpzPzQ5MTUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgY2Fub25pY2FsSWQ6IFwidGV4dC1nZW5lcmF0aW9uXCIsXG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkYXRhc2V0IG9mIGNvcHlyaWdodC1mcmVlIGJvb2tzIHRyYW5zbGF0ZWQgaW50byAxNiBkaWZmZXJlbnQgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSGVsc2lua2ktTkxQL29wdXNfYm9va3NcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gZXhhbXBsZSBvZiB0cmFuc2xhdGlvbiBiZXR3ZWVuIHByb2dyYW1taW5nIGxhbmd1YWdlcy4gVGhpcyBkYXRhc2V0IGNvbnNpc3RzIG9mIGZ1bmN0aW9ucyBpbiBKYXZhIGFuZCBDIy5cIixcbiAgICAgICAgICAgIGlkOiBcImdvb2dsZS9jb2RlX3hfZ2x1ZV9jY19jb2RlX3RvX2NvZGVfdHJhbnNcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiSW5wdXRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIk15IG5hbWUgaXMgT21hciBhbmQgSSBsaXZlIGluIFrDvHJpY2guXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiT3V0cHV0XCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJNZWluIE5hbWUgaXN0IE9tYXIgdW5kIGljaCB3b2huZSBpbiBaw7xyaWNoLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQkxFVSBzY29yZSBpcyBjYWxjdWxhdGVkIGJ5IGNvdW50aW5nIHRoZSBudW1iZXIgb2Ygc2hhcmVkIHNpbmdsZSBvciBzdWJzZXF1ZW50IHRva2VucyBiZXR3ZWVuIHRoZSBnZW5lcmF0ZWQgc2VxdWVuY2UgYW5kIHRoZSByZWZlcmVuY2UuIFN1YnNlcXVlbnQgbiB0b2tlbnMgYXJlIGNhbGxlZCDigJxuLWdyYW1z4oCdLiBVbmlncmFtIHJlZmVycyB0byBhIHNpbmdsZSB0b2tlbiB3aGlsZSBiaS1ncmFtIHJlZmVycyB0byB0b2tlbiBwYWlycyBhbmQgbi1ncmFtcyByZWZlciB0byBuIHN1YnNlcXVlbnQgdG9rZW5zLiBUaGUgc2NvcmUgcmFuZ2VzIGZyb20gMCB0byAxLCB3aGVyZSAxIG1lYW5zIHRoZSB0cmFuc2xhdGlvbiBwZXJmZWN0bHkgbWF0Y2hlZCBhbmQgMCBkaWQgbm90IG1hdGNoIGF0IGFsbFwiLFxuICAgICAgICAgICAgaWQ6IFwiYmxldVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcInNhY3JlYmxldVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZlcnkgcG93ZXJmdWwgbW9kZWwgdGhhdCBjYW4gdHJhbnNsYXRlIG1hbnkgbGFuZ3VhZ2VzIGJldHdlZW4gZWFjaCBvdGhlciwgZXNwZWNpYWxseSBsb3ctcmVzb3VyY2UgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmFjZWJvb2svbmxsYi0yMDAtMS4zQlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGdlbmVyYWwtcHVycG9zZSBUcmFuc2Zvcm1lciB0aGF0IGNhbiBiZSB1c2VkIHRvIHRyYW5zbGF0ZSBmcm9tIEVuZ2xpc2ggdG8gR2VybWFuLCBGcmVuY2gsIG9yIFJvbWFuaWFuLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlLXQ1L3Q1LWJhc2VcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiB0cmFuc2xhdGUgYmV0d2VlbiAxMDAgbGFuZ3VhZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSWtlci9UcmFuc2xhdGUtMTAwLWxhbmd1YWdlc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiB0cmFuc2xhdGUgYmV0d2VlbiBtYW55IGxhbmd1YWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcIkdlb25tby9ubGxiLXRyYW5zbGF0aW9uLWRlbW9cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVHJhbnNsYXRpb24gaXMgdGhlIHRhc2sgb2YgY29udmVydGluZyB0ZXh0IGZyb20gb25lIGxhbmd1YWdlIHRvIGFub3RoZXIuXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJmYWNlYm9vay9tYmFydC1sYXJnZS01MC1tYW55LXRvLW1hbnktbW10XCJdLFxuICAgIHlvdXR1YmVJZDogXCIxSnZmcnZaZ2k2Y1wiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiY2Fub25pY2FsSWQiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwibGFiZWwiLCJjb250ZW50IiwidHlwZSIsIm91dHB1dHMiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/translation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/unconditional-image-generation/data.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/unconditional-image-generation/data.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"The CIFAR-100 dataset consists of 60000 32x32 colour images in 100 classes, with 600 images per class.\",\n            id: \"cifar100\"\n        },\n        {\n            description: \"Multiple images of celebrities, used for facial expression translation.\",\n            id: \"CelebA\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Seed\",\n                content: \"42\",\n                type: \"text\"\n            },\n            {\n                label: \"Number of images to generate:\",\n                content: \"4\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"unconditional-image-generation-output.jpeg\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The inception score (IS) evaluates the quality of generated images. It measures the diversity of the generated images (the model predictions are evenly distributed across all possible labels) and their 'distinction' or 'sharpness' (the model confidently predicts a single label for each image).\",\n            id: \"Inception score (IS)\"\n        },\n        {\n            description: \"The Fr\\xe9chet Inception Distance (FID) evaluates the quality of images created by a generative model by calculating the distance between feature vectors for real and generated images.\",\n            id: \"Frećhet Inception Distance (FID)\"\n        }\n    ],\n    models: [\n        {\n            description: \"High-quality image generation model trained on the CIFAR-10 dataset. It synthesizes images of the ten classes presented in the dataset using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.\",\n            id: \"google/ddpm-cifar10-32\"\n        },\n        {\n            description: \"High-quality image generation model trained on the 256x256 CelebA-HQ dataset. It synthesizes images of faces using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.\",\n            id: \"google/ddpm-celebahq-256\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that can generate realistic faces.\",\n            id: \"CompVis/celeba-latent-diffusion\"\n        }\n    ],\n    summary: \"Unconditional image generation is the task of generating images with no condition in any context (like a prompt text or another image). Once trained, the model will create images that resemble its training data distribution.\",\n    widgetModels: [\n        \"\"\n    ],\n    // TODO: Add related video\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3VuY29uZGl0aW9uYWwtaW1hZ2UtZ2VuZXJhdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREMsTUFBTTtRQUNGQyxRQUFRO1lBQ0o7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtZQUNBO2dCQUNJRixPQUFPO2dCQUNQQyxTQUFTO2dCQUNUQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lDLFVBQVU7Z0JBQ1ZGLE1BQU07WUFDVjtTQUNIO0lBQ0w7SUFDQUcsU0FBUztRQUNMO1lBQ0lULGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEUyxRQUFRO1FBQ0o7WUFDSVYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFNBQVM7SUFDVEMsY0FBYztRQUFDO0tBQUc7SUFDbEIsMEJBQTBCO0lBQzFCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdW5jb25kaXRpb25hbC1pbWFnZS1nZW5lcmF0aW9uL2RhdGEuanM/NGM0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgQ0lGQVItMTAwIGRhdGFzZXQgY29uc2lzdHMgb2YgNjAwMDAgMzJ4MzIgY29sb3VyIGltYWdlcyBpbiAxMDAgY2xhc3Nlcywgd2l0aCA2MDAgaW1hZ2VzIHBlciBjbGFzcy5cIixcbiAgICAgICAgICAgIGlkOiBcImNpZmFyMTAwXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk11bHRpcGxlIGltYWdlcyBvZiBjZWxlYnJpdGllcywgdXNlZCBmb3IgZmFjaWFsIGV4cHJlc3Npb24gdHJhbnNsYXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJDZWxlYkFcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiU2VlZFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiNDJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZTpcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIjRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJ1bmNvbmRpdGlvbmFsLWltYWdlLWdlbmVyYXRpb24tb3V0cHV0LmpwZWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIGluY2VwdGlvbiBzY29yZSAoSVMpIGV2YWx1YXRlcyB0aGUgcXVhbGl0eSBvZiBnZW5lcmF0ZWQgaW1hZ2VzLiBJdCBtZWFzdXJlcyB0aGUgZGl2ZXJzaXR5IG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzICh0aGUgbW9kZWwgcHJlZGljdGlvbnMgYXJlIGV2ZW5seSBkaXN0cmlidXRlZCBhY3Jvc3MgYWxsIHBvc3NpYmxlIGxhYmVscykgYW5kIHRoZWlyICdkaXN0aW5jdGlvbicgb3IgJ3NoYXJwbmVzcycgKHRoZSBtb2RlbCBjb25maWRlbnRseSBwcmVkaWN0cyBhIHNpbmdsZSBsYWJlbCBmb3IgZWFjaCBpbWFnZSkuXCIsXG4gICAgICAgICAgICBpZDogXCJJbmNlcHRpb24gc2NvcmUgKElTKVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgRnLDqWNoZXQgSW5jZXB0aW9uIERpc3RhbmNlIChGSUQpIGV2YWx1YXRlcyB0aGUgcXVhbGl0eSBvZiBpbWFnZXMgY3JlYXRlZCBieSBhIGdlbmVyYXRpdmUgbW9kZWwgYnkgY2FsY3VsYXRpbmcgdGhlIGRpc3RhbmNlIGJldHdlZW4gZmVhdHVyZSB2ZWN0b3JzIGZvciByZWFsIGFuZCBnZW5lcmF0ZWQgaW1hZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiRnJlxIdoZXQgSW5jZXB0aW9uIERpc3RhbmNlIChGSUQpXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSGlnaC1xdWFsaXR5IGltYWdlIGdlbmVyYXRpb24gbW9kZWwgdHJhaW5lZCBvbiB0aGUgQ0lGQVItMTAgZGF0YXNldC4gSXQgc3ludGhlc2l6ZXMgaW1hZ2VzIG9mIHRoZSB0ZW4gY2xhc3NlcyBwcmVzZW50ZWQgaW4gdGhlIGRhdGFzZXQgdXNpbmcgZGlmZnVzaW9uIHByb2JhYmlsaXN0aWMgbW9kZWxzLCBhIGNsYXNzIG9mIGxhdGVudCB2YXJpYWJsZSBtb2RlbHMgaW5zcGlyZWQgYnkgY29uc2lkZXJhdGlvbnMgZnJvbSBub25lcXVpbGlicml1bSB0aGVybW9keW5hbWljcy5cIixcbiAgICAgICAgICAgIGlkOiBcImdvb2dsZS9kZHBtLWNpZmFyMTAtMzJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSGlnaC1xdWFsaXR5IGltYWdlIGdlbmVyYXRpb24gbW9kZWwgdHJhaW5lZCBvbiB0aGUgMjU2eDI1NiBDZWxlYkEtSFEgZGF0YXNldC4gSXQgc3ludGhlc2l6ZXMgaW1hZ2VzIG9mIGZhY2VzIHVzaW5nIGRpZmZ1c2lvbiBwcm9iYWJpbGlzdGljIG1vZGVscywgYSBjbGFzcyBvZiBsYXRlbnQgdmFyaWFibGUgbW9kZWxzIGluc3BpcmVkIGJ5IGNvbnNpZGVyYXRpb25zIGZyb20gbm9uZXF1aWxpYnJpdW0gdGhlcm1vZHluYW1pY3MuXCIsXG4gICAgICAgICAgICBpZDogXCJnb29nbGUvZGRwbS1jZWxlYmFocS0yNTZcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNhbiBnZW5lcmF0ZSByZWFsaXN0aWMgZmFjZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJDb21wVmlzL2NlbGViYS1sYXRlbnQtZGlmZnVzaW9uXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlVuY29uZGl0aW9uYWwgaW1hZ2UgZ2VuZXJhdGlvbiBpcyB0aGUgdGFzayBvZiBnZW5lcmF0aW5nIGltYWdlcyB3aXRoIG5vIGNvbmRpdGlvbiBpbiBhbnkgY29udGV4dCAobGlrZSBhIHByb21wdCB0ZXh0IG9yIGFub3RoZXIgaW1hZ2UpLiBPbmNlIHRyYWluZWQsIHRoZSBtb2RlbCB3aWxsIGNyZWF0ZSBpbWFnZXMgdGhhdCByZXNlbWJsZSBpdHMgdHJhaW5pbmcgZGF0YSBkaXN0cmlidXRpb24uXCIsXG4gICAgd2lkZ2V0TW9kZWxzOiBbXCJcIl0sXG4gICAgLy8gVE9ETzogQWRkIHJlbGF0ZWQgdmlkZW9cbiAgICB5b3V0dWJlSWQ6IFwiXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwibGFiZWwiLCJjb250ZW50IiwidHlwZSIsIm91dHB1dHMiLCJmaWxlbmFtZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/unconditional-image-generation/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-classification/data.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/video-classification/data.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Benchmark dataset used for video classification with videos that belong to 400 classes.\",\n            id: \"kinetics400\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"video-classification-input.gif\",\n                type: \"img\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Playing Guitar\",\n                        score: 0.514\n                    },\n                    {\n                        label: \"Playing Tennis\",\n                        score: 0.193\n                    },\n                    {\n                        label: \"Cooking\",\n                        score: 0.068\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"\",\n            id: \"recall\"\n        },\n        {\n            description: \"\",\n            id: \"precision\"\n        },\n        {\n            description: \"\",\n            id: \"f1\"\n        }\n    ],\n    models: [\n        {\n            // TO DO: write description\n            description: \"Strong Video Classification model trained on the Kinetics 400 dataset.\",\n            id: \"google/vivit-b-16x2-kinetics400\"\n        },\n        {\n            // TO DO: write description\n            description: \"Strong Video Classification model trained on the Kinetics 400 dataset.\",\n            id: \"microsoft/xclip-base-patch32\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that classifies video at different timestamps.\",\n            id: \"nateraw/lavila\"\n        },\n        {\n            description: \"An application that classifies video.\",\n            id: \"fcakyon/video-classification\"\n        }\n    ],\n    summary: \"Video classification is the task of assigning a label or class to an entire video. Videos are expected to have only one class for each video. Video classification models take a video as input and return a prediction about which class the video belongs to.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3ZpZGVvLWNsYXNzaWZpY2F0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVTtRQUNOO1lBQ0ksZ0NBQWdDO1lBQ2hDQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtRQUNEQyxTQUFTO1lBQ0w7Z0JBQ0lELE1BQU07Z0JBQ05FLE1BQU07b0JBQ0Y7d0JBQ0lDLE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lELE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7b0JBQ0E7d0JBQ0lELE9BQU87d0JBQ1BDLE9BQU87b0JBQ1g7aUJBQ0g7WUFDTDtTQUNIO0lBQ0w7SUFDQUMsU0FBUztRQUNMO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFUsUUFBUTtRQUNKO1lBQ0ksMkJBQTJCO1lBQzNCWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0ksMkJBQTJCO1lBQzNCRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFFBQVE7UUFDSjtZQUNJWixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRFksU0FBUztJQUNUQyxjQUFjLEVBQUU7SUFDaEJDLFdBQVc7QUFDZjtBQUNBLGlFQUFlakIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy92aWRlby1jbGFzc2lmaWNhdGlvbi9kYXRhLmpzPzYzMTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVE9ETyB3cml0ZSBwcm9wZXIgZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkJlbmNobWFyayBkYXRhc2V0IHVzZWQgZm9yIHZpZGVvIGNsYXNzaWZpY2F0aW9uIHdpdGggdmlkZW9zIHRoYXQgYmVsb25nIHRvIDQwMCBjbGFzc2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwia2luZXRpY3M0MDBcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwidmlkZW8tY2xhc3NpZmljYXRpb24taW5wdXQuZ2lmXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJQbGF5aW5nIEd1aXRhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuNTE0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJQbGF5aW5nIFRlbm5pc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMTkzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJDb29raW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4wNjgsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwiYWNjdXJhY3lcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJyZWNhbGxcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJwcmVjaXNpb25cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICBpZDogXCJmMVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPIERPOiB3cml0ZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIFZpZGVvIENsYXNzaWZpY2F0aW9uIG1vZGVsIHRyYWluZWQgb24gdGhlIEtpbmV0aWNzIDQwMCBkYXRhc2V0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlL3Zpdml0LWItMTZ4Mi1raW5ldGljczQwMFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBUTyBETzogd3JpdGUgZGVzY3JpcHRpb25cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlN0cm9uZyBWaWRlbyBDbGFzc2lmaWNhdGlvbiBtb2RlbCB0cmFpbmVkIG9uIHRoZSBLaW5ldGljcyA0MDAgZGF0YXNldC5cIixcbiAgICAgICAgICAgIGlkOiBcIm1pY3Jvc29mdC94Y2xpcC1iYXNlLXBhdGNoMzJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNsYXNzaWZpZXMgdmlkZW8gYXQgZGlmZmVyZW50IHRpbWVzdGFtcHMuXCIsXG4gICAgICAgICAgICBpZDogXCJuYXRlcmF3L2xhdmlsYVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNsYXNzaWZpZXMgdmlkZW8uXCIsXG4gICAgICAgICAgICBpZDogXCJmY2FreW9uL3ZpZGVvLWNsYXNzaWZpY2F0aW9uXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlZpZGVvIGNsYXNzaWZpY2F0aW9uIGlzIHRoZSB0YXNrIG9mIGFzc2lnbmluZyBhIGxhYmVsIG9yIGNsYXNzIHRvIGFuIGVudGlyZSB2aWRlby4gVmlkZW9zIGFyZSBleHBlY3RlZCB0byBoYXZlIG9ubHkgb25lIGNsYXNzIGZvciBlYWNoIHZpZGVvLiBWaWRlbyBjbGFzc2lmaWNhdGlvbiBtb2RlbHMgdGFrZSBhIHZpZGVvIGFzIGlucHV0IGFuZCByZXR1cm4gYSBwcmVkaWN0aW9uIGFib3V0IHdoaWNoIGNsYXNzIHRoZSB2aWRlbyBiZWxvbmdzIHRvLlwiLFxuICAgIHdpZGdldE1vZGVsczogW10sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsIm91dHB1dHMiLCJkYXRhIiwibGFiZWwiLCJzY29yZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-text-to-text/data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/video-text-to-text/data.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"Multiple-choice questions and answers about videos.\",\n            id: \"lmms-lab/Video-MME\"\n        },\n        {\n            description: \"A dataset of instructions and question-answer pairs about videos.\",\n            id: \"lmms-lab/VideoChatGPT\"\n        },\n        {\n            description: \"Large video understanding dataset.\",\n            id: \"HuggingFaceFV/finevideo\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"video-text-to-text-input.gif\",\n                type: \"img\"\n            },\n            {\n                label: \"Text Prompt\",\n                content: \"What is happening in this video?\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"The video shows a series of images showing a fountain with water jets and a variety of colorful flowers and butterflies in the background.\",\n                type: \"text\"\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A robust video-text-to-text model.\",\n            id: \"Vision-CAIR/LongVU_Qwen2_7B\"\n        },\n        {\n            description: \"Strong video-text-to-text model with reasoning capabilities.\",\n            id: \"GoodiesHere/Apollo-LMMs-Apollo-7B-t32\"\n        },\n        {\n            description: \"Strong video-text-to-text model.\",\n            id: \"HuggingFaceTB/SmolVLM2-2.2B-Instruct\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application to chat with a video-text-to-text model.\",\n            id: \"llava-hf/video-llava\"\n        },\n        {\n            description: \"A leaderboard for various video-text-to-text models.\",\n            id: \"opencompass/openvlm_video_leaderboard\"\n        },\n        {\n            description: \"An application to generate highlights from a video.\",\n            id: \"HuggingFaceTB/SmolVLM2-HighlightGenerator\"\n        }\n    ],\n    summary: \"Video-text-to-text models take in a video and a text prompt and output text. These models are also called video-language models.\",\n    widgetModels: [\n        \"\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3ZpZGVvLXRleHQtdG8tdGV4dC9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RGLE1BQU07WUFDVjtTQUNIO1FBQ0RHLFNBQVM7WUFDTDtnQkFDSUYsT0FBTztnQkFDUEMsU0FBUztnQkFDVEYsTUFBTTtZQUNWO1NBQ0g7SUFDTDtJQUNBSSxTQUFTLEVBQUU7SUFDWEMsUUFBUTtRQUNKO1lBQ0lWLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RVLFFBQVE7UUFDSjtZQUNJWCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUFHO0lBQ2xCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZWhCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdmlkZW8tdGV4dC10by10ZXh0L2RhdGEuanM/ZWY3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNdWx0aXBsZS1jaG9pY2UgcXVlc3Rpb25zIGFuZCBhbnN3ZXJzIGFib3V0IHZpZGVvcy5cIixcbiAgICAgICAgICAgIGlkOiBcImxtbXMtbGFiL1ZpZGVvLU1NRVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGRhdGFzZXQgb2YgaW5zdHJ1Y3Rpb25zIGFuZCBxdWVzdGlvbi1hbnN3ZXIgcGFpcnMgYWJvdXQgdmlkZW9zLlwiLFxuICAgICAgICAgICAgaWQ6IFwibG1tcy1sYWIvVmlkZW9DaGF0R1BUXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkxhcmdlIHZpZGVvIHVuZGVyc3RhbmRpbmcgZGF0YXNldC5cIixcbiAgICAgICAgICAgIGlkOiBcIkh1Z2dpbmdGYWNlRlYvZmluZXZpZGVvXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcInZpZGVvLXRleHQtdG8tdGV4dC1pbnB1dC5naWZcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJUZXh0IFByb21wdFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiV2hhdCBpcyBoYXBwZW5pbmcgaW4gdGhpcyB2aWRlbz9cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJBbnN3ZXJcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlRoZSB2aWRlbyBzaG93cyBhIHNlcmllcyBvZiBpbWFnZXMgc2hvd2luZyBhIGZvdW50YWluIHdpdGggd2F0ZXIgamV0cyBhbmQgYSB2YXJpZXR5IG9mIGNvbG9yZnVsIGZsb3dlcnMgYW5kIGJ1dHRlcmZsaWVzIGluIHRoZSBiYWNrZ3JvdW5kLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJvYnVzdCB2aWRlby10ZXh0LXRvLXRleHQgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJWaXNpb24tQ0FJUi9Mb25nVlVfUXdlbjJfN0JcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIHZpZGVvLXRleHQtdG8tdGV4dCBtb2RlbCB3aXRoIHJlYXNvbmluZyBjYXBhYmlsaXRpZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJHb29kaWVzSGVyZS9BcG9sbG8tTE1Ncy1BcG9sbG8tN0ItdDMyXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlN0cm9uZyB2aWRlby10ZXh0LXRvLXRleHQgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJIdWdnaW5nRmFjZVRCL1Ntb2xWTE0yLTIuMkItSW5zdHJ1Y3RcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0byBjaGF0IHdpdGggYSB2aWRlby10ZXh0LXRvLXRleHQgbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJsbGF2YS1oZi92aWRlby1sbGF2YVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGxlYWRlcmJvYXJkIGZvciB2YXJpb3VzIHZpZGVvLXRleHQtdG8tdGV4dCBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJvcGVuY29tcGFzcy9vcGVudmxtX3ZpZGVvX2xlYWRlcmJvYXJkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRvIGdlbmVyYXRlIGhpZ2hsaWdodHMgZnJvbSBhIHZpZGVvLlwiLFxuICAgICAgICAgICAgaWQ6IFwiSHVnZ2luZ0ZhY2VUQi9TbW9sVkxNMi1IaWdobGlnaHRHZW5lcmF0b3JcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVmlkZW8tdGV4dC10by10ZXh0IG1vZGVscyB0YWtlIGluIGEgdmlkZW8gYW5kIGEgdGV4dCBwcm9tcHQgYW5kIG91dHB1dCB0ZXh0LiBUaGVzZSBtb2RlbHMgYXJlIGFsc28gY2FsbGVkIHZpZGVvLWxhbmd1YWdlIG1vZGVscy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcIlwiXSxcbiAgICB5b3V0dWJlSWQ6IFwiXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwiZmlsZW5hbWUiLCJ0eXBlIiwibGFiZWwiLCJjb250ZW50Iiwib3V0cHV0cyIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/video-text-to-text/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-document-retrieval/data.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/visual-document-retrieval/data.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A large dataset used to train visual document retrieval models.\",\n            id: \"vidore/colpali_train_set\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"input.png\",\n                type: \"img\"\n            },\n            {\n                label: \"Question\",\n                content: \"Is the model in this paper the fastest for inference?\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Page 10\",\n                        score: 0.7\n                    },\n                    {\n                        label: \"Page 11\",\n                        score: 0.06\n                    },\n                    {\n                        label: \"Page 9\",\n                        score: 0.003\n                    }\n                ]\n            }\n        ]\n    },\n    isPlaceholder: false,\n    metrics: [\n        {\n            description: \"NDCG@k scores ranked recommendation lists for top-k results. 0 is the worst, 1 is the best.\",\n            id: \"Normalized Discounted Cumulative Gain at K\"\n        }\n    ],\n    models: [\n        {\n            description: \"Very accurate visual document retrieval model for multilingual queries and documents.\",\n            id: \"vidore/colqwen2-v1.0\"\n        },\n        {\n            description: \"Very fast and efficient visual document retrieval model that can also take in other modalities like audio.\",\n            id: \"Tevatron/OmniEmbed-v0.1\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard of visual document retrieval models.\",\n            id: \"vidore/vidore-leaderboard\"\n        },\n        {\n            description: \"Visual retrieval augmented generation demo based on ColQwen2 model.\",\n            id: \"vidore/visual-rag-tool\"\n        }\n    ],\n    summary: \"Visual document retrieval is the task of searching for relevant image-based documents, such as PDFs. These models take a text query and multiple documents as input and return the top-most relevant documents and relevancy scores as output.\",\n    widgetModels: [\n        \"\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3Zpc3VhbC1kb2N1bWVudC1yZXRyaWV2YWwvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RGLE1BQU07WUFDVjtTQUNIO1FBQ0RHLFNBQVM7WUFDTDtnQkFDSUgsTUFBTTtnQkFDTkksTUFBTTtvQkFDRjt3QkFDSUgsT0FBTzt3QkFDUEksT0FBTztvQkFDWDtvQkFDQTt3QkFDSUosT0FBTzt3QkFDUEksT0FBTztvQkFDWDtvQkFDQTt3QkFDSUosT0FBTzt3QkFDUEksT0FBTztvQkFDWDtpQkFDSDtZQUNMO1NBQ0g7SUFDTDtJQUNBQyxlQUFlO0lBQ2ZDLFNBQVM7UUFDTDtZQUNJWixhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RZLFFBQVE7UUFDSjtZQUNJYixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRGEsUUFBUTtRQUNKO1lBQ0lkLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEYyxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUFHO0lBQ2xCQyxXQUFXO0FBQ2Y7QUFDQSxpRUFBZW5CLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdWRpby10cmFuc2NyaXB0aW9uLWFwcC8uL25vZGVfbW9kdWxlcy9AaHVnZ2luZ2ZhY2UvdGFza3MvZGlzdC9lc20vdGFza3MvdmlzdWFsLWRvY3VtZW50LXJldHJpZXZhbC9kYXRhLmpzPzEwNDkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBsYXJnZSBkYXRhc2V0IHVzZWQgdG8gdHJhaW4gdmlzdWFsIGRvY3VtZW50IHJldHJpZXZhbCBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJ2aWRvcmUvY29scGFsaV90cmFpbl9zZXRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiaW5wdXQucG5nXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUXVlc3Rpb25cIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIklzIHRoZSBtb2RlbCBpbiB0aGlzIHBhcGVyIHRoZSBmYXN0ZXN0IGZvciBpbmZlcmVuY2U/XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjaGFydFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFnZSAxMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuNyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUGFnZSAxMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMDYsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlBhZ2UgOVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMDAzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgaXNQbGFjZWhvbGRlcjogZmFsc2UsXG4gICAgbWV0cmljczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJORENHQGsgc2NvcmVzIHJhbmtlZCByZWNvbW1lbmRhdGlvbiBsaXN0cyBmb3IgdG9wLWsgcmVzdWx0cy4gMCBpcyB0aGUgd29yc3QsIDEgaXMgdGhlIGJlc3QuXCIsXG4gICAgICAgICAgICBpZDogXCJOb3JtYWxpemVkIERpc2NvdW50ZWQgQ3VtdWxhdGl2ZSBHYWluIGF0IEtcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIG1vZGVsczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJWZXJ5IGFjY3VyYXRlIHZpc3VhbCBkb2N1bWVudCByZXRyaWV2YWwgbW9kZWwgZm9yIG11bHRpbGluZ3VhbCBxdWVyaWVzIGFuZCBkb2N1bWVudHMuXCIsXG4gICAgICAgICAgICBpZDogXCJ2aWRvcmUvY29scXdlbjItdjEuMFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJWZXJ5IGZhc3QgYW5kIGVmZmljaWVudCB2aXN1YWwgZG9jdW1lbnQgcmV0cmlldmFsIG1vZGVsIHRoYXQgY2FuIGFsc28gdGFrZSBpbiBvdGhlciBtb2RhbGl0aWVzIGxpa2UgYXVkaW8uXCIsXG4gICAgICAgICAgICBpZDogXCJUZXZhdHJvbi9PbW5pRW1iZWQtdjAuMVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgc3BhY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgbGVhZGVyYm9hcmQgb2YgdmlzdWFsIGRvY3VtZW50IHJldHJpZXZhbCBtb2RlbHMuXCIsXG4gICAgICAgICAgICBpZDogXCJ2aWRvcmUvdmlkb3JlLWxlYWRlcmJvYXJkXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlZpc3VhbCByZXRyaWV2YWwgYXVnbWVudGVkIGdlbmVyYXRpb24gZGVtbyBiYXNlZCBvbiBDb2xRd2VuMiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcInZpZG9yZS92aXN1YWwtcmFnLXRvb2xcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVmlzdWFsIGRvY3VtZW50IHJldHJpZXZhbCBpcyB0aGUgdGFzayBvZiBzZWFyY2hpbmcgZm9yIHJlbGV2YW50IGltYWdlLWJhc2VkIGRvY3VtZW50cywgc3VjaCBhcyBQREZzLiBUaGVzZSBtb2RlbHMgdGFrZSBhIHRleHQgcXVlcnkgYW5kIG11bHRpcGxlIGRvY3VtZW50cyBhcyBpbnB1dCBhbmQgcmV0dXJuIHRoZSB0b3AtbW9zdCByZWxldmFudCBkb2N1bWVudHMgYW5kIHJlbGV2YW5jeSBzY29yZXMgYXMgb3V0cHV0LlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiXCJdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJmaWxlbmFtZSIsInR5cGUiLCJsYWJlbCIsImNvbnRlbnQiLCJvdXRwdXRzIiwiZGF0YSIsInNjb3JlIiwiaXNQbGFjZWhvbGRlciIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIiwieW91dHViZUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-document-retrieval/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-question-answering/data.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/visual-question-answering/data.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset containing questions (with answers) about images.\",\n            id: \"Graphcore/vqa\"\n        },\n        {\n            description: \"A dataset to benchmark visual reasoning based on text in images.\",\n            id: \"facebook/textvqa\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"elephant.jpeg\",\n                type: \"img\"\n            },\n            {\n                label: \"Question\",\n                content: \"What is in this image?\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"elephant\",\n                        score: 0.97\n                    },\n                    {\n                        label: \"elephants\",\n                        score: 0.06\n                    },\n                    {\n                        label: \"animal\",\n                        score: 0.003\n                    }\n                ]\n            }\n        ]\n    },\n    isPlaceholder: false,\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\"\n        },\n        {\n            description: \"Measures how much a predicted answer differs from the ground truth based on the difference in their semantic meaning.\",\n            id: \"wu-palmer similarity\"\n        }\n    ],\n    models: [\n        {\n            description: \"A visual question answering model trained to convert charts and plots to text.\",\n            id: \"google/deplot\"\n        },\n        {\n            description: \"A visual question answering model trained for mathematical reasoning and chart derendering from images.\",\n            id: \"google/matcha-base\"\n        },\n        {\n            description: \"A strong visual question answering that answers questions from book covers.\",\n            id: \"google/pix2struct-ocrvqa-large\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that compares visual question answering models across different tasks.\",\n            id: \"merve/pix2struct\"\n        },\n        {\n            description: \"An application that can answer questions based on images.\",\n            id: \"nielsr/vilt-vqa\"\n        },\n        {\n            description: \"An application that can caption images and answer questions about a given image. \",\n            id: \"Salesforce/BLIP\"\n        },\n        {\n            description: \"An application that can caption images and answer questions about a given image. \",\n            id: \"vumichien/Img2Prompt\"\n        }\n    ],\n    summary: \"Visual Question Answering is the task of answering open-ended questions based on an image. They output natural language responses to natural language questions.\",\n    widgetModels: [\n        \"dandelin/vilt-b32-finetuned-vqa\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3Zpc3VhbC1xdWVzdGlvbi1hbnN3ZXJpbmcvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsV0FBVztJQUNiQyxVQUFVO1FBQ047WUFDSUMsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEYsTUFBTTtZQUNWO1NBQ0g7UUFDREcsU0FBUztZQUNMO2dCQUNJSCxNQUFNO2dCQUNOSSxNQUFNO29CQUNGO3dCQUNJSCxPQUFPO3dCQUNQSSxPQUFPO29CQUNYO29CQUNBO3dCQUNJSixPQUFPO3dCQUNQSSxPQUFPO29CQUNYO29CQUNBO3dCQUNJSixPQUFPO3dCQUNQSSxPQUFPO29CQUNYO2lCQUNIO1lBQ0w7U0FDSDtJQUNMO0lBQ0FDLGVBQWU7SUFDZkMsU0FBUztRQUNMO1lBQ0laLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEWSxRQUFRO1FBQ0o7WUFDSWIsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRGEsUUFBUTtRQUNKO1lBQ0lkLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRGMsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBa0M7SUFDakRDLFdBQVc7QUFDZjtBQUNBLGlFQUFlbkIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy92aXN1YWwtcXVlc3Rpb24tYW5zd2VyaW5nL2RhdGEuanM/NmRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YXNrRGF0YSA9IHtcbiAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHdpZGVseSB1c2VkIGRhdGFzZXQgY29udGFpbmluZyBxdWVzdGlvbnMgKHdpdGggYW5zd2VycykgYWJvdXQgaW1hZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiR3JhcGhjb3JlL3ZxYVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGRhdGFzZXQgdG8gYmVuY2htYXJrIHZpc3VhbCByZWFzb25pbmcgYmFzZWQgb24gdGV4dCBpbiBpbWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay90ZXh0dnFhXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBkZW1vOiB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBcImVsZXBoYW50LmpwZWdcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImltZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJRdWVzdGlvblwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiV2hhdCBpcyBpbiB0aGlzIGltYWdlP1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hhcnRcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcImVsZXBoYW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC45NyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiZWxlcGhhbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4wNixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiYW5pbWFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4wMDMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBpc1BsYWNlaG9sZGVyOiBmYWxzZSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuICAgICAgICAgICAgaWQ6IFwiYWNjdXJhY3lcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTWVhc3VyZXMgaG93IG11Y2ggYSBwcmVkaWN0ZWQgYW5zd2VyIGRpZmZlcnMgZnJvbSB0aGUgZ3JvdW5kIHRydXRoIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHRoZWlyIHNlbWFudGljIG1lYW5pbmcuXCIsXG4gICAgICAgICAgICBpZDogXCJ3dS1wYWxtZXIgc2ltaWxhcml0eVwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgbW9kZWxzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgdmlzdWFsIHF1ZXN0aW9uIGFuc3dlcmluZyBtb2RlbCB0cmFpbmVkIHRvIGNvbnZlcnQgY2hhcnRzIGFuZCBwbG90cyB0byB0ZXh0LlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlL2RlcGxvdFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHZpc3VhbCBxdWVzdGlvbiBhbnN3ZXJpbmcgbW9kZWwgdHJhaW5lZCBmb3IgbWF0aGVtYXRpY2FsIHJlYXNvbmluZyBhbmQgY2hhcnQgZGVyZW5kZXJpbmcgZnJvbSBpbWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJnb29nbGUvbWF0Y2hhLWJhc2VcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBzdHJvbmcgdmlzdWFsIHF1ZXN0aW9uIGFuc3dlcmluZyB0aGF0IGFuc3dlcnMgcXVlc3Rpb25zIGZyb20gYm9vayBjb3ZlcnMuXCIsXG4gICAgICAgICAgICBpZDogXCJnb29nbGUvcGl4MnN0cnVjdC1vY3J2cWEtbGFyZ2VcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBbiBhcHBsaWNhdGlvbiB0aGF0IGNvbXBhcmVzIHZpc3VhbCBxdWVzdGlvbiBhbnN3ZXJpbmcgbW9kZWxzIGFjcm9zcyBkaWZmZXJlbnQgdGFza3MuXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9waXgyc3RydWN0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgYmFzZWQgb24gaW1hZ2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwibmllbHNyL3ZpbHQtdnFhXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGNhcHRpb24gaW1hZ2VzIGFuZCBhbnN3ZXIgcXVlc3Rpb25zIGFib3V0IGEgZ2l2ZW4gaW1hZ2UuIFwiLFxuICAgICAgICAgICAgaWQ6IFwiU2FsZXNmb3JjZS9CTElQXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIGFwcGxpY2F0aW9uIHRoYXQgY2FuIGNhcHRpb24gaW1hZ2VzIGFuZCBhbnN3ZXIgcXVlc3Rpb25zIGFib3V0IGEgZ2l2ZW4gaW1hZ2UuIFwiLFxuICAgICAgICAgICAgaWQ6IFwidnVtaWNoaWVuL0ltZzJQcm9tcHRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiVmlzdWFsIFF1ZXN0aW9uIEFuc3dlcmluZyBpcyB0aGUgdGFzayBvZiBhbnN3ZXJpbmcgb3Blbi1lbmRlZCBxdWVzdGlvbnMgYmFzZWQgb24gYW4gaW1hZ2UuIFRoZXkgb3V0cHV0IG5hdHVyYWwgbGFuZ3VhZ2UgcmVzcG9uc2VzIHRvIG5hdHVyYWwgbGFuZ3VhZ2UgcXVlc3Rpb25zLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiZGFuZGVsaW4vdmlsdC1iMzItZmluZXR1bmVkLXZxYVwiXSxcbiAgICB5b3V0dWJlSWQ6IFwiXCIsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFza0RhdGE7XG4iXSwibmFtZXMiOlsidGFza0RhdGEiLCJkYXRhc2V0cyIsImRlc2NyaXB0aW9uIiwiaWQiLCJkZW1vIiwiaW5wdXRzIiwiZmlsZW5hbWUiLCJ0eXBlIiwibGFiZWwiLCJjb250ZW50Iiwib3V0cHV0cyIsImRhdGEiLCJzY29yZSIsImlzUGxhY2Vob2xkZXIiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/visual-question-answering/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-classification/data.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-classification/data.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset used to benchmark multiple variants of text classification.\",\n            id: \"nyu-mll/glue\"\n        },\n        {\n            description: \"The Multi-Genre Natural Language Inference (MultiNLI) corpus is a crowd-sourced collection of 433k sentence pairs annotated with textual entailment information.\",\n            id: \"nyu-mll/multi_nli\"\n        },\n        {\n            description: \"FEVER is a publicly available dataset for fact extraction and verification against textual sources.\",\n            id: \"fever/fever\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Text Input\",\n                content: \"Dune is the best movie ever.\",\n                type: \"text\"\n            },\n            {\n                label: \"Candidate Labels\",\n                content: \"CINEMA, ART, MUSIC\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"CINEMA\",\n                        score: 0.9\n                    },\n                    {\n                        label: \"ART\",\n                        score: 0.1\n                    },\n                    {\n                        label: \"MUSIC\",\n                        score: 0.0\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Powerful zero-shot text classification model.\",\n            id: \"facebook/bart-large-mnli\"\n        },\n        {\n            description: \"Cutting-edge zero-shot multilingual text classification model.\",\n            id: \"MoritzLaurer/ModernBERT-large-zeroshot-v2.0\"\n        },\n        {\n            description: \"Zero-shot text classification model that can be used for topic and sentiment classification.\",\n            id: \"knowledgator/gliclass-modern-base-v2.0-init\"\n        }\n    ],\n    spaces: [],\n    summary: \"Zero-shot text classification is a task in natural language processing where a model is trained on a set of labeled examples but is then able to classify new examples from previously unseen classes.\",\n    widgetModels: [\n        \"facebook/bart-large-mnli\"\n    ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3plcm8tc2hvdC1jbGFzc2lmaWNhdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lGLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RDLE1BQU07WUFDVjtTQUNIO1FBQ0RDLFNBQVM7WUFDTDtnQkFDSUQsTUFBTTtnQkFDTkUsTUFBTTtvQkFDRjt3QkFDSUosT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtvQkFDQTt3QkFDSUwsT0FBTzt3QkFDUEssT0FBTztvQkFDWDtpQkFDSDtZQUNMO1NBQ0g7SUFDTDtJQUNBQyxTQUFTLEVBQUU7SUFDWEMsUUFBUTtRQUNKO1lBQ0lYLGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RXLFFBQVEsRUFBRTtJQUNWQyxTQUFTO0lBQ1RDLGNBQWM7UUFBQztLQUEyQjtBQUM5QztBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy96ZXJvLXNob3QtY2xhc3NpZmljYXRpb24vZGF0YS5qcz9lMmIyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgd2lkZWx5IHVzZWQgZGF0YXNldCB1c2VkIHRvIGJlbmNobWFyayBtdWx0aXBsZSB2YXJpYW50cyBvZiB0ZXh0IGNsYXNzaWZpY2F0aW9uLlwiLFxuICAgICAgICAgICAgaWQ6IFwibnl1LW1sbC9nbHVlXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBNdWx0aS1HZW5yZSBOYXR1cmFsIExhbmd1YWdlIEluZmVyZW5jZSAoTXVsdGlOTEkpIGNvcnB1cyBpcyBhIGNyb3dkLXNvdXJjZWQgY29sbGVjdGlvbiBvZiA0MzNrIHNlbnRlbmNlIHBhaXJzIGFubm90YXRlZCB3aXRoIHRleHR1YWwgZW50YWlsbWVudCBpbmZvcm1hdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcIm55dS1tbGwvbXVsdGlfbmxpXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkZFVkVSIGlzIGEgcHVibGljbHkgYXZhaWxhYmxlIGRhdGFzZXQgZm9yIGZhY3QgZXh0cmFjdGlvbiBhbmQgdmVyaWZpY2F0aW9uIGFnYWluc3QgdGV4dHVhbCBzb3VyY2VzLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZmV2ZXIvZmV2ZXJcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVGV4dCBJbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiRHVuZSBpcyB0aGUgYmVzdCBtb3ZpZSBldmVyLlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJDYW5kaWRhdGUgTGFiZWxzXCIsXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJDSU5FTUEsIEFSVCwgTVVTSUNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJDSU5FTUFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkFSVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IDAuMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTVVTSUNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUG93ZXJmdWwgemVyby1zaG90IHRleHQgY2xhc3NpZmljYXRpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmYWNlYm9vay9iYXJ0LWxhcmdlLW1ubGlcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ3V0dGluZy1lZGdlIHplcm8tc2hvdCBtdWx0aWxpbmd1YWwgdGV4dCBjbGFzc2lmaWNhdGlvbiBtb2RlbC5cIixcbiAgICAgICAgICAgIGlkOiBcIk1vcml0ekxhdXJlci9Nb2Rlcm5CRVJULWxhcmdlLXplcm9zaG90LXYyLjBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiWmVyby1zaG90IHRleHQgY2xhc3NpZmljYXRpb24gbW9kZWwgdGhhdCBjYW4gYmUgdXNlZCBmb3IgdG9waWMgYW5kIHNlbnRpbWVudCBjbGFzc2lmaWNhdGlvbi5cIixcbiAgICAgICAgICAgIGlkOiBcImtub3dsZWRnYXRvci9nbGljbGFzcy1tb2Rlcm4tYmFzZS12Mi4wLWluaXRcIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHNwYWNlczogW10sXG4gICAgc3VtbWFyeTogXCJaZXJvLXNob3QgdGV4dCBjbGFzc2lmaWNhdGlvbiBpcyBhIHRhc2sgaW4gbmF0dXJhbCBsYW5ndWFnZSBwcm9jZXNzaW5nIHdoZXJlIGEgbW9kZWwgaXMgdHJhaW5lZCBvbiBhIHNldCBvZiBsYWJlbGVkIGV4YW1wbGVzIGJ1dCBpcyB0aGVuIGFibGUgdG8gY2xhc3NpZnkgbmV3IGV4YW1wbGVzIGZyb20gcHJldmlvdXNseSB1bnNlZW4gY2xhc3Nlcy5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtcImZhY2Vib29rL2JhcnQtbGFyZ2UtbW5saVwiXSxcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVzY3JpcHRpb24iLCJpZCIsImRlbW8iLCJpbnB1dHMiLCJsYWJlbCIsImNvbnRlbnQiLCJ0eXBlIiwib3V0cHV0cyIsImRhdGEiLCJzY29yZSIsIm1ldHJpY3MiLCJtb2RlbHMiLCJzcGFjZXMiLCJzdW1tYXJ5Iiwid2lkZ2V0TW9kZWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-image-classification/data.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-image-classification/data.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"\",\n            id: \"\"\n        }\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-classification-input.jpeg\",\n                type: \"img\"\n            },\n            {\n                label: \"Classes\",\n                content: \"cat, dog, bird\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Cat\",\n                        score: 0.664\n                    },\n                    {\n                        label: \"Dog\",\n                        score: 0.329\n                    },\n                    {\n                        label: \"Bird\",\n                        score: 0.008\n                    }\n                ]\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"Computes the number of times the correct label appears in top K labels predicted\",\n            id: \"top-K accuracy\"\n        }\n    ],\n    models: [\n        {\n            description: \"Multilingual image classification model for 80 languages.\",\n            id: \"visheratin/mexma-siglip\"\n        },\n        {\n            description: \"Strong zero-shot image classification model.\",\n            id: \"google/siglip2-base-patch16-224\"\n        },\n        {\n            description: \"Robust zero-shot image classification model.\",\n            id: \"intfloat/mmE5-mllama-11b-instruct\"\n        },\n        {\n            description: \"Powerful zero-shot image classification model supporting 94 languages.\",\n            id: \"jinaai/jina-clip-v2\"\n        },\n        {\n            description: \"Strong image classification model for biomedical domain.\",\n            id: \"microsoft/BiomedCLIP-PubMedBERT_256-vit_base_patch16_224\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"An application that leverages zero-shot image classification to find best captions to generate an image. \",\n            id: \"pharma/CLIP-Interrogator\"\n        },\n        {\n            description: \"An application to compare different zero-shot image classification models. \",\n            id: \"merve/compare_clip_siglip\"\n        }\n    ],\n    summary: \"Zero-shot image classification is the task of classifying previously unseen classes during training of a model.\",\n    widgetModels: [\n        \"google/siglip-so400m-patch14-224\"\n    ],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3plcm8tc2hvdC1pbWFnZS1jbGFzc2lmaWNhdGlvbi9kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxXQUFXO0lBQ2JDLFVBQVU7UUFDTjtZQUNJLGdDQUFnQztZQUNoQ0MsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxNQUFNO1FBQ0ZDLFFBQVE7WUFDSjtnQkFDSUMsVUFBVTtnQkFDVkMsTUFBTTtZQUNWO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFNBQVM7Z0JBQ1RGLE1BQU07WUFDVjtTQUNIO1FBQ0RHLFNBQVM7WUFDTDtnQkFDSUgsTUFBTTtnQkFDTkksTUFBTTtvQkFDRjt3QkFDSUgsT0FBTzt3QkFDUEksT0FBTztvQkFDWDtvQkFDQTt3QkFDSUosT0FBTzt3QkFDUEksT0FBTztvQkFDWDtvQkFDQTt3QkFDSUosT0FBTzt3QkFDUEksT0FBTztvQkFDWDtpQkFDSDtZQUNMO1NBQ0g7SUFDTDtJQUNBQyxTQUFTO1FBQ0w7WUFDSVgsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEVyxRQUFRO1FBQ0o7WUFDSVosYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RZLFFBQVE7UUFDSjtZQUNJYixhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDRGEsU0FBUztJQUNUQyxjQUFjO1FBQUM7S0FBbUM7SUFDbERDLFdBQVc7QUFDZjtBQUNBLGlFQUFlbEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy96ZXJvLXNob3QtaW1hZ2UtY2xhc3NpZmljYXRpb24vZGF0YS5qcz8wYjI1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhc2tEYXRhID0ge1xuICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE8gd3JpdGUgcHJvcGVyIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcbiAgICAgICAgICAgIGlkOiBcIlwiLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgZGVtbzoge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJpbWFnZS1jbGFzc2lmaWNhdGlvbi1pbnB1dC5qcGVnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQ2xhc3Nlc1wiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiY2F0LCBkb2csIGJpcmRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJDYXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjY2NCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiRG9nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZTogMC4zMjksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkJpcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiAwLjAwOCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIG1ldHJpY3M6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ29tcHV0ZXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgY29ycmVjdCBsYWJlbCBhcHBlYXJzIGluIHRvcCBLIGxhYmVscyBwcmVkaWN0ZWRcIixcbiAgICAgICAgICAgIGlkOiBcInRvcC1LIGFjY3VyYWN5XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTXVsdGlsaW5ndWFsIGltYWdlIGNsYXNzaWZpY2F0aW9uIG1vZGVsIGZvciA4MCBsYW5ndWFnZXMuXCIsXG4gICAgICAgICAgICBpZDogXCJ2aXNoZXJhdGluL21leG1hLXNpZ2xpcFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTdHJvbmcgemVyby1zaG90IGltYWdlIGNsYXNzaWZpY2F0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiZ29vZ2xlL3NpZ2xpcDItYmFzZS1wYXRjaDE2LTIyNFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJSb2J1c3QgemVyby1zaG90IGltYWdlIGNsYXNzaWZpY2F0aW9uIG1vZGVsLlwiLFxuICAgICAgICAgICAgaWQ6IFwiaW50ZmxvYXQvbW1FNS1tbGxhbWEtMTFiLWluc3RydWN0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlBvd2VyZnVsIHplcm8tc2hvdCBpbWFnZSBjbGFzc2lmaWNhdGlvbiBtb2RlbCBzdXBwb3J0aW5nIDk0IGxhbmd1YWdlcy5cIixcbiAgICAgICAgICAgIGlkOiBcImppbmFhaS9qaW5hLWNsaXAtdjJcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU3Ryb25nIGltYWdlIGNsYXNzaWZpY2F0aW9uIG1vZGVsIGZvciBiaW9tZWRpY2FsIGRvbWFpbi5cIixcbiAgICAgICAgICAgIGlkOiBcIm1pY3Jvc29mdC9CaW9tZWRDTElQLVB1Yk1lZEJFUlRfMjU2LXZpdF9iYXNlX3BhdGNoMTZfMjI0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdGhhdCBsZXZlcmFnZXMgemVyby1zaG90IGltYWdlIGNsYXNzaWZpY2F0aW9uIHRvIGZpbmQgYmVzdCBjYXB0aW9ucyB0byBnZW5lcmF0ZSBhbiBpbWFnZS4gXCIsXG4gICAgICAgICAgICBpZDogXCJwaGFybWEvQ0xJUC1JbnRlcnJvZ2F0b3JcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gYXBwbGljYXRpb24gdG8gY29tcGFyZSBkaWZmZXJlbnQgemVyby1zaG90IGltYWdlIGNsYXNzaWZpY2F0aW9uIG1vZGVscy4gXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9jb21wYXJlX2NsaXBfc2lnbGlwXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzdW1tYXJ5OiBcIlplcm8tc2hvdCBpbWFnZSBjbGFzc2lmaWNhdGlvbiBpcyB0aGUgdGFzayBvZiBjbGFzc2lmeWluZyBwcmV2aW91c2x5IHVuc2VlbiBjbGFzc2VzIGR1cmluZyB0cmFpbmluZyBvZiBhIG1vZGVsLlwiLFxuICAgIHdpZGdldE1vZGVsczogW1wiZ29vZ2xlL3NpZ2xpcC1zbzQwMG0tcGF0Y2gxNC0yMjRcIl0sXG4gICAgeW91dHViZUlkOiBcIlwiLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhc2tEYXRhO1xuIl0sIm5hbWVzIjpbInRhc2tEYXRhIiwiZGF0YXNldHMiLCJkZXNjcmlwdGlvbiIsImlkIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsImxhYmVsIiwiY29udGVudCIsIm91dHB1dHMiLCJkYXRhIiwic2NvcmUiLCJtZXRyaWNzIiwibW9kZWxzIiwic3BhY2VzIiwic3VtbWFyeSIsIndpZGdldE1vZGVscyIsInlvdXR1YmVJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-image-classification/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-object-detection/data.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-object-detection/data.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst taskData = {\n    datasets: [],\n    demo: {\n        inputs: [\n            {\n                filename: \"zero-shot-object-detection-input.jpg\",\n                type: \"img\"\n            },\n            {\n                label: \"Classes\",\n                content: \"cat, dog, bird\",\n                type: \"text\"\n            }\n        ],\n        outputs: [\n            {\n                filename: \"zero-shot-object-detection-output.jpg\",\n                type: \"img\"\n            }\n        ]\n    },\n    metrics: [\n        {\n            description: \"The Average Precision (AP) metric is the Area Under the PR Curve (AUC-PR). It is calculated for each class separately\",\n            id: \"Average Precision\"\n        },\n        {\n            description: \"The Mean Average Precision (mAP) metric is the overall average of the AP values\",\n            id: \"Mean Average Precision\"\n        },\n        {\n            description: \"The APα metric is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\"\n        }\n    ],\n    models: [\n        {\n            description: \"Solid zero-shot object detection model.\",\n            id: \"openmmlab-community/mm_grounding_dino_large_all\"\n        },\n        {\n            description: \"Cutting-edge zero-shot object detection model.\",\n            id: \"fushh7/LLMDet\"\n        }\n    ],\n    spaces: [\n        {\n            description: \"A demo to compare different zero-shot object detection models per output and latency.\",\n            id: \"ariG23498/zero-shot-od\"\n        },\n        {\n            description: \"A demo that combines a zero-shot object detection and mask generation model for zero-shot segmentation.\",\n            id: \"merve/OWLSAM\"\n        }\n    ],\n    summary: \"Zero-shot object detection is a computer vision task to detect objects and their classes in images, without any prior training or knowledge of the classes. Zero-shot object detection models receive an image as input, as well as a list of candidate classes, and output the bounding boxes and labels where the objects have been detected.\",\n    widgetModels: [],\n    youtubeId: \"\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (taskData);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rhc2tzL3plcm8tc2hvdC1vYmplY3QtZGV0ZWN0aW9uL2RhdGEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFdBQVc7SUFDYkMsVUFBVSxFQUFFO0lBQ1pDLE1BQU07UUFDRkMsUUFBUTtZQUNKO2dCQUNJQyxVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7WUFDQTtnQkFDSUMsT0FBTztnQkFDUEMsU0FBUztnQkFDVEYsTUFBTTtZQUNWO1NBQ0g7UUFDREcsU0FBUztZQUNMO2dCQUNJSixVQUFVO2dCQUNWQyxNQUFNO1lBQ1Y7U0FDSDtJQUNMO0lBQ0FJLFNBQVM7UUFDTDtZQUNJQyxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO1FBQ0E7WUFDSUQsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7S0FDSDtJQUNEQyxRQUFRO1FBQ0o7WUFDSUYsYUFBYTtZQUNiQyxJQUFJO1FBQ1I7UUFDQTtZQUNJRCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtLQUNIO0lBQ0RFLFFBQVE7UUFDSjtZQUNJSCxhQUFhO1lBQ2JDLElBQUk7UUFDUjtRQUNBO1lBQ0lELGFBQWE7WUFDYkMsSUFBSTtRQUNSO0tBQ0g7SUFDREcsU0FBUztJQUNUQyxjQUFjLEVBQUU7SUFDaEJDLFdBQVc7QUFDZjtBQUNBLGlFQUFlaEIsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1ZGlvLXRyYW5zY3JpcHRpb24tYXBwLy4vbm9kZV9tb2R1bGVzL0BodWdnaW5nZmFjZS90YXNrcy9kaXN0L2VzbS90YXNrcy96ZXJvLXNob3Qtb2JqZWN0LWRldGVjdGlvbi9kYXRhLmpzPzIyNzEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFza0RhdGEgPSB7XG4gICAgZGF0YXNldHM6IFtdLFxuICAgIGRlbW86IHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IFwiemVyby1zaG90LW9iamVjdC1kZXRlY3Rpb24taW5wdXQuanBnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQ2xhc3Nlc1wiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiY2F0LCBkb2csIGJpcmRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJ6ZXJvLXNob3Qtb2JqZWN0LWRldGVjdGlvbi1vdXRwdXQuanBnXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWdcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICBtZXRyaWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBBdmVyYWdlIFByZWNpc2lvbiAoQVApIG1ldHJpYyBpcyB0aGUgQXJlYSBVbmRlciB0aGUgUFIgQ3VydmUgKEFVQy1QUikuIEl0IGlzIGNhbGN1bGF0ZWQgZm9yIGVhY2ggY2xhc3Mgc2VwYXJhdGVseVwiLFxuICAgICAgICAgICAgaWQ6IFwiQXZlcmFnZSBQcmVjaXNpb25cIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIE1lYW4gQXZlcmFnZSBQcmVjaXNpb24gKG1BUCkgbWV0cmljIGlzIHRoZSBvdmVyYWxsIGF2ZXJhZ2Ugb2YgdGhlIEFQIHZhbHVlc1wiLFxuICAgICAgICAgICAgaWQ6IFwiTWVhbiBBdmVyYWdlIFByZWNpc2lvblwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgQVDOsSBtZXRyaWMgaXMgdGhlIEF2ZXJhZ2UgUHJlY2lzaW9uIGF0IHRoZSBJb1UgdGhyZXNob2xkIG9mIGEgzrEgdmFsdWUsIGZvciBleGFtcGxlLCBBUDUwIGFuZCBBUDc1XCIsXG4gICAgICAgICAgICBpZDogXCJBUM6xXCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBtb2RlbHM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiU29saWQgemVyby1zaG90IG9iamVjdCBkZXRlY3Rpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJvcGVubW1sYWItY29tbXVuaXR5L21tX2dyb3VuZGluZ19kaW5vX2xhcmdlX2FsbFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDdXR0aW5nLWVkZ2UgemVyby1zaG90IG9iamVjdCBkZXRlY3Rpb24gbW9kZWwuXCIsXG4gICAgICAgICAgICBpZDogXCJmdXNoaDcvTExNRGV0XCIsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFjZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQSBkZW1vIHRvIGNvbXBhcmUgZGlmZmVyZW50IHplcm8tc2hvdCBvYmplY3QgZGV0ZWN0aW9uIG1vZGVscyBwZXIgb3V0cHV0IGFuZCBsYXRlbmN5LlwiLFxuICAgICAgICAgICAgaWQ6IFwiYXJpRzIzNDk4L3plcm8tc2hvdC1vZFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIGRlbW8gdGhhdCBjb21iaW5lcyBhIHplcm8tc2hvdCBvYmplY3QgZGV0ZWN0aW9uIGFuZCBtYXNrIGdlbmVyYXRpb24gbW9kZWwgZm9yIHplcm8tc2hvdCBzZWdtZW50YXRpb24uXCIsXG4gICAgICAgICAgICBpZDogXCJtZXJ2ZS9PV0xTQU1cIixcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIHN1bW1hcnk6IFwiWmVyby1zaG90IG9iamVjdCBkZXRlY3Rpb24gaXMgYSBjb21wdXRlciB2aXNpb24gdGFzayB0byBkZXRlY3Qgb2JqZWN0cyBhbmQgdGhlaXIgY2xhc3NlcyBpbiBpbWFnZXMsIHdpdGhvdXQgYW55IHByaW9yIHRyYWluaW5nIG9yIGtub3dsZWRnZSBvZiB0aGUgY2xhc3Nlcy4gWmVyby1zaG90IG9iamVjdCBkZXRlY3Rpb24gbW9kZWxzIHJlY2VpdmUgYW4gaW1hZ2UgYXMgaW5wdXQsIGFzIHdlbGwgYXMgYSBsaXN0IG9mIGNhbmRpZGF0ZSBjbGFzc2VzLCBhbmQgb3V0cHV0IHRoZSBib3VuZGluZyBib3hlcyBhbmQgbGFiZWxzIHdoZXJlIHRoZSBvYmplY3RzIGhhdmUgYmVlbiBkZXRlY3RlZC5cIixcbiAgICB3aWRnZXRNb2RlbHM6IFtdLFxuICAgIHlvdXR1YmVJZDogXCJcIixcbn07XG5leHBvcnQgZGVmYXVsdCB0YXNrRGF0YTtcbiJdLCJuYW1lcyI6WyJ0YXNrRGF0YSIsImRhdGFzZXRzIiwiZGVtbyIsImlucHV0cyIsImZpbGVuYW1lIiwidHlwZSIsImxhYmVsIiwiY29udGVudCIsIm91dHB1dHMiLCJtZXRyaWNzIiwiZGVzY3JpcHRpb24iLCJpZCIsIm1vZGVscyIsInNwYWNlcyIsInN1bW1hcnkiLCJ3aWRnZXRNb2RlbHMiLCJ5b3V0dWJlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tasks/zero-shot-object-detection/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@huggingface/tasks/dist/esm/tokenizer-data.js":
/*!********************************************************************!*\
  !*** ./node_modules/@huggingface/tasks/dist/esm/tokenizer-data.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPECIAL_TOKENS_ATTRIBUTES: () => (/* binding */ SPECIAL_TOKENS_ATTRIBUTES)\n/* harmony export */ });\nconst SPECIAL_TOKENS_ATTRIBUTES = [\n    \"bos_token\",\n    \"eos_token\",\n    \"unk_token\",\n    \"sep_token\",\n    \"pad_token\",\n    \"cls_token\",\n    \"mask_token\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rva2VuaXplci1kYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSw0QkFBNEI7SUFDckM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FFSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXVkaW8tdHJhbnNjcmlwdGlvbi1hcHAvLi9ub2RlX21vZHVsZXMvQGh1Z2dpbmdmYWNlL3Rhc2tzL2Rpc3QvZXNtL3Rva2VuaXplci1kYXRhLmpzPzlmYTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNQRUNJQUxfVE9LRU5TX0FUVFJJQlVURVMgPSBbXG4gICAgXCJib3NfdG9rZW5cIixcbiAgICBcImVvc190b2tlblwiLFxuICAgIFwidW5rX3Rva2VuXCIsXG4gICAgXCJzZXBfdG9rZW5cIixcbiAgICBcInBhZF90b2tlblwiLFxuICAgIFwiY2xzX3Rva2VuXCIsXG4gICAgXCJtYXNrX3Rva2VuXCIsXG4gICAgLy8gYWRkaXRpb25hbF9zcGVjaWFsX3Rva2VucyAoVE9ETylcbl07XG4iXSwibmFtZXMiOlsiU1BFQ0lBTF9UT0tFTlNfQVRUUklCVVRFUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@huggingface/tasks/dist/esm/tokenizer-data.js\n");

/***/ })

};
;